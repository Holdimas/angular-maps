{"version":3,"file":"angular-maps-v9.js","sources":["../esm2015/src/models/info-window.ts","../esm2015/src/models/marker-type-id.ts","../esm2015/src/models/marker.ts","../esm2015/src/models/map-type-id.ts","../esm2015/src/models/layer.ts","../esm2015/src/models/polygon.ts","../esm2015/src/models/polyline.ts","../esm2015/src/models/spider-cluster-marker.ts","../esm2015/src/models/cluster-placement-mode.ts","../esm2015/src/models/cluster-click-action.ts","../esm2015/src/models/canvas-overlay.ts","../esm2015/src/src/models/bing/bing-layer.ts","../esm2015/src/src/services/bing/bing-conversions.ts","../esm2015/src/src/models/bing/bing-marker.ts","../esm2015/src/src/models/bing/bing-spider-cluster-marker.ts","../esm2015/src/src/models/bing/bing-cluster-layer.ts","../esm2015/src/src/models/bing/bing-info-window.ts","../esm2015/src/models/map-label.ts","../esm2015/src/models/extender.ts","../esm2015/src/src/models/bing/bing-label.ts","../esm2015/src/src/models/bing/bing-polygon.ts","../esm2015/src/src/models/bing/bing-polyline.ts","../esm2015/src/src/models/bing/bing-events-lookup.ts","../esm2015/src/src/models/bing/bing-canvas-overlay.ts","../esm2015/src/src/services/google/google-map-types.ts","../esm2015/src/src/services/google/google-conversions.ts","../esm2015/src/src/models/google/google-info-window.ts","../esm2015/src/src/models/google/google-marker.ts","../esm2015/src/src/models/google/google-label.ts","../esm2015/src/src/models/google/google-polygon.ts","../esm2015/src/src/models/google/google-polyline.ts","../esm2015/src/src/models/google/google-events-lookup.ts","../esm2015/src/src/models/google/google-canvas-overlay.ts","../esm2015/src/services/mapservicefactory.ts","../esm2015/src/services/map.service.ts","../esm2015/src/services/marker.service.ts","../esm2015/src/services/infobox.service.ts","../esm2015/src/services/layer.service.ts","../esm2015/src/services/polygon.service.ts","../esm2015/src/services/polyline.service.ts","../esm2015/src/services/cluster.service.ts","../esm2015/src/components/infobox-action.ts","../esm2015/src/components/infobox.ts","../esm2015/src/components/map-marker.ts","../esm2015/src/components/map.ts","../esm2015/src/components/map-layer.ts","../esm2015/src/components/cluster-layer.ts","../esm2015/src/components/map-polygon.ts","../esm2015/src/components/map-polyline.ts","../esm2015/src/components/map-marker-layer.ts","../esm2015/src/components/map-polygon-layer.ts","../esm2015/src/components/map-polyline-layer.ts","../esm2015/src/services/mapapiloader.ts","../esm2015/src/src/services/bing/bing-map.api-loader.service.ts","../esm2015/src/src/services/bing/bing-infobox.service.ts","../esm2015/src/src/services/bing/bing-marker.service.ts","../esm2015/src/src/services/bing/bing-map.service.ts","../esm2015/src/src/services/bing/bing-layer-base.ts","../esm2015/src/src/services/bing/bing-layer.service.ts","../esm2015/src/src/services/bing/bing-cluster.service.ts","../esm2015/src/src/services/bing/bing-polygon.service.ts","../esm2015/src/src/services/bing/bing-polyline.service.ts","../esm2015/src/src/services/bing/bing-map.service.factory.ts","../esm2015/src/src/services/google/google-layer-base.ts","../esm2015/src/src/services/google/google-cluster.service.ts","../esm2015/src/src/services/google/google-infobox.service.ts","../esm2015/src/src/models/google/google-layer.ts","../esm2015/src/src/services/google/google-layer.service.ts","../esm2015/src/src/services/google/google-map-api-loader.service.ts","../esm2015/src/src/services/google/google-marker.service.ts","../esm2015/src/src/models/google/google-marker-clusterer.ts","../esm2015/src/src/services/google/google-map.service.ts","../esm2015/src/src/services/google/google-polygon.service.ts","../esm2015/src/src/services/google/google-polyline.service.ts","../esm2015/src/src/services/google/google-map.service.factory.ts","../../index.ts","../../angular-maps-v9.ts"],"sourcesContent":["import { ILatLong } from '../interfaces/ilatlong';\nimport { IInfoWindowOptions } from '../interfaces/iinfo-window-options';\n\nexport abstract class InfoWindow {\n\n    /**\n     * Gets whether the info box is currently open.\n     *\n     * @readonly\n     * @abstract\n     * @memberof InfoWindow\n     */\n    public abstract get IsOpen(): boolean;\n\n    /**\n     * Get the underlying native primitive of the implementation.\n     *\n     * @readonly\n     * @abstract\n     * @memberof InfoWindow\n     */\n    public abstract get NativePrimitve(): any;\n\n    /**\n     * Adds an event listener to the info window.\n     *\n     * @abstract\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\n     * @param fn - Delegate invoked when the event occurs.\n     *\n     * @memberof InfoWindow\n     */\n    public abstract AddListener(eventType: string, fn: Function): void;\n\n    /**\n     * Closes the info window.\n     *\n     * @abstract\n     *\n     * @memberof InfoWindow\n     */\n    public abstract Close(): void ;\n\n    /**\n     * Gets the position of the info window.\n     *\n     * @abstract\n     * @returns - Returns the geo coordinates of the info window.\n     *\n     * @memberof InfoWindow\n     */\n    public abstract GetPosition(): ILatLong;\n\n    /**\n     * Opens the info window.\n     *\n     * @abstract\n     *\n     * @memberof InfoWindow\n     */\n    public abstract Open(): void;\n\n    /**\n     * Sets the info window options.\n     *\n     * @abstract\n     * @param options - Info window options to set. The options will be merged with any existing options.\n     *\n     * @memberof InfoWindow\n     */\n    public abstract SetOptions(options: IInfoWindowOptions): void;\n\n    /**\n     * Sets the info window position.\n     *\n     * @abstract\n     * @param position - Geo coordinates to move the anchor of the info window to.\n     *\n     * @memberof InfoWindow\n     */\n    public abstract SetPosition(position: ILatLong): void;\n}\n","export enum MarkerTypeId {\n    None = 0,\n    FontMarker,\n    CanvasMarker,\n    DynamicCircleMarker,\n    RotatedImageMarker,\n    RoundedImageMarker,\n    ScaledImageMarker,\n    Custom\n}\n","import { ILatLong } from '../interfaces/ilatlong';\nimport { IMarkerOptions } from '../interfaces/imarker-options';\nimport { IMarkerIconInfo } from '../interfaces/imarker-icon-info';\nimport { IPoint } from '../interfaces/ipoint';\nimport { ISize } from '../interfaces/isize';\nimport { MarkerTypeId } from '../models/marker-type-id';\n\n/**\n * This interface defines the contract for an icon cache entry.\n */\ninterface IMarkerIconCacheEntry {\n    /**\n     * The icon string of the cache entry.\n     *\n     * @memberof IMarkerIconCacheEntry\n     */\n    markerIconString: string;\n\n    /**\n     * The Size of the icon.\n     *\n     * @memberof IMarkerIconCacheEntry\n    * */\n    markerSize: ISize;\n}\n\n/**\n * This class defines the contract for a marker.\n *\n * @export\n * @abstract\n */\nexport abstract class Marker {\n\n    ///\n    /// Field definitions\n    ///\n\n    /**\n     * Caches concrete img elements for marker icons to accelerate patining.\n     *\n     * @memberof Marker\n     */\n    private static ImageElementCache: Map<string, HTMLImageElement> = new Map<string, HTMLImageElement>();\n\n\n    /**\n     * Used to cache generated markers for performance and reusability.\n     *\n     * @memberof Marker\n     */\n    private static MarkerCache: Map<string, IMarkerIconCacheEntry> = new Map<string, IMarkerIconCacheEntry>();\n\n    /**\n     * Creates a marker based on the marker info. In turn calls a number of internal members to\n     * create the actual marker.\n     *\n     * @param iconInfo - icon information. Depending on the marker type, various properties\n     * need to be present. For performance, it is recommended to use an id for markers that are common to facilitate\n     * reuse.\n     * @param callback - a callback that is invoked on markers that require asyncronous\n     * processing during creation. For markers that do not require async processing, this parameter is ignored.\n     * @returns - a string or a promise for a string containing\n     * a data url with the marker image.\n     * @memberof Marker\n     */\n    public static CreateMarker(iconInfo: IMarkerIconInfo): string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> {\n        switch (iconInfo.markerType) {\n            case MarkerTypeId.CanvasMarker: return Marker.CreateCanvasMarker(iconInfo);\n            case MarkerTypeId.DynamicCircleMarker: return Marker.CreateDynamicCircleMarker(iconInfo);\n            case MarkerTypeId.FontMarker: return Marker.CreateFontBasedMarker(iconInfo);\n            case MarkerTypeId.RotatedImageMarker: return Marker.CreateRotatedImageMarker(iconInfo);\n            case MarkerTypeId.RoundedImageMarker: return Marker.CreateRoundedImageMarker(iconInfo);\n            case MarkerTypeId.ScaledImageMarker: return Marker.CreateScaledImageMarker(iconInfo);\n            case MarkerTypeId.Custom: throw Error('Custom Marker Creators are not currently supported.');\n        }\n        throw Error('Unsupported marker type: ' + iconInfo.markerType);\n    }\n\n    /**\n     * Obtains a shared img element for a marker icon to prevent unecessary creation of\n     * DOM items. This has sped up large scale makers on Bing Maps by about 70%\n     * @param icon - The icon string (url, data url, svg) for which to obtain the image.\n     * @returns - The obtained image element.\n     * @memberof Marker\n     */\n    public static GetImageForMarker(icon: string): HTMLImageElement {\n        if (icon == null || icon === '' ) { return  null; }\n\n        let img: HTMLImageElement = null;\n        img = Marker.ImageElementCache.get(icon);\n        if (img != null) { return img; }\n\n        if (typeof(document) !== 'undefined' && document != null) {\n            img = document.createElement('img');\n            img.src = icon;\n            Marker.ImageElementCache.set(icon, img);\n        }\n        return img;\n    }\n\n    /**\n     * Creates a canvased based marker using the point collection contained in the iconInfo parameter.\n     *\n     * @protected\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\n     * @returns - String with the data url for the marker image.\n     *\n     * @memberof Marker\n     */\n    protected static CreateCanvasMarker(iconInfo: IMarkerIconInfo): string {\n        if (document == null) { throw Error('Document context (window.document) is required for canvas markers.'); }\n        if (iconInfo == null || iconInfo.size == null || iconInfo.points == null) {\n            throw Error('IMarkerIconInfo.size, and IMarkerIConInfo.points are required for canvas markers.');\n        }\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\n            iconInfo.size = mi.markerSize;\n            return mi.markerIconString;\n        }\n\n        const c: HTMLCanvasElement = document.createElement('canvas');\n        const ctx: CanvasRenderingContext2D = c.getContext('2d');\n        c.width = iconInfo.size.width;\n        c.height = iconInfo.size.height;\n        if (iconInfo.rotation) {\n            // Offset the canvas such that we will rotate around the center of our arrow\n            ctx.translate(c.width * 0.5, c.height * 0.5);\n            // Rotate the canvas by the desired heading\n            ctx.rotate(iconInfo.rotation * Math.PI / 180);\n            // Return the canvas offset back to it's original position\n            ctx.translate(-c.width * 0.5, -c.height * 0.5);\n        }\n\n        ctx.fillStyle = iconInfo.color || 'red';\n\n        // Draw a path in the shape of an arrow.\n        ctx.beginPath();\n        if (iconInfo.drawingOffset) { ctx.moveTo(iconInfo.drawingOffset.x, iconInfo.drawingOffset.y); }\n        iconInfo.points.forEach((p: IPoint) => { ctx.lineTo(p.x, p.y); });\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        const s: string = c.toDataURL();\n        if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\n        return s;\n    }\n\n    /**\n     * Creates a circle marker image using information contained in the iconInfo parameter.\n     *\n     * @protected\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\n     * @returns - String with the data url for the marker image.\n     *\n     * @memberof Marker\n     */\n    protected static CreateDynamicCircleMarker(iconInfo: IMarkerIconInfo): string {\n        if (document == null) { throw Error('Document context (window.document) is required for dynamic circle markers.'); }\n        if (iconInfo == null || iconInfo.size == null) { throw Error('IMarkerIconInfo.size is required for dynamic circle markers.'); }\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\n            iconInfo.size = mi.markerSize;\n            return mi.markerIconString;\n        }\n\n        const strokeWidth: number = iconInfo.strokeWidth || 0;\n        // Create an SVG string of a circle with the specified radius and color.\n        const svg: Array<string> = [\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"',\n            iconInfo.size.width.toString(),\n            '\" height=\"',\n            iconInfo.size.width.toString(),\n            '\"><circle cx=\"',\n            (iconInfo.size.width / 2).toString(),\n            '\" cy=\"',\n            (iconInfo.size.width / 2).toString(),\n            '\" r=\"',\n            ((iconInfo.size.width / 2) - strokeWidth).toString(),\n            '\" stroke=\"',\n            iconInfo.color || 'red',\n            '\" stroke-width=\"',\n            strokeWidth.toString(),\n            '\" fill=\"',\n            iconInfo.color || 'red',\n            '\"/></svg>'\n        ];\n\n        const s: string = svg.join('');\n        if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\n        return s;\n    }\n\n    /**\n     * Creates a font based marker image (such as Font-Awesome), by using information supplied in the parameters (such as Font-Awesome).\n     *\n     * @protected\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\n     * @returns - String with the data url for the marker image.\n     *\n     * @memberof Marker\n     */\n    protected static CreateFontBasedMarker(iconInfo: IMarkerIconInfo): string {\n        if (document == null) { throw Error('Document context (window.document) is required for font based markers'); }\n        if (iconInfo == null || iconInfo.fontName == null || iconInfo.fontSize == null) {\n            throw Error('IMarkerIconInfo.fontName, IMarkerIconInfo.fontSize and IMarkerIConInfo.text are required for font based markers.');\n        }\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\n            iconInfo.size = mi.markerSize;\n            return mi.markerIconString;\n        }\n\n        const c: HTMLCanvasElement = document.createElement('canvas');\n        const ctx: CanvasRenderingContext2D = c.getContext('2d');\n        const font: string = iconInfo.fontSize + 'px ' + iconInfo.fontName;\n        ctx.font = font;\n\n        // Resize canvas based on sie of text.\n        const size: TextMetrics = ctx.measureText(iconInfo.text);\n        c.width = size.width;\n        c.height = iconInfo.fontSize;\n\n        if (iconInfo.rotation) {\n            // Offset the canvas such that we will rotate around the center of our arrow\n            ctx.translate(c.width * 0.5, c.height * 0.5);\n            // Rotate the canvas by the desired heading\n            ctx.rotate(iconInfo.rotation * Math.PI / 180);\n            // Return the canvas offset back to it's original position\n            ctx.translate(-c.width * 0.5, -c.height * 0.5);\n        }\n\n        // Reset font as it will be cleared by the resize.\n        ctx.font = font;\n        ctx.textBaseline = 'top';\n        ctx.fillStyle = iconInfo.color || 'red';\n\n        ctx.fillText(iconInfo.text, 0, 0);\n        iconInfo.size = { width: c.width, height: c.height };\n        const s: string = c.toDataURL();\n        if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\n        return s;\n    }\n\n    /**\n     * Creates an image marker by applying a roation to a supplied image.\n     *\n     * @protected\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\n     * @returns - a string or a promise for a string containing\n     * a data url with the marker image. In case of a cached image, the image will be returned, otherwise the promise.\n     *\n     * @memberof Marker\n     */\n    protected static CreateRotatedImageMarker(iconInfo: IMarkerIconInfo): string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> {\n        if (document == null) { throw Error('Document context (window.document) is required for rotated image markers'); }\n        if (iconInfo == null || iconInfo.rotation == null || iconInfo.url == null) {\n            throw Error('IMarkerIconInfo.rotation, IMarkerIconInfo.url are required for rotated image markers.');\n        }\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\n            iconInfo.size = mi.markerSize;\n            return mi.markerIconString;\n        }\n\n        const image: HTMLImageElement = new Image();\n        const promise: Promise<{icon: string, iconInfo: IMarkerIconInfo}> =\n            new Promise<{icon: string, iconInfo: IMarkerIconInfo}>((resolve, reject) => {\n            // Allow cross domain image editting.\n            image.crossOrigin = 'anonymous';\n            image.src = iconInfo.url;\n            if (iconInfo.size) {\n                image.width = iconInfo.size.width;\n                image.height = iconInfo.size.height;\n            }\n            image.onload = function () {\n                const c: HTMLCanvasElement = document.createElement('canvas');\n                const ctx: CanvasRenderingContext2D = c.getContext('2d');\n                const rads: number = iconInfo.rotation * Math.PI / 180;\n\n                // Calculate rotated image size.\n                c.width = Math.ceil(Math.abs(image.width * Math.cos(rads)) + Math.abs(image.height * Math.sin(rads)));\n                c.height = Math.ceil(Math.abs(image.width * Math.sin(rads)) + Math.abs(image.height * Math.cos(rads)));\n\n                // Move to the center of the canvas.\n                ctx.translate(c.width / 2, c.height / 2);\n                // Rotate the canvas to the specified angle in degrees.\n                ctx.rotate(rads);\n                // Draw the image, since the context is rotated, the image will be rotated also.\n                ctx.drawImage(image, -image.width / 2, -image.height / 2, image.width, image.height);\n                iconInfo.size = { width: c.width, height: c.height };\n\n                const s: string = c.toDataURL();\n                if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\n                resolve({icon: s, iconInfo: iconInfo});\n            };\n        });\n        return promise;\n    }\n\n    /**\n     * Creates a rounded image marker by applying a circle mask to a supplied image.\n     *\n     * @protected\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\n     * @param iconInfo - Callback invoked once marker generation is complete. The callback\n     * parameters are the data uri and the IMarkerIconInfo.\n     * @returns - a string or a promise for a string containing\n     * a data url with the marker image. In case of a cached image, the image will be returned, otherwise the promise.\n     *\n     * @memberof Marker\n     */\n    protected static CreateRoundedImageMarker(iconInfo: IMarkerIconInfo): string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> {\n        if (document == null) { throw Error('Document context (window.document) is required for rounded image markers'); }\n        if (iconInfo == null || iconInfo.size == null || iconInfo.url == null) {\n            throw Error('IMarkerIconInfo.size, IMarkerIconInfo.url are required for rounded image markers.');\n        }\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\n            iconInfo.size = mi.markerSize;\n            return mi.markerIconString;\n        }\n\n        const promise: Promise<{icon: string, iconInfo: IMarkerIconInfo}> =\n            new Promise<{icon: string, iconInfo: IMarkerIconInfo}>((resolve, reject) => {\n            const radius: number = iconInfo.size.width / 2;\n            const image: HTMLImageElement = new Image();\n            const offset: IPoint = iconInfo.drawingOffset || { x: 0, y: 0 };\n\n            // Allow cross domain image editting.\n            image.crossOrigin = 'anonymous';\n            image.src = iconInfo.url;\n            image.onload = function () {\n                const c: HTMLCanvasElement = document.createElement('canvas');\n                const ctx: CanvasRenderingContext2D = c.getContext('2d');\n                c.width = iconInfo.size.width;\n                c.height = iconInfo.size.width;\n\n                // Draw a circle which can be used to clip the image, then draw the image.\n                ctx.beginPath();\n                ctx.arc(radius, radius, radius, 0, 2 * Math.PI, false);\n                ctx.fill();\n                ctx.clip();\n                ctx.drawImage(image, offset.x, offset.y, iconInfo.size.width, iconInfo.size.width);\n                iconInfo.size = { width: c.width, height: c.height };\n\n                const s: string = c.toDataURL();\n                if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\n                resolve({icon: s, iconInfo: iconInfo});\n            };\n        });\n        return promise;\n    }\n\n    /**\n     * Creates a scaled image marker by scaling a supplied image by a factor using a canvas.\n     *\n     * @protected\n     * @param iconInfo - {@link IMarkerIconInfo} containing the information necessary to create the icon.\n     * @param iconInfo - Callback invoked once marker generation is complete. The callback\n     * parameters are the data uri and the IMarkerIconInfo.\n     * @returns - a string or a promise for a string containing\n     * a data url with the marker image. In case of a cached image, the image will be returned, otherwise the promise.\n     *\n     * @memberof Marker\n     */\n    protected static CreateScaledImageMarker(iconInfo: IMarkerIconInfo): string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> {\n        if (document == null) { throw Error('Document context (window.document) is required for scaled image markers'); }\n        if (iconInfo == null || iconInfo.scale == null || iconInfo.url == null) {\n            throw Error('IMarkerIconInfo.scale, IMarkerIconInfo.url are required for scaled image markers.');\n        }\n        if (iconInfo.id != null && Marker.MarkerCache.has(iconInfo.id)) {\n            const mi: IMarkerIconCacheEntry = Marker.MarkerCache.get(iconInfo.id);\n            iconInfo.size = mi.markerSize;\n            return mi.markerIconString;\n        }\n        const promise: Promise<{icon: string, iconInfo: IMarkerIconInfo}> =\n            new Promise<{icon: string, iconInfo: IMarkerIconInfo}>((resolve, reject) => {\n            const image: HTMLImageElement = new Image();\n\n            // Allow cross domain image editting.\n            image.crossOrigin = 'anonymous';\n            image.src = iconInfo.url;\n            image.onload = function () {\n                const c: HTMLCanvasElement = document.createElement('canvas');\n                const ctx: CanvasRenderingContext2D = c.getContext('2d');\n                c.width = image.width * iconInfo.scale;\n                c.height = image.height * iconInfo.scale;\n\n                // Draw a circle which can be used to clip the image, then draw the image.\n                ctx.drawImage(image, 0, 0, c.width, c.height);\n                iconInfo.size = { width: c.width, height: c.height };\n\n                const s: string = c.toDataURL();\n                if (iconInfo.id != null) { Marker.MarkerCache.set(iconInfo.id, { markerIconString: s, markerSize: iconInfo.size }); }\n                resolve({icon: s, iconInfo: iconInfo});\n            };\n        });\n        return promise;\n    }\n\n    ///\n    /// Property definitions\n    ///\n\n    /**\n     * Indicates that the marker is the first marker in a set.\n     *\n     * @abstract\n     * @memberof Marker\n     */\n    public abstract get IsFirst(): boolean;\n    public abstract set IsFirst(val: boolean);\n\n    /**\n     * Indicates that the marker is the last marker in the set.\n     *\n     * @abstract\n     * @memberof Marker\n     */\n    public abstract get IsLast(): boolean;\n    public abstract set IsLast(val: boolean);\n\n    /**\n     * Gets the Location of the marker\n     *\n     * @readonly\n     * @abstract\n     * @memberof Marker\n     */\n    public abstract get Location(): ILatLong;\n\n    /**\n     * Gets the marker metadata.\n     *\n     * @readonly\n     * @abstract\n     * @memberof Marker\n     */\n    public abstract get Metadata(): Map<string, any>;\n\n    /**\n     * Gets the native primitve implementing the marker (e.g. Microsoft.Maps.Pushpin)\n     *\n     * @readonly\n     * @abstract\n     * @memberof Marker\n     */\n    public abstract get NativePrimitve(): any;\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Adds an event listener to the marker.\n     *\n     * @abstract\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\n     * @param fn - Delegate invoked when the event occurs.\n     *\n     * @memberof Marker\n     */\n    public abstract AddListener(eventType: string, fn: Function): void;\n\n    /**\n     * Deletes the marker.\n     *\n     * @abstract\n     *\n     * @memberof Marker\n     */\n    public abstract DeleteMarker(): void;\n\n    /**\n     * Gets the marker label\n     *\n     * @abstract\n     *\n     * @memberof Marker\n     */\n    public abstract GetLabel(): string;\n\n    /**\n     * Gets the marker visibility\n     *\n     * @abstract\n     *\n     * @memberof Marker\n     */\n    public abstract GetVisible(): boolean;\n\n    /**\n     * Sets the anchor for the marker. Use this to adjust the root location for the marker to accomodate various marker image sizes.\n     *\n     * @abstract\n     * @param anchor - Point coordinates for the marker anchor.\n     *\n     * @memberof Marker\n     */\n    public abstract SetAnchor(anchor: IPoint): void;\n\n    /**\n     * Sets the draggability of a marker.\n     *\n     * @abstract\n     * @param draggable - True to mark the marker as draggable, false otherwise.\n     *\n     * @memberof Marker\n     */\n    public abstract SetDraggable(draggable: boolean): void;\n\n    /**\n     * Sets the icon for the marker.\n     *\n     * @abstract\n     * @param icon - String containing the icon in various forms (url, data url, etc.)\n     *\n     * @memberof Marker\n     */\n    public abstract SetIcon(icon: string): void;\n\n    /**\n     * Sets the marker label.\n     *\n     * @abstract\n     * @param label - String containing the label to set.\n     *\n     * @memberof Marker\n     */\n    public abstract SetLabel(label: string): void;\n\n    /**\n     * Sets the marker position.\n     *\n     * @abstract\n     * @param latLng - Geo coordinates to set the marker position to.\n     *\n     * @memberof Marker\n     */\n    public abstract SetPosition(latLng: ILatLong): void;\n\n    /**\n     * Sets the marker title.\n     *\n     * @abstract\n     * @param title - String containing the title to set.\n     *\n     * @memberof Marker\n     */\n    public abstract SetTitle(title: string): void;\n\n    /**\n     * Sets the marker options.\n     *\n     * @abstract\n     * @param options - {@link IMarkerOptions} object containing the marker options to set. The supplied options are\n     * merged with the underlying marker options.\n     * @memberof Marker\n     */\n    public abstract SetOptions(options: IMarkerOptions): void;\n\n    /**\n     * Sets the visiblilty of the marker.\n     *\n     * @abstract\n     * @param visible - Boolean which determines if the marker is visible or not.\n     *\n     * @memberof Marker\n     */\n    public abstract SetVisible(visible: boolean): void;\n\n}\n","export enum MapTypeId {\n\n    /** The aerial map type which uses top-down satellite & airplane imagery. */\n    aerial,\n\n    /** A darker version of the road maps. */\n    canvasDark,\n\n    /** A lighter version of the road maps which also has some of the details such as hill shading disabled. */\n    canvasLight,\n\n    /** A grayscale version of the road maps. */\n    grayscale,\n\n    /** The aerial map type including lables */\n    hybrid,\n\n    /** Displays a blank canvas that uses the mercator map project. It basically removed the base maps layer. */\n    mercator,\n\n    /** Ordnance survey map type (en-gb only). */\n    ordnanceSurvey,\n\n    /** Road map type. */\n    road,\n\n    /** Provides streetside panoramas from the street level. */\n    streetside\n\n}\n","import { ILayerOptions } from '../interfaces/ilayer-options';\nimport { Marker } from './marker';\nimport { Polygon } from './polygon';\nimport { Polyline } from './polyline';\nimport { InfoWindow } from './info-window';\n\n/**\n * Defines the contract for a map layer implementation. Deriving providers should implements this abstract\n * to provide concrete layer functionality for the map.\n *\n * @export\n * @abstract\n */\nexport abstract class Layer {\n\n    ///\n    /// Property definitions\n    ///\n\n    /**\n     * Get the native primitive underneath the abstraction layer.\n     *\n     * @returns - An object representing the native implementation of the layer in the underlying provider (such as\n     * Microsoft.Maps.Layer).\n     *\n     * @memberof Layer\n     * @abstract\n     */\n    public abstract get NativePrimitve(): any;\n\n    ///\n    /// Public methods, Layer interface implementation\n    ///\n\n    /**\n     * Adds an event listener for the layer.\n     *\n     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native\n     * layer supports.\n     * @param fn function. Handler to call when the event occurs.\n     *\n     * @memberof Layer\n     * @abstract\n     */\n    public abstract AddListener(eventType: string, fn: Function): void;\n\n    /**\n     * Adds an entity to the layer. Entities in this context should be model abstractions of concered map functionality (such\n     * as marker, infowindow, polyline, polygon, etc..) Implementations of this method should not expect native implementation of\n     * these concepts, instead, the appropriate abstract model classes should be implemented for each provider\n     *\n     * @param entity Marker|InfoWindow|Polygon|Polyline. Entity to add to the layer.\n     *\n     * @memberof Layer\n     * @abstract\n     */\n    public abstract AddEntity(entity: Marker|InfoWindow|Polygon|Polyline): void;\n\n    /**\n     * Adds a number of entities to the layer. Entities in this context should be model abstractions of concered map functionality (such\n     * as marker, infowindow, polyline, polygon, etc..) Implementations of this method should not expect native implementation of\n     * thise concepts, instead, the appropriate abstract model classes should be implemented for each provider\n     *\n     * @param entities Array<Marker|InfoWindow|Polygon|Polyline>. Entities to add to the layer.\n     *\n     * @memberof Layer\n     * @abstract\n     */\n    public abstract AddEntities(entity: Array<Marker|InfoWindow|Polygon|Polyline>): void;\n\n    /**\n     * Deletes the layer.\n     *\n     * @memberof Layer\n     * @abstract\n     */\n    public abstract Delete(): void;\n\n    /**\n     * Returns the options governing the behavior of the layer.\n     *\n     * @returns - The layer options.\n     *\n     * @memberof Layer\n     * @abstract\n     */\n    public abstract GetOptions(): ILayerOptions;\n\n    /**\n     * Returns the visibility state of the layer.\n     *\n     * @returns - True is the layer is visible, false otherwise.\n     *\n     * @memberof Layer\n     * @abstract\n     */\n    public abstract GetVisible(): boolean;\n\n     /**\n     * Removes an entity from the cluster layer. Entities in this context should be model abstractions of concered map functionality (such\n     * as marker, infowindow, polyline, polygon, etc..) Implementations of this method should not expect native implementation of\n     * thise concepts, instead, the appropriate abstract model classes should be implemented for each provider\n     *\n     * @param entity Marker|InfoWindow|Polygon|Polyline Entity to be removed from the layer.\n     *\n     * @memberof Layer\n     * @abstract\n     */\n    public abstract RemoveEntity(entity: Marker|InfoWindow|Polygon|Polyline): void;\n\n     /**\n     * Sets the entities for the cluster layer. Entities in this context should be model abstractions of concered map functionality (such\n     * as marker, infowindow, polyline, polygon, etc..) Implementations of this method should not expect native implementation of\n     * thise concepts, instead, the appropriate abstract model classes should be implemented for each provider\n     *\n     * @param entities Array<Marker>|Array<InfoWindow>|Array<Polygon>|Array<Polyline> containing the entities to add to the cluster.\n     * This replaces any existing entities.\n     *\n     * @memberof Layer\n     * @abstract\n     */\n    public abstract SetEntities(entities: Array<Marker>|Array<InfoWindow>|Array<Polygon>|Array<Polyline>): void;\n\n    /**\n     * Sets the options for the cluster layer.\n     *\n     * @param options IClusterOptions containing the options enumeration controlling the layer behavior. The supplied options\n     * are merged with the default/existing options.\n     *\n     * @memberof Layer\n     * @abstract\n     */\n    public abstract SetOptions(options: ILayerOptions): void;\n\n    /**\n     * Toggles the cluster layer visibility.\n     *\n     * @param visible Boolean true to make the layer visible, false to hide the layer.\n     *\n     * @memberof BingClusterLayer\n     * @abstract\n     */\n    public abstract SetVisible(visible: boolean): void;\n\n}\n","import { ILatLong } from '../interfaces/ilatlong';\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\n\n/**\n * Abstract class defining the contract for a polygon in the architecture specific implementation.\n *\n * @export\n * @abstract\n */\nexport abstract class Polygon {\n    ///\n    /// Field declarations\n    ///\n    protected _centroid: ILatLong;\n    protected _center: ILatLong;\n\n    ///\n    /// Property definitions\n    ///\n\n    /**\n     * Gets the polygon's center.\n     * @readonly\n     * @memberof Polygon\n     */\n    public get Center(): ILatLong {\n        if (this._center == null) {\n            this._center = this.GetBoundingCenter();\n        }\n        return this._center;\n    }\n\n    /**\n     * Gets the polygon's centroid.\n     * @readonly\n     * @memberof Polygon\n     */\n    public get Centroid(): ILatLong {\n        if (this._centroid == null) {\n            this._centroid = this.GetPolygonCentroid();\n        }\n        return this._centroid;\n    }\n\n    /**\n     * Gets or sets the maximum zoom at which the label is displayed. Ignored or ShowLabel is false.\n     *\n     * @abstract\n     * @memberof Polygon\n     * @property\n     */\n    public abstract get LabelMaxZoom(): number;\n    public abstract set LabelMaxZoom(val: number);\n\n    /**\n     * Gets or sets the minimum zoom at which the label is displayed. Ignored or ShowLabel is false.\n     *\n     * @abstract\n     * @memberof Polygon\n     * @property\n     */\n    public abstract get LabelMinZoom(): number;\n    public abstract set LabelMinZoom(val: number);\n\n    /**\n     * Gets the polygon metadata.\n     *\n     * @readonly\n     * @abstract\n     * @memberof Polygon\n     */\n    public abstract get Metadata(): Map<string, any>;\n\n    /**\n     * Gets the native primitve implementing the polygon.\n     *\n     * @readonly\n     * @memberof Polygon\n     */\n    public abstract get NativePrimitve(): any;\n\n    /**\n     * Gets or sets whether to show the label\n     *\n     * @abstract\n     * @memberof Polygon\n     * @property\n     */\n    public abstract get ShowLabel(): boolean;\n    public abstract set ShowLabel(val: boolean);\n\n    /**\n     * Gets or sets whether to show the tooltip\n     *\n     * @abstract\n     * @memberof Polygon\n     * @property\n     */\n    public abstract get ShowTooltip(): boolean;\n    public abstract set ShowTooltip(val: boolean);\n\n    /**\n     * Gets or sets the title off the polygon\n     *\n     * @abstract\n     * @memberof Polygon\n     * @property\n     */\n    public abstract get Title(): string;\n    public abstract set Title(val: string);\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Adds a delegate for an event.\n     *\n     * @abstract\n     * @param eventType - String containing the event name.\n     * @param fn - Delegate function to execute when the event occurs.\n     * @memberof Polygon\n     */\n    public abstract AddListener(eventType: string, fn: Function): void;\n\n    /**\n     * Deleted the polygon.\n     *\n     * @abstract\n     *\n     * @memberof Polygon\n     */\n    public abstract Delete(): void;\n\n    /**\n     * Gets whether the polygon is draggable.\n     *\n     * @abstract\n     * @returns - True if the polygon is dragable, false otherwise.\n     *\n     * @memberof Polygon\n     */\n    public abstract GetDraggable(): boolean;\n\n    /**\n     * Gets whether the polygon path can be edited.\n     *\n     * @abstract\n     * @returns - True if the path can be edited, false otherwise.\n     *\n     * @memberof Polygon\n     */\n    public abstract GetEditable(): boolean;\n\n    /**\n     * Gets the polygon path.\n     *\n     * @abstract\n     * @returns - Array of ILatLong objects describing the polygon path.\n     *\n     * @memberof Polygon\n     */\n    public abstract GetPath(): Array<ILatLong>;\n\n    /**\n     * Gets the polygon paths.\n     *\n     * @abstract\n     * @returns - Array of Array of ILatLong objects describing multiple polygon paths.\n     *\n     * @memberof Polygon\n     */\n    public abstract GetPaths(): Array<Array<ILatLong>>;\n\n    /**\n     * Gets whether the polygon is visible.\n     *\n     * @abstract\n     * @returns - True if the polygon is visible, false otherwise.\n     *\n     * @memberof Polygon\n     */\n    public abstract GetVisible(): boolean;\n\n    /**\n     * Sets whether the polygon is dragable.\n     *\n     * @abstract\n     * @param draggable - True to make the polygon dragable, false otherwise.\n     *\n     * @memberof Polygon\n     */\n    public abstract SetDraggable(draggable: boolean): void;\n\n    /**\n     * Sets wether the polygon path is editable.\n     *\n     * @abstract\n     * @param editable - True to make polygon path editable, false otherwise.\n     *\n     * @memberof Polygon\n     */\n    public abstract SetEditable(editable: boolean): void;\n\n    /**\n     * Sets the polygon options\n     *\n     * @abstract\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\n     * already on the underlying model.\n     *\n     * @memberof Polygon\n     */\n    public abstract SetOptions(options: IPolygonOptions): void;\n\n    /**\n     * Sets the polygon path.\n     *\n     * @abstract\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polygons path.\n     *\n     * @memberof Polygon\n     */\n    public abstract SetPath(path: Array<ILatLong> | Array<ILatLong>): void;\n\n    /**\n     * Set the polygon path or paths.\n     *\n     * @abstract\n     * @param paths An Array of {@link ILatLong}\n     * (or array of arrays) describing the polygons path(s).\n     *\n     * @memberof Polygon\n     */\n    public abstract SetPaths(paths: Array<Array<ILatLong>> | Array<ILatLong>): void;\n\n    /**\n     * Sets whether the polygon is visible.\n     *\n     * @abstract\n     * @param visible - True to set the polygon visible, false otherwise.\n     *\n     * @memberof Polygon\n     */\n    public abstract SetVisible(visible: boolean): void;\n\n    ///\n    /// Protected methods\n    ///\n\n    /**\n     * Gets the center of the polygons' bounding box.\n     *\n     * @returns - ILatLong object containing the center of the bounding box.\n     * @memberof Polygon\n     * @method\n     * @protected\n     */\n    protected GetBoundingCenter(): ILatLong {\n        let c: ILatLong = {latitude: 0, longitude: 0};\n        let x1: number = 90, x2: number = -90, y1: number = 180, y2: number = -180;\n        const path: Array<Array<ILatLong>> = this.GetPaths();\n        if (path) {\n            path.forEach(inner => inner.forEach(p => {\n                if (p.latitude < x1) { x1 = p.latitude; }\n                if (p.latitude > x2) { x2 = p.latitude; }\n                if (p.longitude < y1) { y1 = p.longitude; }\n                if (p.longitude > y2) { y2 = p.longitude; }\n            }));\n            c.latitude = x1 + (x2 - x1) / 2;\n            c.longitude = y1 + (y2 - y1) / 2;\n        }\n        else {\n            c = null;\n        }\n        return c;\n    }\n\n    /**\n     * Get the centroid of the polygon based on the polygon path.\n     *\n     * @returns - The centroid coordinates of the polygon.\n     * @memberof Polygon\n     * @method\n     * @protected\n     */\n    protected GetPolygonCentroid(): ILatLong {\n        let c: ILatLong = {latitude: 0, longitude: 0};\n        const path: Array<Array<ILatLong>> = this.GetPaths();\n        const off = path[0][0];\n        if (off != null) {\n            let twicearea: number = 0;\n            let x: number = 0;\n            let y: number = 0;\n            let p1: ILatLong, p2: ILatLong;\n            let f: number;\n            for (let k = 0; k < path.length; k++) {\n                for (let i = 0, j = path[k].length - 1; i < path[k].length; j = i++) {\n                    p1 = path[k][i];\n                    p2 = path[k][j];\n                    f = (p1.latitude - off.latitude) * (p2.longitude - off.longitude) -\n                        (p2.latitude - off.latitude) * (p1.longitude - off.longitude);\n                    twicearea += f;\n                    x += (p1.latitude + p2.latitude - 2 * off.latitude) * f;\n                    y += (p1.longitude + p2.longitude - 2 * off.longitude) * f;\n                }\n            }\n            if (twicearea !== 0) {\n                f = twicearea * 3;\n                c.latitude = x / f + off.latitude;\n                c.longitude = y / f + off.longitude;\n            }\n            else {\n                c.latitude = off.latitude;\n                c.longitude = off.longitude;\n            }\n        }\n        else {\n            c = null;\n        }\n        return c;\n    }\n}\n","import { ILatLong } from '../interfaces/ilatlong';\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\n\n/**\n * Abstract class defining the contract for a polyline in the architecture specific implementation.\n *\n * @export\n * @abstract\n */\nexport abstract class Polyline {\n    ///\n    /// Field declarations\n    ///\n    protected _centroid: ILatLong;\n    protected _center: ILatLong;\n\n    ///\n    /// Property definitions\n    ///\n\n    /**\n     * Gets the polyline's center.\n     * @readonly\n     * @memberof Polyline\n     */\n    public get Center(): ILatLong {\n        if (this._center == null) {\n            this._center = this.GetBoundingCenter();\n        }\n        return this._center;\n    }\n\n    /**\n     * Gets the polyline's centroid.\n     * @readonly\n     * @memberof Polyline\n     */\n    public get Centroid(): ILatLong {\n        if (this._centroid == null) {\n            this._centroid = this.GetPolylineCentroid();\n        }\n        return this._centroid;\n    }\n\n    /**\n     * Gets the native primitve implementing the polyline.\n     *\n     * @readonly\n     * @memberof Polyline\n     */\n    public abstract get NativePrimitve(): any;\n\n    /**\n     * Gets the polyline metadata.\n     *\n     * @readonly\n     * @abstract\n     * @memberof Polylin\n     */\n    public abstract get Metadata(): Map<string, any>;\n\n    /**\n     * Gets or sets whether to show the tooltip\n     *\n     * @abstract\n     * @memberof Polyline\n     * @property\n     */\n    public abstract get ShowTooltip(): boolean;\n    public abstract set ShowTooltip(val: boolean);\n\n    /**\n     * Gets or sets the title off the polyline\n     *\n     * @abstract\n     * @memberof Polyline\n     * @property\n     */\n    public abstract get Title(): string;\n    public abstract set Title(val: string);\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Get the centroid of the polyline based on the a path.\n     *\n     * @param path - the path for which to generate the centroid\n     * @returns - The centroid coordinates of the polyline.\n     * @memberof Polyline\n     * @method\n     */\n    public static GetPolylineCentroid(path: Array<ILatLong>): ILatLong {\n        let c: ILatLong = {latitude: 0, longitude: 0};\n        const off = path[0];\n        if (off != null) {\n            let twicearea: number = 0;\n            let x: number = 0;\n            let y: number = 0;\n            let p1: ILatLong, p2: ILatLong;\n            let f: number;\n\n            for (let i = 0, j = path.length - 1; i < path.length; j = i++) {\n                p1 = path[i];\n                p2 = path[j];\n                f = (p1.latitude - off.latitude) * (p2.longitude - off.longitude) -\n                    (p2.latitude - off.latitude) * (p1.longitude - off.longitude);\n                twicearea += f;\n                x += (p1.latitude + p2.latitude - 2 * off.latitude) * f;\n                y += (p1.longitude + p2.longitude - 2 * off.longitude) * f;\n            }\n            if (twicearea !== 0) {\n                f = twicearea * 3;\n                c.latitude = x / f + off.latitude;\n                c.longitude = y / f + off.longitude;\n            }\n            else {\n                c.latitude = off.latitude;\n                c.longitude = off.longitude;\n            }\n        }\n        else {\n            c = null;\n        }\n        return c;\n    }\n\n    /**\n     * Adds a delegate for an event.\n     *\n     * @abstract\n     * @param eventType - String containing the event name.\n     * @param fn - Delegate function to execute when the event occurs.\n     *\n     * @memberof Polyline\n     */\n    public abstract AddListener(eventType: string, fn: Function): void;\n\n    /**\n     * Deleted the polyline.\n     *\n     * @abstract\n     *\n     * @memberof Polyline\n     */\n    public abstract Delete(): void;\n\n    /**\n     * Gets whether the polyline is draggable.\n     *\n     * @abstract\n     * @returns - True if the polyline is dragable, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public abstract GetDraggable(): boolean;\n\n    /**\n     * Gets whether the polyline path can be edited.\n     *\n     * @abstract\n     * @returns - True if the path can be edited, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public abstract GetEditable(): boolean;\n\n    /**\n     * Gets the polyline path.\n     *\n     * @abstract\n     * @returns - Array of ILatLong objects describing the polyline path.\n     *\n     * @memberof Polyline\n     */\n    public abstract GetPath(): Array<ILatLong>;\n\n    /**\n     * Gets whether the polyline is visible.\n     *\n     * @abstract\n     * @returns - True if the polyline is visible, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public abstract GetVisible(): boolean;\n\n    /**\n     * Sets whether the polyline is dragable.\n     *\n     * @abstract\n     * @param draggable - True to make the polyline dragable, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public abstract SetDraggable(draggable: boolean): void;\n\n    /**\n     * Sets wether the polyline path is editable.\n     *\n     * @abstract\n     * @param editable - True to make polyline path editable, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public abstract SetEditable(editable: boolean): void;\n\n    /**\n     * Sets the polyline options\n     *\n     * @abstract\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\n     * already on the underlying model.\n     *\n     * @memberof Polyline\n     */\n    public abstract SetOptions(options: IPolylineOptions): void;\n\n    /**\n     * Sets the polyline path.\n     *\n     * @abstract\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polylines path.\n     *\n     * @memberof Polyline\n     */\n    public abstract SetPath(path: Array<ILatLong> | Array<ILatLong>): void;\n\n    /**\n     * Sets whether the polyline is visible.\n     *\n     * @abstract\n     * @param visible - True to set the polyline visible, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public abstract SetVisible(visible: boolean): void;\n\n    ///\n    /// Protected methods\n    ///\n\n    /**\n     * Gets the center of the polyline' bounding box.\n     *\n     * @returns - {@link ILatLong} object containing the center of the bounding box.\n     * @memberof Polyline\n     * @method\n     * @protected\n     */\n    protected GetBoundingCenter(): ILatLong {\n        let c: ILatLong = {latitude: 0, longitude: 0};\n        let x1: number = 90, x2: number = -90, y1: number = 180, y2: number = -180;\n        const path: Array<ILatLong> = this.GetPath();\n        if (path) {\n            path.forEach(p => {\n                if (p.latitude < x1) { x1 = p.latitude; }\n                if (p.latitude > x2) { x2 = p.latitude; }\n                if (p.longitude < y1) { y1 = p.longitude; }\n                if (p.longitude > y2) { y2 = p.longitude; }\n            });\n            c.latitude = x1 + (x2 - x1) / 2;\n            c.longitude = y1 + (y2 - y1) / 2;\n        }\n        else {\n            c = null;\n        }\n        return c;\n    }\n\n    /**\n     * Get the centroid of the polyline based on the polyline path.\n     *\n     * @returns - The centroid coordinates of the polyline.\n     * @memberof Polyline\n     * @method\n     * @protected\n     */\n    protected GetPolylineCentroid(): ILatLong {\n        const path: Array<ILatLong> = this.GetPath();\n        const c: ILatLong  = Polyline.GetPolylineCentroid(path);\n        return c;\n    }\n\n}\n","import { Marker } from './marker';\n\nexport abstract class SpiderClusterMarker extends Marker {\n\n    /** The parent pushpin in which the spider pushpin is derived from. */\n    public ParentMarker: Marker;\n\n    /** The stick that connects the spider pushpin to the cluster. */\n    public Stick: any;\n\n}\n","export enum ClusterPlacementMode {\n    None = 0,\n    MeanValue,\n    FirstPin\n}\n","export enum ClusterClickAction {\n    None = 0,\n    ZoomIntoCluster,\n    Spider\n}\n","import { ILatLong } from '../interfaces/ilatlong';\nimport { MapLabel } from './map-label';\n\nlet id: number = 0;\n\n/**\n * Abstract base implementing a canvas overlay to be placed on the map.\n *\n * @export\n * @abstract\n */\nexport abstract class CanvasOverlay {\n\n    ///\n    /// field declarations\n    ///\n    protected _readyResolver: (val: boolean) => void;\n    protected _canvas: HTMLCanvasElement;\n    protected _zoomStart: number;\n    protected _centerStart: ILatLong;\n    public _canvasReady: Promise<boolean> = new Promise<boolean>((resolve, reject) => { this._readyResolver = resolve; });\n\n    /**\n     * Returns a promise that gets resolved when the canvas overlay is ready for interaction.\n     */\n    public get CanvasReady(): Promise<boolean> { return this._canvasReady; }\n\n    /**\n    * A callback function that is triggered when the canvas is ready to be rendered for the current map view.\n    */\n    private _drawCallback: (canvas: HTMLCanvasElement) => void;\n\n\n    /**\n     * Creates a new instance of the CanvasOverlay class.\n     */\n    constructor(drawCallback: (canvas: HTMLCanvasElement) => void) {\n        this._drawCallback = drawCallback;\n        id++;\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Deletes the canvas overlay.\n     */\n    public Delete(): void {\n        this.SetMap(null);\n    }\n\n    /**\n     * Obtains geo coordinates for the click location\n     */\n    public abstract GetCoordinatesFromClick(e: any): ILatLong;\n\n\n    /**\n     * Gets the map associted with the label.\n     */\n    public abstract GetMap(): any;\n\n    /**\n     * Returns a MapLabel instance for the current platform that can be used as a tooltip.\n     * This method only generates the map label. Content and placement is the responsibility\n     * of the caller.\n     */\n    public abstract GetToolTipOverlay(): MapLabel;\n\n    /**\n     * CanvasOverlay added to map, load canvas.\n     */\n    public OnAdd(): void {\n        this._canvas = document.createElement('canvas');\n        this._canvas.style.position = 'absolute';\n        this._canvas.style.left = '0px';\n        this._canvas.style.top = '0px';\n        this._canvas.id = `xMapOverlay${id}`;\n\n        // Add the canvas to the overlay.\n        this.SetCanvasElement(this._canvas);\n    }\n\n    /**\n     * CanvasOverlay loaded, attach map events for updating canvas.\n     * @abstract\n     * @method\n     * @memberof CanvasOverlay\n     */\n    public abstract OnLoad(): void;\n\n    /**\n     * When the CanvasLayer is removed from the map, release resources.\n     * @memberof CanvasOverlay\n     * @method\n     */\n    public OnRemove(): void {\n        this.SetCanvasElement(null);\n        this.RemoveEventHandlers();\n        this._canvas = null;\n    }\n\n    /**\n     * Redraws the canvas for the current map view.\n     * @param clear - True to clear the canvas before drawing.\n     * @memberof CanvasOverlay\n     * @method\n     */\n    public Redraw(clear: boolean): void {\n        if (this._canvas == null) { return; }\n\n        // Clear canvas by updating dimensions. This also ensures canvas stays the same size as the map.\n        if (clear) { this.Resize(); }\n\n        // Call the drawing callback function if specified.\n        if (this._drawCallback) {\n            this._drawCallback(this._canvas);\n        }\n    }\n\n    /**\n     * Sets the map for the label. Settings this to null remove the label from hte map.\n     *\n     * @param map - A native map object for the underlying implementation. Implementing derivatives should return the\n     * actual native object.\n     * @memberof CanvasOverlay\n     * @method\n     */\n    public abstract SetMap(map: any): void;\n\n    ///\n    /// Protected methods\n    ///\n\n    /**\n     * Attaches the canvas to the map.\n     * @memberof CanvasOverlay\n     * @method\n     */\n    protected abstract SetCanvasElement(el: HTMLCanvasElement): void;\n\n    /**\n     * Remove the map event handlers.\n     * @memberof CanvasOverlay\n     * @method\n     * @abstract\n     * @protected\n     */\n    protected abstract RemoveEventHandlers(): void;\n\n    /**\n     * Updates the Canvas size based on the map size.\n     * @memberof CanvasOverlay\n     * @method\n     * @abstract\n     * @protected\n     */\n    protected abstract Resize(): void;\n\n    /**\n     * Updates the Canvas.\n     * @memberof CanvasOverlay\n     * @method\n     * @protected\n     */\n    protected abstract UpdateCanvas(): void;\n\n    /**\n     * Simple function for updating the CSS position and dimensions of the canvas.\n     * @param x The horizontal offset position of the canvas.\n     * @param y The vertical offset position of the canvas.\n     * @param w The width of the canvas.\n     * @param h The height of the canvas.\n     * @memberof CanvasOverlay\n     * @method\n     * @protected\n     */\n    protected UpdatePosition(x: number, y: number, w: number, h: number) {\n        // Update CSS position.\n        this._canvas.style.left = x + 'px';\n        this._canvas.style.top = y + 'px';\n\n        // Update CSS dimensions.\n        this._canvas.style.width = w + 'px';\n        this._canvas.style.height = h + 'px';\n    }\n\n}\n","import { eachSeries, nextTick } from 'async';\nimport { ILayerOptions } from '../../interfaces/ilayer-options';\nimport { Layer } from '../layer';\nimport { Marker } from '../marker';\nimport { Polygon } from '../polygon';\nimport { Polyline } from '../polyline';\nimport { InfoWindow } from '../info-window';\nimport { BingMapService } from '../../services/bing/bing-map.service';\nimport { MapService} from '../../services/map.service';\n\n/**\n * Concrete implementation of a map layer for the Bing Map Provider.\n *\n * @export\n */\nexport class BingLayer implements Layer {\n\n    private _pendingEntities: Array<Marker|InfoWindow|Polygon|Polyline> = new Array<Marker|InfoWindow|Polygon|Polyline>();\n\n    ///\n    /// Property definitions\n    ///\n\n    /**\n     * Get the native primitive underneath the abstraction layer.\n     *\n     * @returns Microsoft.Maps.Layer.\n     *\n     * @memberof BingLayer\n     */\n    public get NativePrimitve(): any {\n        return this._layer;\n    }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates a new instance of the BingClusterLayer class.\n     *\n     * @param _layer Microsoft.Maps.ClusterLayer. Native Bing Cluster Layer supporting the cluster layer.\n     * @param _maps MapService. MapService implementation to leverage for the layer.\n     *\n     * @memberof BingLayer\n     */\n    constructor(private _layer: Microsoft.Maps.Layer, private _maps: MapService) { }\n\n\n    ///\n    /// Public methods, Layer interface implementation\n    ///\n\n    /**\n     * Adds an event listener for the layer.\n     *\n     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native\n     * layer supports.\n     * @param fn function. Handler to call when the event occurs.\n     *\n     * @memberof BingLayer\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        Microsoft.Maps.Events.addHandler(this._layer, eventType, (e) => {\n            fn(e);\n        });\n    }\n\n    /**\n     * Adds an entity to the layer.\n     *\n     * @param entity Marker|InfoWindow|Polygon|Polyline. Entity to add to the layer.\n     *\n     * @memberof BingLayer\n     */\n    public AddEntity(entity: Marker|InfoWindow|Polygon|Polyline): void {\n        if (entity && entity.NativePrimitve) {\n            if (this.GetVisible()) {\n                this._layer.add(entity.NativePrimitve);\n            }\n            else {\n                this._pendingEntities.push(entity);\n            }\n        }\n    }\n\n    /**\n     * Adds a number of entities to the layer. Entities in this context should be model abstractions of concered map functionality (such\n     * as marker, infowindow, polyline, polygon, etc..)\n     *\n     * @param entities Array<Marker|InfoWindow|Polygon|Polyline>. Entities to add to the layer.\n     *\n     * @memberof BingLayer\n     */\n    public AddEntities(entities: Array<Marker|InfoWindow|Polygon|Polyline>): void {\n        //\n        // use eachSeries as opposed to _layer.add([]) to provide a non-blocking experience for larger data sets.\n        //\n        if (entities != null && Array.isArray(entities) && entities.length !== 0 ) {\n            eachSeries([...entities], (e, next) => {\n                if (this.GetVisible()) {\n                    this._layer.add(e.NativePrimitve);\n                }\n                else {\n                    this._pendingEntities.push(e);\n                }\n                nextTick(() => next());\n            });\n        }\n    }\n\n    /**\n     * Deletes the layer.\n     *\n     * @memberof BingLayer\n     */\n    public Delete(): void {\n        this._maps.DeleteLayer(this);\n    }\n\n    /**\n     * Returns the options governing the behavior of the layer.\n     *\n     * @returns IClusterOptions. The layer options.\n     *\n     * @memberof BingLayer\n     */\n    public GetOptions(): ILayerOptions {\n        const o: ILayerOptions = {\n            id: Number(this._layer.getId())\n        };\n        return o;\n    }\n\n    /**\n     * Returns the visibility state of the layer.\n     *\n     * @returns Boolean. True is the layer is visible, false otherwise.\n     *\n     * @memberof BingLayer\n     */\n    public GetVisible(): boolean  {\n        return this._layer.getVisible();\n    }\n\n    /**\n     * Removes an entity from the cluster layer.\n     *\n     * @param entity Marker|InfoWindow|Polygon|Polyline to be removed from the layer.\n     *\n     * @memberof BingLayer\n     */\n    public RemoveEntity(entity: Marker|InfoWindow|Polygon|Polyline): void {\n        if (entity.NativePrimitve) {\n            this._layer.remove(entity.NativePrimitve);\n        }\n    }\n\n    /**\n     * Sets the entities for the cluster layer.\n     *\n     * @param entities Array<Marker>|Array<InfoWindow>|Array<Polygon>|Array<Polyline> containing the entities to add to the cluster.\n     * This replaces any existing entities.\n     *\n     * @memberof BingLayer\n     */\n    public SetEntities(entities: Array<Marker>|Array<InfoWindow>|Array<Polygon>|Array<Polyline>): void {\n        //\n        // we are using removal and add as opposed to set as for large number of objects it yields a non-blocking, smoother performance...\n        //\n        this._layer.setPrimitives([]);\n        this.AddEntities(entities);\n\n    }\n\n    /**\n     * Sets the options for the cluster layer.\n     *\n     * @param options IClusterOptions containing the options enumeration controlling the layer behavior. The supplied options\n     * are merged with the default/existing options.\n     *\n     * @memberof BingLayer\n     */\n    public SetOptions(options: ILayerOptions) {\n        this._layer.metadata.id = options.id.toString();\n    }\n\n    /**\n     * Toggles the cluster layer visibility.\n     *\n     * @param visible Boolean true to make the layer visible, false to hide the layer.\n     *\n     * @memberof BingLayer\n     */\n    public SetVisible(visible: boolean): void {\n        this._layer.setVisible(visible);\n        if (visible && this._pendingEntities.length > 0) {\n            this.AddEntities(this._pendingEntities.splice(0));\n        }\n    }\n\n}\n","import { IMapOptions } from '../../interfaces/imap-options';\nimport { IBox } from '../../interfaces/ibox';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\nimport { IClusterOptions } from '../../interfaces/icluster-options';\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\nimport { IInfoWindowAction } from '../../interfaces/iinfo-window-action';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { IPoint } from '../../interfaces/ipoint';\nimport { MapTypeId } from '../../models/map-type-id';\nimport { Marker } from '../../models/marker';\nimport { ClusterPlacementMode } from '../../models/cluster-placement-mode';\nimport { BingMapService } from './bing-map.service';\n\n/**\n * This class contains helperfunctions to map various interfaces used to represent options and structures into the\n * corresponding Bing Maps V8 specific implementations.\n *\n * @export\n */\nexport class BingConversions {\n\n    ///\n    /// Field declarations\n    ///\n\n    /**\n     * Map option attributes that are supported for conversion to Bing Map properties\n     *\n     * @memberof BingConversions\n     */\n    private static _mapOptionsAttributes: string[] = [\n        'backgroundColor',\n        'credentials',\n        'customizeOverlays',\n        'customMapStyle',\n        'disableBirdseye',\n        'disableKeyboardInput',\n        'disableMouseInput',\n        'disablePanning',\n        'disableTouchInput',\n        'disableUserInput',\n        'disableZooming',\n        'disableStreetside',\n        'enableClickableLogo',\n        'enableSearchLogo',\n        'fixedMapPosition',\n        'height',\n        'inertiaIntensity',\n        'navigationBarMode',\n        'showBreadcrumb',\n        'showCopyright',\n        'showDashboard',\n        'showMapTypeSelector',\n        'showScalebar',\n        'theme',\n        'tileBuffer',\n        'useInertia',\n        'width',\n        'center',\n        'zoom',\n        'mapTypeId',\n        'liteMode'\n    ];\n\n    /**\n     * View option attributes that are supported for conversion to Bing Map properties\n     *\n     * @memberof BingConversions\n     */\n    private static _viewOptionsAttributes: string[] = [\n        'animate',\n        'bounds',\n        'center',\n        'centerOffset',\n        'heading',\n        'labelOverlay',\n        'mapTypeId',\n        'padding',\n        'zoom'\n    ];\n\n    /**\n     * InfoWindow option attributes that are supported for conversion to Bing Map properties\n     *\n     * @memberof BingConversions\n     */\n    private static _infoWindowOptionsAttributes: string[] = [\n        'actions',\n        'description',\n        'htmlContent',\n        'id',\n        'position',\n        'pixelOffset',\n        'showCloseButton',\n        'showPointer',\n        'pushpin',\n        'title',\n        'titleClickHandler',\n        'typeName',\n        'visible',\n        'width',\n        'height'\n    ];\n\n    /**\n     * Marker option attributes that are supported for conversion to Bing Map properties\n     *\n     * @memberof BingConversions\n     */\n    private static _markerOptionsAttributes: string[] = [\n        'anchor',\n        'draggable',\n        'height',\n        'htmlContent',\n        'icon',\n        'infobox',\n        'state',\n        'title',\n        'textOffset',\n        'typeName',\n        'visible',\n        'width',\n        'zIndex'\n    ];\n\n    /**\n     * Polygon option attributes that are supported for conversion to Bing Map Polygon properties\n     *\n     * @memberof BingConversions\n     */\n    private static _polygonOptionsAttributes: string[] = [\n        'cursor',\n        'fillColor',\n        'fillOpacity',\n        'strokeColor',\n        'strokeOpacity',\n        'strokeWeight',\n        'visible'\n    ];\n\n    /**\n     * Polyline option attributes that are supported for conversion to Bing Map Polyline properties\n     *\n     * @memberof BingConversions\n     */\n    private static _polylineOptionsAttributes: string[] = [\n        'cursor',\n        'strokeColor',\n        'strokeOpacity',\n        'strokeWeight',\n        'visible'\n    ];\n\n    /**\n     * Cluster option attributes that are supported for conversion to Bing Map properties\n     *\n     * @memberof BingConversions\n     */\n    private static _clusterOptionsAttributes: string[] = [\n        'callback',\n        'clusteredPinCallback',\n        'clusteringEnabled',\n        'gridSize',\n        'layerOffset',\n        'placementMode',\n        'visible',\n        'zIndex'\n    ];\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Maps an IInfoWindowAction to a Microsoft.Maps.IInfoboxActions\n     *\n     * @param action - Object to be mapped.\n     * @returns - Navtive mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslateAction(action: IInfoWindowAction): Microsoft.Maps.IInfoboxActions {\n        const a: Microsoft.Maps.IInfoboxActions = {\n            eventHandler: action.eventHandler,\n            label: action.label\n        };\n        return a;\n    }\n\n    /**\n     * Maps an Array of IInfoWindowAction to an Array of Microsoft.Maps.IInfoboxActions\n     *\n     * @param actions - Array of objects to be mapped.\n     * @returns - Array of mapped objects.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslateActions(actions: Array<IInfoWindowAction>): Array<Microsoft.Maps.IInfoboxActions> {\n        const a: Array<Microsoft.Maps.IInfoboxActions> = new Array<Microsoft.Maps.IInfoboxActions>();\n        actions.forEach(x => a.push(BingConversions.TranslateAction(x)));\n        return a;\n    }\n\n    /**\n     * Maps an IBox object to a Microsoft.Maps.LocationRect object.\n     *\n     * @param box - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslateBounds(box: IBox): Microsoft.Maps.LocationRect {\n        const r: Microsoft.Maps.LocationRect =\n            Microsoft.Maps.LocationRect.fromEdges(box.maxLatitude, box.minLongitude, box.minLatitude, box.maxLongitude);\n        return r;\n    }\n\n    /**\n     * Maps an IClusterOptions object to a Microsoft.Maps.IClusterLayerOptions object.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslateClusterOptions(options: IClusterOptions): Microsoft.Maps.IClusterLayerOptions {\n        const o: Microsoft.Maps.IClusterLayerOptions | any = {};\n        Object.keys(options)\n            .filter(k => BingConversions._clusterOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'layerOffset') {\n                    o.layerOffset = BingConversions.TranslatePoint(options.layerOffset);\n                }\n                if (k === 'placementMode') {\n                    if (options.placementMode === ClusterPlacementMode.FirstPin) {\n                        o.placementMode = Microsoft.Maps.ClusterPlacementType.FirstLocation;\n                    }\n                    else {\n                        o.placementMode = Microsoft.Maps.ClusterPlacementType.MeanAverage;\n                    }\n                }\n                else {\n                    o[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n    /**\n     * Maps an IInfoWindowOptions object to a Microsoft.Maps.IInfoboxOptions object.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslateInfoBoxOptions(options: IInfoWindowOptions): Microsoft.Maps.IInfoboxOptions {\n        const o: Microsoft.Maps.IInfoboxOptions | any = {};\n        Object.keys(options)\n            .filter(k => BingConversions._infoWindowOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'pixelOffset') {\n                    o.offset = BingConversions.TranslatePoint(options.pixelOffset);\n                }\n                else if (k === 'position') {\n                    o.location = BingConversions.TranslateLocation(options.position);\n                }\n                else if (k === 'actions') {\n                    o.actions = BingConversions.TranslateActions(options.actions);\n                }\n                else {\n                    o[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n    /**\n     * Maps an IMapOptions object to a Microsoft.Maps.IMapLoadOptions object.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslateLoadOptions(options: IMapOptions): Microsoft.Maps.IMapLoadOptions {\n        const o: Microsoft.Maps.IMapLoadOptions | any = {};\n        Object.keys(options)\n            .filter(k => {\n                return BingConversions._mapOptionsAttributes.indexOf(k) !== -1 || BingConversions._viewOptionsAttributes.indexOf(k) !== -1;\n            })\n            .forEach((k) => {\n                if (k === 'center') {\n                    o.center = BingConversions.TranslateLocation(options.center);\n                }\n                else if (k === 'mapTypeId') {\n                    if (options.mapTypeId === MapTypeId.hybrid) {\n                        o.mapTypeId = Microsoft.Maps.MapTypeId.aerial;\n                        o.labelOverlay = Microsoft.Maps.LabelOverlay.visible;\n                    }\n                    else if (options.mapTypeId === MapTypeId.aerial) {\n                        o.mapTypeId = Microsoft.Maps.MapTypeId.aerial;\n                        o.labelOverlay = Microsoft.Maps.LabelOverlay.hidden;\n                    }\n                    else {\n                        o.mapTypeId = Microsoft.Maps.MapTypeId[(<any>MapTypeId)[options.mapTypeId]];\n                    }\n                }\n                else if (k === 'bounds') {\n                    o.bounds = BingConversions.TranslateBounds(options.bounds);\n                }\n                else {\n                    o[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n    /**\n     * Maps an ILatLong object to a Microsoft.Maps.Location object.\n     *\n     * @param latlong - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslateLocation(latlong: ILatLong): Microsoft.Maps.Location {\n        const l: Microsoft.Maps.Location = new Microsoft.Maps.Location(latlong.latitude, latlong.longitude);\n        return l;\n    }\n\n    /**\n     * Maps an IMarkerOptions object to a Microsoft.Maps.IPushpinOptions object.\n     *\n     * @param options - Object to be mapped.\n     * @returns - The mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslateMarkerOptions(options: IMarkerOptions): Microsoft.Maps.IPushpinOptions {\n        const o: Microsoft.Maps.IPushpinOptions = {};\n        Object.keys(options)\n            .filter(k => BingConversions._markerOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'anchor') {\n                    o.anchor = BingConversions.TranslatePoint(options.anchor);\n                }\n                else {\n                    (<any>o)[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n    /**\n     * Maps an IMapOptions object to a Microsoft.Maps.IMapOptions object.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslateOptions(options: IMapOptions): Microsoft.Maps.IMapOptions {\n        const o: Microsoft.Maps.IMapOptions | any = {};\n        Object.keys(options)\n            .filter(k => BingConversions._mapOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'center') {\n                    o.center = BingConversions.TranslateLocation(options.center);\n                }\n                else if (k === 'mapTypeId') {\n                    o.mapTypeId = Microsoft.Maps.MapTypeId[(<any>MapTypeId)[options.mapTypeId]];\n                }\n                else {\n                    o[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n    /**\n     * Translates an array of locations or an array or arrays of location to and array of arrays of Bing Map Locations\n     *\n     * @param paths - ILatLong based locations to convert.\n     * @returns - converted locations.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslatePaths(paths: Array<ILatLong> | Array<Array<ILatLong>>): Array<Array<Microsoft.Maps.Location>> {\n        const p: Array<Array<Microsoft.Maps.Location>> = new Array<Array<Microsoft.Maps.Location>>();\n        if (paths == null || !Array.isArray(paths) || paths.length === 0) {\n            p.push(new Array<Microsoft.Maps.Location>());\n        }\n        else if (Array.isArray(paths[0])) {\n            // parameter is an array or arrays\n            // us for loop for performance\n            const p1 = <Array<Array<ILatLong>>>paths;\n            for (let i = 0; i < p1.length; i++) {\n                const _p: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\n                for (let j = 0; j < p1[i].length; j++) {\n                    _p.push(new Microsoft.Maps.Location(p1[i][j].latitude, p1[i][j].longitude));\n                }\n                p.push(_p);\n            }\n        }\n        else {\n            // parameter is a simple array....\n            const y: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\n            const p1 = <Array<ILatLong>>paths;\n            for (let i = 0; i < p1.length; i++) {\n                y.push(new Microsoft.Maps.Location(p1[i].latitude, p1[i].longitude));\n            }\n            p.push(y);\n        }\n        return p;\n    }\n\n    /**\n     *  Maps an IPoint object to a Microsoft.Maps.Point object.\n     *\n     * @param point - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslatePoint(point: IPoint): Microsoft.Maps.Point {\n        const p: Microsoft.Maps.Point = new Microsoft.Maps.Point(point.x, point.y);\n        return p;\n    }\n\n    /**\n     *  Maps an IPolygonOptions object to a Microsoft.Maps.IPolygonOptions.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslatePolygonOptions(options: IPolygonOptions): Microsoft.Maps.IPolygonOptions {\n        const o: Microsoft.Maps.IPolygonOptions = {};\n        const f: (s: string, a: number) => string = (s, a) => {\n            const m = /rgba?\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*\\d+[\\.\\d+]*)*\\)/g.exec(s);\n            if (m && m.length > 3) {\n                a = a > 1 ? (a / 100) : a;\n                return 'rgba(' + [m[1], m[2], m[3], a].join(',') + ')';\n            }\n            else if (s[0] === '#') {\n                const x: number = a > 1 ? a : Math.floor(a * 255);\n                const z: string = s.substr(1);\n                const r: number = parseInt(z.substr(0, 2), 16);\n                const g: number = parseInt(z.substr(2, 2), 16);\n                const b: number = parseInt(z.substr(4, 2), 16);\n                return 'rgba(' + [r , g, b, a].join(',') + ')';\n            }\n            else {\n                return s;\n            }\n        };\n\n        Object.keys(options)\n            .filter(k => BingConversions._polygonOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'strokeWeight') {\n                    o.strokeThickness = options.strokeWeight;\n                }\n                else if (k === 'strokeColor') {\n                    if (options.strokeOpacity) {\n                        o.strokeColor = f(options.strokeColor, options.strokeOpacity);\n                    }\n                    else {\n                        o.strokeColor = options.strokeColor;\n                    }\n                }\n                else if (k === 'strokeOpacity') {}\n                else if (k === 'fillColor') {\n                    if (options.fillOpacity) {\n                        o.fillColor = f(options.fillColor, options.fillOpacity);\n                    }\n                    else {\n                        o.fillColor = options.fillColor;\n                    }\n                }\n                else if (k === 'fillOpacity') {}\n                else {\n                    (<any>o)[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n    /**\n     *  Maps an IPolylineOptions object to a Microsoft.Maps.IPolylineOptions.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslatePolylineOptions(options: IPolylineOptions): Microsoft.Maps.IPolylineOptions {\n        const o: Microsoft.Maps.IPolylineOptions | any = {};\n        const f: (s: string, a: number) => string = (s, a) => {\n            const m = /rgba?\\((\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*\\d+[\\.\\d+]*)*\\)/g.exec(s);\n            if (m && m.length > 3) {\n                a = a > 1 ? (a / 100) : a;\n                return 'rgba(' + [m[1], m[2], m[3], a].join(',') + ')';\n            }\n            else if (s[0] === '#') {\n                const x: number = a > 1 ? a : Math.floor(a * 255);\n                const z: string = s.substr(1);\n                const r: number = parseInt(z.substr(0, 2), 16);\n                const g: number = parseInt(z.substr(2, 2), 16);\n                const b: number = parseInt(z.substr(4, 2), 16);\n                return 'rgba(' + [r , g, b, a].join(',') + ')';\n            }\n            else {\n                return s;\n            }\n        };\n        Object.keys(options)\n            .filter(k => BingConversions._polylineOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'strokeWeight') {\n                    o.strokeThickness = options.strokeWeight;\n                } else if (k === 'strokeColor') {\n                    if (options.strokeOpacity) {\n                        o.strokeColor = f(options.strokeColor, options.strokeOpacity);\n                    }\n                    else {\n                        o.strokeColor = options.strokeColor;\n                    }\n                }\n                else if (k === 'strokeOpacity') {\n                }\n                else {\n                    o[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n    /**\n     * Maps an IMapOptions object to a Microsoft.Maps.IViewOptions object.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof BingConversions\n     */\n    public static TranslateViewOptions(options: IMapOptions): Microsoft.Maps.IViewOptions {\n        const o: Microsoft.Maps.IViewOptions | any = {};\n        Object.keys(options)\n            .filter(k => BingConversions._viewOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'center') {\n                    o.center = BingConversions.TranslateLocation(options.center);\n                } else if (k === 'bounds') {\n                    o.bounds = BingConversions.TranslateBounds(options.bounds);\n                } else if (k === 'centerOffset') {\n                    o.centerOffset = BingConversions.TranslatePoint(options.centerOffset);\n                } else if (k === 'mapTypeId') {\n                    o.mapTypeId = Microsoft.Maps.MapTypeId[(<any>MapTypeId)[options.mapTypeId]];\n                } else {\n                    o[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n}\n","import { ILatLong } from '../../interfaces/ilatlong';\nimport { IPoint } from '../../interfaces/ipoint';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { Marker } from '../marker';\nimport { BingMapService } from '../../services/bing/bing-map.service';\nimport { BingConversions } from '../../services/bing/bing-conversions';\n\n/**\n * Concrete implementation of the {@link Marker} contract for the Bing Maps V8 map architecture.\n *\n * @export\n */\nexport class BingMarker implements Marker {\n\n    ///\n    /// Field definitions\n    ///\n    private _metadata: Map<string, any> = new Map<string, any>();\n    private _isFirst = false;\n    private _isLast = true;\n\n    ///\n    /// Property definitions\n    ///\n\n    /**\n     * Indicates that the marker is the first marker in a set.\n     *\n     * @memberof Marker\n     */\n    public get IsFirst(): boolean { return this._isFirst; }\n    public set IsFirst(val: boolean) { this._isFirst = val; }\n\n    /**\n     * Indicates that the marker is the last marker in the set.\n     *\n     * @memberof Marker\n     */\n    public get IsLast(): boolean { return this._isLast; }\n    public set IsLast(val: boolean) { this._isLast = val; }\n\n    /**\n     * Gets the Location of the marker\n     *\n     * @readonly\n     * @memberof BingMarker\n     */\n    public get Location(): ILatLong {\n        const l: Microsoft.Maps.Location = this._pushpin.getLocation();\n        return {\n            latitude: l.latitude,\n            longitude: l.longitude\n        };\n    }\n\n    /**\n     * Gets the marker metadata.\n     *\n     * @readonly\n     * @memberof BingMarker\n     */\n    public get Metadata(): Map<string, any> { return this._metadata; }\n\n    /**\n     * Gets the native primitve implementing the marker, in this case {@link Microsoft.Maps.Pushpin}\n     *\n     * @readonly\n     * @memberof BingMarker\n     */\n    public get NativePrimitve(): any { return this._pushpin; }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of BingMarker.\n     * @param _pushpin - The {@link Microsoft.Maps.Pushpin} underlying the model.\n     * @param _map - The context map.\n     * @param _layer - The context layer.\n     *\n     * @memberof BingMarker\n     */\n    constructor(private _pushpin: Microsoft.Maps.Pushpin, protected _map: Microsoft.Maps.Map, protected _layer: Microsoft.Maps.Layer) { }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Adds an event listener to the marker.\n     *\n     * @abstract\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\n     * @param fn - Delegate invoked when the event occurs.\n     *\n     * @memberof BingMarker\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        Microsoft.Maps.Events.addHandler(this._pushpin, eventType, (e) => {\n            fn(e);\n        });\n    }\n\n    /**\n     * Deletes the marker.\n     *\n     * @abstract\n     *\n     * @memberof BingMarker\n     */\n    public DeleteMarker(): void {\n        if (!this._map && !this._layer) { return; }\n        if (this._layer) { this._layer.remove(this.NativePrimitve); }\n        else {\n            this._map.entities.remove(this.NativePrimitve);\n        }\n    }\n\n    /**\n     * Gets the marker label\n     *\n     * @abstract\n     *\n     * @memberof BingMarker\n     */\n    public GetLabel(): string {\n        return this._pushpin.getText();\n    }\n\n    /**\n     * Gets whether the marker is visible.\n     *\n     * @returns - True if the marker is visible, false otherwise.\n     *\n     * @memberof BingMarker\n     */\n    public GetVisible(): boolean {\n        return this._pushpin.getVisible();\n    }\n\n    /**\n     * Sets the anchor for the marker. Use this to adjust the root location for the marker to accomodate various marker image sizes.\n     *\n     * @abstract\n     * @param anchor - Point coordinates for the marker anchor.\n     *\n     * @memberof BingMarker\n     */\n    public SetAnchor(anchor: IPoint): void {\n        const o: Microsoft.Maps.IPushpinOptions = {};\n        o.anchor = new Microsoft.Maps.Point(anchor.x, anchor.y);\n        this._pushpin.setOptions(o);\n    }\n\n    /**\n     * Sets the draggability of a marker.\n     *\n     * @abstract\n     * @param draggable - True to mark the marker as draggable, false otherwise.\n     *\n     * @memberof BingMarker\n     */\n    public SetDraggable(draggable: boolean): void {\n        const o: Microsoft.Maps.IPushpinOptions = {};\n        o.draggable = draggable;\n        this._pushpin.setOptions(o);\n    }\n\n    /**\n     * Sets the icon for the marker.\n     *\n     * @abstract\n     * @param icon - String containing the icon in various forms (url, data url, etc.)\n     *\n     * @memberof BingMarker\n     */\n    public SetIcon(icon: string): void {\n        const o: Microsoft.Maps.IPushpinOptions = {};\n        o.icon = icon;\n        this._pushpin.setOptions(o);\n    }\n\n    /**\n     * Sets the marker label.\n     *\n     * @abstract\n     * @param label - String containing the label to set.\n     *\n     * @memberof BingMarker\n     */\n    public SetLabel(label: string): void {\n        const o: Microsoft.Maps.IPushpinOptions = {};\n        o.text = label;\n        this._pushpin.setOptions(o);\n    }\n\n    /**\n     * Sets the marker position.\n     *\n     * @abstract\n     * @param latLng - Geo coordinates to set the marker position to.\n     *\n     * @memberof BingMarker\n     */\n    public SetPosition(latLng: ILatLong): void {\n        const p: Microsoft.Maps.Location = BingConversions.TranslateLocation(latLng);\n        this._pushpin.setLocation(p);\n    }\n\n    /**\n     * Sets the marker title.\n     *\n     * @abstract\n     * @param title - String containing the title to set.\n     *\n     * @memberof BingMarker\n     */\n    public SetTitle(title: string): void {\n        const o: Microsoft.Maps.IPushpinOptions | any = {};\n        o.title = title;\n        this._pushpin.setOptions(o);\n    }\n\n    /**\n     * Sets the marker options.\n     *\n     * @abstract\n     * @param options - {@link IMarkerOptions} object containing the marker options to set. The supplied options are\n     * merged with the underlying marker options.\n     * @memberof Marker\n     */\n    public SetOptions(options: IMarkerOptions): void {\n        const o: Microsoft.Maps.IPushpinOptions =  BingConversions.TranslateMarkerOptions(options);\n        this._pushpin.setOptions(o);\n    }\n\n    /**\n     * Sets whether the marker is visible.\n     *\n     * @param visible - True to set the marker visible, false otherwise.\n     *\n     * @memberof Marker\n     */\n    public SetVisible(visible: boolean): void {\n        const o: Microsoft.Maps.IPushpinOptions | any = {};\n        o.visible = visible;\n        this._pushpin.setOptions(o);\n    }\n\n}\n","import { BingMarker } from './bing-marker';\nimport { SpiderClusterMarker } from '../spider-cluster-marker';\n\nexport class BingSpiderClusterMarker extends BingMarker implements SpiderClusterMarker {\n\n    /** The parent pushpin in which the spider pushpin is derived from. */\n    public ParentMarker: BingMarker;\n\n    /** The stick that connects the spider pushpin to the cluster. */\n    public Stick: Microsoft.Maps.Polyline;\n\n}\n","import { IClusterOptions } from '../../interfaces/icluster-options';\nimport { ISpiderClusterOptions } from '../../interfaces/ispider-cluster-options';\nimport { BingConversions } from '../../services/bing/bing-conversions';\nimport { BingMapService } from '../../services/bing/bing-map.service';\nimport { MapService } from '../../services/map.service';\nimport { Layer } from '../layer';\nimport { Marker } from '../marker';\nimport { InfoWindow } from '../info-window';\nimport { BingSpiderClusterMarker } from './bing-spider-cluster-marker';\nimport { BingMarker } from './bing-marker';\n\n/**\n * Concrete implementation of a clustering layer for the Bing Map Provider.\n *\n * @export\n */\nexport class BingClusterLayer implements Layer {\n\n    ///\n    /// Field declarations\n    ///\n    private _isClustering = true;\n    private _markers: Array<Marker> = new Array<Marker>();\n    private _markerLookup: Map<Microsoft.Maps.Pushpin, Marker> = new Map<Microsoft.Maps.Pushpin, Marker>();\n    private _pendingMarkers: Array<Marker> = new Array<Marker>();\n    private _spiderMarkers: Array<BingSpiderClusterMarker> = new Array<BingSpiderClusterMarker>();\n    private _spiderMarkerLookup: Map<Microsoft.Maps.Pushpin, BingSpiderClusterMarker> =\n                     new Map<Microsoft.Maps.Pushpin, BingSpiderClusterMarker>();\n    private _useSpiderCluster = false;\n    private _mapclicks = 0;\n    private _spiderLayer: Microsoft.Maps.Layer;\n    private _events: Array<Microsoft.Maps.IHandlerId> = new Array<Microsoft.Maps.IHandlerId>();\n    private _currentZoom = 0;\n    private _spiderOptions: ISpiderClusterOptions = {\n        circleSpiralSwitchover: 9,\n        collapseClusterOnMapChange: false,\n        collapseClusterOnNthClick: 1,\n        invokeClickOnHover: true,\n        minCircleLength: 60,\n        minSpiralAngleSeperation: 25,\n        spiralDistanceFactor: 5,\n        stickStyle: {\n            strokeColor: 'black',\n            strokeThickness: 2\n        },\n        stickHoverStyle: { strokeColor: 'red' },\n        markerSelected: null,\n        markerUnSelected: null\n    };\n    private _currentCluster: Microsoft.Maps.ClusterPushpin = null;\n\n    ///\n    /// Property definitions\n    ///\n\n    /**\n     * Get the native primitive underneath the abstraction layer.\n     *\n     * @returns Microsoft.Maps.ClusterLayer.\n     *\n     * @memberof BingClusterLayer\n     */\n    public get NativePrimitve(): any {\n        return this._layer;\n    }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates a new instance of the BingClusterLayer class.\n     *\n     * @param _layer Microsoft.Maps.ClusterLayer. Native Bing Cluster Layer supporting the cluster layer.\n     * @param _maps MapService. MapService implementation to leverage for the layer.\n     *\n     * @memberof BingClusterLayer\n     */\n    constructor(private _layer: Microsoft.Maps.ClusterLayer, private _maps: MapService) { }\n\n\n    ///\n    /// Public methods, Layer interface implementation\n    ///\n\n    /**\n     * Adds an event listener for the layer.\n     *\n     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native\n     * layer supports.\n     * @param fn function. Handler to call when the event occurs.\n     *\n     * @memberof BingClusterLayer\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        Microsoft.Maps.Events.addHandler(this._layer, eventType, (e) => {\n            fn(e);\n        });\n    }\n\n    /**\n     * Adds an entity to the layer. Use this method with caution as it will\n     * trigger a recaluation of the clusters (and associated markers if approprite) for\n     * each invocation. If you use this method to add many markers to the cluster, use\n     *\n     * @param entity Marker. Entity to add to the layer.\n     *\n     * @memberof BingClusterLayer\n     */\n    public AddEntity(entity: Marker): void {\n        let isMarker: boolean = entity instanceof Marker;\n        isMarker = entity instanceof BingMarker || isMarker;\n        if (isMarker) {\n            if (entity.IsFirst) {\n                this.StopClustering();\n            }\n        }\n        if (entity.NativePrimitve && entity.Location) {\n            if (this._isClustering) {\n                const p: Array<Microsoft.Maps.Pushpin> = this._layer.getPushpins();\n                p.push(entity.NativePrimitve);\n                this._layer.setPushpins(p);\n                this._markers.push(entity);\n            }\n            else {\n                this._pendingMarkers.push(entity);\n            }\n            this._markerLookup.set(entity.NativePrimitve, entity);\n        }\n        if (isMarker) {\n            if (entity.IsLast) {\n                this.StartClustering();\n            }\n        }\n    }\n\n    /**\n     * Adds a number of markers to the layer.\n     *\n     * @param entities Array<Marker>. Entities to add to the layer.\n     *\n     * @memberof BingClusterLayer\n     */\n    public AddEntities(entities: Array<Marker>): void {\n        if (entities != null && Array.isArray(entities) && entities.length !== 0 ) {\n            const e: Array<Microsoft.Maps.Pushpin> = entities.map(p => {\n                this._markerLookup.set(p.NativePrimitve, p);\n                return p.NativePrimitve;\n            });\n            if (this._isClustering) {\n                const p: Array<Microsoft.Maps.Pushpin> = this._layer.getPushpins();\n                p.push(...e);\n                this._layer.setPushpins(p);\n                this._markers.push(...entities);\n            }\n            else {\n                this._pendingMarkers.push(...entities);\n            }\n        }\n    }\n\n    /**\n     * Initializes spider behavior for the clusering layer (when a cluster maker is clicked, it explodes into a spider of the\n     * individual underlying pins.\n     *\n     * @param options ISpiderClusterOptions. Optional. Options governing the behavior of the spider.\n     *\n     * @memberof BingClusterLayer\n     */\n    public InitializeSpiderClusterSupport(options?: ISpiderClusterOptions): void {\n        if (this._useSpiderCluster) { return; }\n        const m: Microsoft.Maps.Map = (<BingMapService>this._maps).MapInstance;\n        this._useSpiderCluster = true;\n        this._spiderLayer = new Microsoft.Maps.Layer();\n        this._currentZoom = m.getZoom();\n        this.SetSpiderOptions(options);\n        m.layers.insert(this._spiderLayer);\n\n        ///\n        /// Add spider related events....\n        ///\n        this._events.push(Microsoft.Maps.Events.addHandler(m, 'click', e => this.OnMapClick(e)));\n        this._events.push(Microsoft.Maps.Events.addHandler(m, 'viewchangestart', e => this.OnMapViewChangeStart(e)));\n        this._events.push(Microsoft.Maps.Events.addHandler(m, 'viewchangeend', e => this.OnMapViewChangeEnd(e)));\n        this._events.push(Microsoft.Maps.Events.addHandler(this._layer, 'click', e => this.OnLayerClick(e)));\n        this._events.push(Microsoft.Maps.Events.addHandler(this._spiderLayer, 'click', e => this.OnLayerClick(e)));\n        this._events.push(Microsoft.Maps.Events.addHandler(this._spiderLayer, 'mouseover', e => this.OnSpiderMouseOver(e)));\n        this._events.push(Microsoft.Maps.Events.addHandler(this._spiderLayer, 'mouseout', e => this.OnSpiderMouseOut(e)));\n    }\n\n    /**\n     * Deletes the clustering layer.\n     *\n     * @memberof BingClusterLayer\n     */\n    public Delete(): void {\n        if (this._useSpiderCluster) {\n            this._spiderLayer.clear();\n            (<BingMapService>this._maps).MapPromise.then(m => {\n                m.layers.remove(this._spiderLayer);\n                this._spiderLayer = null;\n            });\n            this._events.forEach(e => Microsoft.Maps.Events.removeHandler(e));\n            this._events.splice(0);\n            this._useSpiderCluster = false;\n        }\n        this._markers.splice(0);\n        this._spiderMarkers.splice(0);\n        this._pendingMarkers.splice(0);\n        this._markerLookup.clear();\n        this._maps.DeleteLayer(this);\n    }\n\n    /**\n     * Returns the abstract marker used to wrap the Bing Pushpin.\n     *\n     * @returns Marker. The abstract marker object representing the pushpin.\n     *\n     * @memberof BingClusterLayer\n     */\n    public GetMarkerFromBingMarker(pin: Microsoft.Maps.Pushpin): Marker {\n        const m: Marker = this._markerLookup.get(pin);\n        return m;\n    }\n\n    /**\n     * Returns the options governing the behavior of the layer.\n     *\n     * @returns IClusterOptions. The layer options.\n     *\n     * @memberof BingClusterLayer\n     */\n    public GetOptions(): IClusterOptions {\n        const o: Microsoft.Maps.IClusterLayerOptions = this._layer.getOptions();\n        const options: IClusterOptions = {\n            id: 0,\n            gridSize: o.gridSize,\n            layerOffset: o.layerOffset,\n            clusteringEnabled: o.clusteringEnabled,\n            callback: o.callback,\n            clusteredPinCallback: o.clusteredPinCallback,\n            visible: o.visible,\n            zIndex: o.zIndex\n        };\n        return options;\n    }\n\n    /**\n     * Returns the visibility state of the layer.\n     *\n     * @returns Boolean. True is the layer is visible, false otherwise.\n     *\n     * @memberof BingClusterLayer\n     */\n    public GetVisible(): boolean {\n        return this._layer.getOptions().visible;\n    }\n\n    /**\n     * Returns the abstract marker used to wrap the Bing Pushpin.\n     *\n     * @returns - The abstract marker object representing the pushpin.\n     *\n     * @memberof BingClusterLayer\n     */\n    public GetSpiderMarkerFromBingMarker(pin: Microsoft.Maps.Pushpin): BingSpiderClusterMarker {\n        const m: BingSpiderClusterMarker = this._spiderMarkerLookup.get(pin);\n        return m;\n    }\n\n    /**\n     * Removes an entity from the cluster layer.\n     *\n     * @param entity Marker - Entity to be removed from the layer.\n     *\n     * @memberof BingClusterLayer\n     */\n    public RemoveEntity(entity: Marker): void {\n        if (entity.NativePrimitve && entity.Location) {\n            const j: number = this._markers.indexOf(entity);\n            const k: number = this._pendingMarkers.indexOf(entity);\n            if (j > -1) { this._markers.splice(j, 1); }\n            if (k > -1) { this._pendingMarkers.splice(k, 1); }\n            if (this._isClustering) {\n                const p: Array<Microsoft.Maps.Pushpin> = this._layer.getPushpins();\n                const i: number = p.indexOf(entity.NativePrimitve);\n                if (i > -1) {\n                    p.splice(i, 1);\n                    this._layer.setPushpins(p);\n                }\n            }\n            this._markerLookup.delete(entity.NativePrimitve);\n        }\n    }\n\n    /**\n     * Sets the entities for the cluster layer.\n     *\n     * @param entities Array<Marker> containing\n     * the entities to add to the cluster. This replaces any existing entities.\n     *\n     * @memberof BingClusterLayer\n     */\n    public SetEntities(entities: Array<Marker>): void {\n        const p: Array<Microsoft.Maps.Pushpin> = new Array<Microsoft.Maps.Pushpin>();\n        this._markers.splice(0);\n        this._markerLookup.clear();\n        entities.forEach((e: any) => {\n            if (e.NativePrimitve && e.Location) {\n                this._markers.push(e);\n                this._markerLookup.set(e.NativePrimitve, e);\n                p.push(<Microsoft.Maps.Pushpin>e.NativePrimitve);\n            }\n        });\n        this._layer.setPushpins(p);\n    }\n\n    /**\n     * Sets the options for the cluster layer.\n     *\n     * @param options IClusterOptions containing the options enumeration controlling the layer behavior. The supplied options\n     * are merged with the default/existing options.\n     *\n     * @memberof BingClusterLayer\n     */\n    public SetOptions(options: IClusterOptions): void {\n        const o: Microsoft.Maps.IClusterLayerOptions = BingConversions.TranslateClusterOptions(options);\n        this._layer.setOptions(o);\n        if (options.spiderClusterOptions) { this.SetSpiderOptions(options.spiderClusterOptions); }\n    }\n\n    /**\n     * Toggles the cluster layer visibility.\n     *\n     * @param visible Boolean true to make the layer visible, false to hide the layer.\n     *\n     * @memberof BingClusterLayer\n     */\n    public SetVisible(visible: boolean): void {\n        const o: Microsoft.Maps.IClusterLayerOptions = this._layer.getOptions();\n        o.visible = visible;\n        this._layer.setOptions(o);\n    }\n\n    /**\n     * Start to actually cluster the entities in a cluster layer. This method should be called after the initial set of entities\n     * have been added to the cluster. This method is used for performance reasons as adding an entitiy will recalculate all clusters.\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\n     * complete to recalculate the clusters.\n     *\n     * @memberof BingClusterLayer\n     */\n    public StartClustering(): void {\n        if (this._isClustering) { return; }\n\n        const p: Array<Microsoft.Maps.Pushpin> = new Array<Microsoft.Maps.Pushpin>();\n        this._markers.forEach(e => {\n            if (e.NativePrimitve && e.Location) {\n                p.push(<Microsoft.Maps.Pushpin>e.NativePrimitve);\n            }\n        });\n        this._pendingMarkers.forEach(e => {\n            if (e.NativePrimitve && e.Location) {\n                p.push(<Microsoft.Maps.Pushpin>e.NativePrimitve);\n            }\n        });\n        this._layer.setPushpins(p);\n        this._markers = this._markers.concat(this._pendingMarkers.splice(0));\n        this._isClustering = true;\n    }\n\n    /**\n     * Stop to actually cluster the entities in a cluster layer.\n     * This method is used for performance reasons as adding an entitiy will recalculate all clusters.\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\n     * complete to recalculate the clusters.\n     *\n     * @memberof BingClusterLayer\n     */\n    public StopClustering() {\n        if (!this._isClustering) { return; }\n        this._isClustering = false;\n    }\n\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Creates a copy of a pushpins basic options.\n     *\n     * @param pin Pushpin to copy options from.\n     * @returns - A copy of a pushpins basic options.\n     *\n     * @memberof BingClusterLayer\n     */\n    private GetBasicPushpinOptions(pin: Microsoft.Maps.Pushpin): Microsoft.Maps.IPushpinOptions {\n        return <Microsoft.Maps.IPushpinOptions>{\n            anchor: pin.getAnchor(),\n            color: pin.getColor(),\n            cursor: pin.getCursor(),\n            icon: pin.getIcon(),\n            roundClickableArea: pin.getRoundClickableArea(),\n            subTitle: pin.getSubTitle(),\n            text: pin.getText(),\n            textOffset: pin.getTextOffset(),\n            title: pin.getTitle()\n        };\n    }\n\n    /**\n     * Hides the spider cluster and resotres the original pin.\n     *\n     * @memberof BingClusterLayer\n     */\n    private HideSpiderCluster(): void {\n        this._mapclicks = 0;\n        if (this._currentCluster) {\n            this._spiderLayer.clear();\n            this._spiderMarkers.splice(0);\n            this._spiderMarkerLookup.clear();\n            this._currentCluster = null;\n            this._mapclicks = -1;\n            if (this._spiderOptions.markerUnSelected) { this._spiderOptions.markerUnSelected(); }\n        }\n    }\n\n    /**\n     * Click event handler for when a shape in the cluster layer is clicked.\n     *\n     * @param e The mouse event argurment from the click event.\n     *\n     * @memberof BingClusterLayer\n     */\n    private OnLayerClick(e: Microsoft.Maps.IMouseEventArgs): void {\n        if (e.primitive instanceof Microsoft.Maps.ClusterPushpin) {\n            const cp: Microsoft.Maps.ClusterPushpin = <Microsoft.Maps.ClusterPushpin>e.primitive;\n            const showNewCluster: boolean = cp !== this._currentCluster;\n            this.HideSpiderCluster();\n            if (showNewCluster) {\n                this.ShowSpiderCluster(<Microsoft.Maps.ClusterPushpin>e.primitive);\n            }\n        } else {\n            const pin: Microsoft.Maps.Pushpin = <Microsoft.Maps.Pushpin>e.primitive;\n            if (pin.metadata && pin.metadata.isClusterMarker) {\n                const m: BingSpiderClusterMarker = this.GetSpiderMarkerFromBingMarker(pin);\n                const p: BingMarker = m.ParentMarker;\n                const ppin: Microsoft.Maps.Pushpin = p.NativePrimitve;\n                if (this._spiderOptions.markerSelected) {\n                    this._spiderOptions.markerSelected(p, new BingMarker(this._currentCluster, null, null));\n                }\n                if (Microsoft.Maps.Events.hasHandler(ppin, 'click')) { Microsoft.Maps.Events.invoke(ppin, 'click', e); }\n                this._mapclicks = 0;\n            } else {\n                if (this._spiderOptions.markerSelected) { this._spiderOptions.markerSelected(this.GetMarkerFromBingMarker(pin), null); }\n                if (Microsoft.Maps.Events.hasHandler(pin, 'click')) { Microsoft.Maps.Events.invoke(pin, 'click', e); }\n            }\n        }\n    }\n\n    /**\n     * Delegate handling the click event on the map (outside a spider cluster). Depending on the\n     * spider options, closes the cluster or increments the click counter.\n     *\n     * @param e - Mouse event\n     *\n     * @memberof BingClusterLayer\n     */\n    private OnMapClick(e: Microsoft.Maps.IMouseEventArgs | Microsoft.Maps.IMapTypeChangeEventArgs): void {\n        if (this._mapclicks === -1) {\n            return;\n        } else if (++this._mapclicks >= this._spiderOptions.collapseClusterOnNthClick) {\n            this.HideSpiderCluster();\n        } else {\n            // do nothing as this._mapclicks has already been incremented above\n        }\n    }\n\n    /**\n     * Delegate handling the map view changed end event. Hides the spider cluster if the zoom level has changed.\n     *\n     * @param e - Mouse event.\n     *\n     * @memberof BingClusterLayer\n     */\n    private OnMapViewChangeEnd(e: Microsoft.Maps.IMouseEventArgs | Microsoft.Maps.IMapTypeChangeEventArgs): void {\n        const z: number = (<Microsoft.Maps.Map>e.target).getZoom();\n        const hasZoomChanged: boolean = (z !== this._currentZoom);\n        this._currentZoom = z;\n        if (hasZoomChanged) {\n            this.HideSpiderCluster();\n        }\n    }\n\n    /**\n     * Delegate handling the map view change start event. Depending on the spider options, hides the\n     * the exploded spider or does nothing.\n     *\n     * @param e - Mouse event.\n     *\n     * @memberof BingClusterLayer\n     */\n    private OnMapViewChangeStart(e: Microsoft.Maps.IMouseEventArgs | Microsoft.Maps.IMapTypeChangeEventArgs): void {\n        if (this._spiderOptions.collapseClusterOnMapChange) {\n            this.HideSpiderCluster();\n        }\n    }\n\n    /**\n     * Delegate invoked on mouse out on an exploded spider marker. Resets the hover style on the stick.\n     *\n     * @param e - Mouse event.\n     */\n    private OnSpiderMouseOut(e: Microsoft.Maps.IMouseEventArgs): void {\n        const pin: Microsoft.Maps.Pushpin = <Microsoft.Maps.Pushpin>e.primitive;\n        if (pin instanceof Microsoft.Maps.Pushpin && pin.metadata && pin.metadata.isClusterMarker) {\n            const m: BingSpiderClusterMarker = this.GetSpiderMarkerFromBingMarker(pin);\n            m.Stick.setOptions(this._spiderOptions.stickStyle);\n        }\n    }\n\n    /**\n     * Invoked on mouse over on an exploded spider marker. Sets the hover style on the stick. Also invokes the click event\n     * on the underlying original marker dependent on the spider options.\n     *\n     * @param e - Mouse event.\n     */\n    private OnSpiderMouseOver(e: Microsoft.Maps.IMouseEventArgs): void {\n        const pin: Microsoft.Maps.Pushpin = <Microsoft.Maps.Pushpin>e.primitive;\n        if (pin instanceof Microsoft.Maps.Pushpin && pin.metadata && pin.metadata.isClusterMarker) {\n            const m: BingSpiderClusterMarker = this.GetSpiderMarkerFromBingMarker(pin);\n            m.Stick.setOptions(this._spiderOptions.stickHoverStyle);\n            if (this._spiderOptions.invokeClickOnHover) {\n                const p: BingMarker = m.ParentMarker;\n                const ppin: Microsoft.Maps.Pushpin = p.NativePrimitve;\n                if (Microsoft.Maps.Events.hasHandler(ppin, 'click')) { Microsoft.Maps.Events.invoke(ppin, 'click', e); }\n            }\n        }\n    }\n\n    /**\n     * Sets the options for spider behavior.\n     *\n     * @param options ISpiderClusterOptions containing the options enumeration controlling the spider cluster behavior. The supplied options\n     * are merged with the default/existing options.\n     *\n     * @memberof BingClusterLayer\n     */\n    private SetSpiderOptions(options: ISpiderClusterOptions): void {\n        if (options) {\n            if (typeof options.circleSpiralSwitchover === 'number') {\n                this._spiderOptions.circleSpiralSwitchover = options.circleSpiralSwitchover;\n            }\n            if (typeof options.collapseClusterOnMapChange === 'boolean') {\n                this._spiderOptions.collapseClusterOnMapChange = options.collapseClusterOnMapChange;\n            }\n            if (typeof options.collapseClusterOnNthClick === 'number') {\n                this._spiderOptions.collapseClusterOnNthClick = options.collapseClusterOnNthClick;\n            }\n            if (typeof options.invokeClickOnHover === 'boolean') {\n                this._spiderOptions.invokeClickOnHover = options.invokeClickOnHover;\n            }\n            if (typeof options.minSpiralAngleSeperation === 'number') {\n                this._spiderOptions.minSpiralAngleSeperation = options.minSpiralAngleSeperation;\n            }\n            if (typeof options.spiralDistanceFactor === 'number') {\n                this._spiderOptions.spiralDistanceFactor = options.spiralDistanceFactor;\n            }\n            if (typeof options.minCircleLength === 'number') {\n                this._spiderOptions.minCircleLength = options.minCircleLength;\n            }\n            if (options.stickHoverStyle) {\n                this._spiderOptions.stickHoverStyle = options.stickHoverStyle;\n            }\n            if (options.stickStyle) {\n                this._spiderOptions.stickStyle = options.stickStyle;\n            }\n            if (options.markerSelected) {\n                this._spiderOptions.markerSelected = options.markerSelected;\n            }\n            if (options.markerUnSelected) {\n                this._spiderOptions.markerUnSelected = options.markerUnSelected;\n            }\n            if (typeof options.visible === 'boolean') {\n                this._spiderOptions.visible = options.visible;\n            }\n            this.SetOptions(<IClusterOptions>options);\n        }\n    }\n\n    /**\n     * Expands a cluster into it's open spider layout.\n     *\n     * @param cluster The cluster to show in it's open spider layout..\n     *\n     * @memberof BingClusterLayer\n     */\n    private ShowSpiderCluster(cluster: Microsoft.Maps.ClusterPushpin): void {\n        this.HideSpiderCluster();\n        this._currentCluster = cluster;\n\n        if (cluster && cluster.containedPushpins) {\n            // Create spider data.\n            const m: Microsoft.Maps.Map = (<BingMapService>this._maps).MapInstance;\n            const pins: Array<Microsoft.Maps.Pushpin> = cluster.containedPushpins;\n            const center: Microsoft.Maps.Location = cluster.getLocation();\n            const centerPoint: Microsoft.Maps.Point =\n                <Microsoft.Maps.Point>m.tryLocationToPixel(center, Microsoft.Maps.PixelReference.control);\n            let stick: Microsoft.Maps.Polyline;\n            let angle = 0;\n            const makeSpiral: boolean = pins.length > this._spiderOptions.circleSpiralSwitchover;\n            let legPixelLength: number;\n            let stepAngle: number;\n            let stepLength: number;\n\n            if (makeSpiral) {\n                legPixelLength = this._spiderOptions.minCircleLength / Math.PI;\n                stepLength = 2 * Math.PI * this._spiderOptions.spiralDistanceFactor;\n            }\n            else {\n                stepAngle = 2 * Math.PI / pins.length;\n                legPixelLength = (this._spiderOptions.spiralDistanceFactor / stepAngle / Math.PI / 2) * pins.length;\n                if (legPixelLength < this._spiderOptions.minCircleLength) { legPixelLength = this._spiderOptions.minCircleLength; }\n            }\n\n            for (let i = 0, len = pins.length; i < len; i++) {\n                // Calculate spider pin location.\n                if (!makeSpiral) {\n                    angle = stepAngle * i;\n                }\n                else {\n                    angle += this._spiderOptions.minSpiralAngleSeperation / legPixelLength + i * 0.0005;\n                    legPixelLength += stepLength / angle;\n                }\n                const point: Microsoft.Maps.Point =\n                    new Microsoft.Maps.Point(centerPoint.x + legPixelLength * Math.cos(angle),\n                        centerPoint.y + legPixelLength * Math.sin(angle));\n                const loc: Microsoft.Maps.Location =\n                    <Microsoft.Maps.Location>m.tryPixelToLocation(point, Microsoft.Maps.PixelReference.control);\n\n                // Create stick to pin.\n                stick = new Microsoft.Maps.Polyline([center, loc], this._spiderOptions.stickStyle);\n                this._spiderLayer.add(stick);\n\n                // Create pin in spiral that contains same metadata as parent pin.\n                const pin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(loc);\n                pin.metadata = pins[i].metadata || {};\n                pin.metadata.isClusterMarker = true;\n                pin.setOptions(this.GetBasicPushpinOptions(pins[i]));\n                this._spiderLayer.add(pin);\n\n                const spiderMarker: BingSpiderClusterMarker = new BingSpiderClusterMarker(pin, null, this._spiderLayer);\n                spiderMarker.Stick = stick;\n                spiderMarker.ParentMarker = <BingMarker>this.GetMarkerFromBingMarker(pins[i]);\n                this._spiderMarkers.push(spiderMarker);\n                this._spiderMarkerLookup.set(pin, spiderMarker);\n\n            }\n            this._mapclicks = 0;\n        }\n    }\n\n}\n","import { ILatLong } from '../../interfaces/ilatlong';\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\nimport { InfoWindow } from '../info-window';\nimport { BingMapService } from '../../services/bing/bing-map.service';\nimport { BingConversions } from '../../services/bing/bing-conversions';\n\n/**\n * Concrete implementation of the {@link InfoWindow} contract for the Bing Maps V8 map architecture.\n *\n * @export\n */\nexport class BingInfoWindow implements InfoWindow {\n\n    private _isOpen: boolean;\n\n    /**\n     * Gets whether the info box is currently open.\n     *\n     * @readonly\n     * @memberof BingInfoWindow\n     */\n    public get IsOpen(): boolean {\n        if (this._infoBox && this._infoBox.getOptions().visible === true) { return true; }\n        return false;\n    }\n\n    /**\n     * Gets native primitve underlying the model.\n     *\n     * @memberof BingInfoWindow\n     * @property\n     * @readonly\n     */\n    public get NativePrimitve(): Microsoft.Maps.Infobox {\n        return this._infoBox;\n    }\n\n    /**\n     * Creates an instance of BingInfoWindow.\n     * @param _infoBox - A {@link Microsoft.Maps.Infobox} instance underlying the model\n     * @memberof BingInfoWindow\n     */\n    constructor(private _infoBox: Microsoft.Maps.Infobox) {\n        this._isOpen = false;\n    }\n\n    /**\n     * Adds an event listener to the InfoWindow.\n     *\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\n     * @param fn - Delegate invoked when the event occurs.\n     *\n     * @memberof BingInfoWindow\n     * @method\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        Microsoft.Maps.Events.addHandler(this._infoBox, eventType, (e) => {\n            if (e.eventName === 'infoboxChanged') {\n                if (this._infoBox.getOptions().visible === true) { this._isOpen = true; }\n                else {\n                    if (this._infoBox.getOptions().visible === false && this._isOpen === true) {\n                        this._isOpen = false;\n                        fn(e);\n                    }\n                }\n            }\n            else {\n                fn(e);\n            }\n        });\n    }\n\n    /**\n     * Closes the info window.\n     *\n     * @memberof BingInfoWindow\n     * @method\n     */\n    public Close(): void {\n        const o: Microsoft.Maps.IInfoboxOptions = {};\n        o.visible = false;\n        this._infoBox.setOptions(o);\n    }\n\n    /**\n     * Gets the position of the info window.\n     *\n     * @returns - Returns the geo coordinates of the info window.\n     * @memberof BingInfoWindow\n     * @method\n     */\n    public GetPosition(): ILatLong {\n        const p: ILatLong = {\n            latitude: this._infoBox.getLocation().latitude,\n            longitude: this._infoBox.getLocation().longitude\n        };\n        return p;\n    }\n\n    /**\n     * Opens the info window.\n     *\n     * @memberof BingInfoWindow\n     * @method\n     */\n    public Open(): void {\n        const o: Microsoft.Maps.IInfoboxOptions = {};\n        o.visible = true;\n        this._infoBox.setOptions(o);\n    }\n\n    /**\n     * Sets the info window options.\n     *\n     * @param options - Info window options to set. The options will be merged with any existing options.\n     *\n     * @memberof BingInfoWindow\n     * @method\n     */\n    public SetOptions(options: IInfoWindowOptions): void {\n        const o: Microsoft.Maps.IInfoboxOptions = BingConversions.TranslateInfoBoxOptions(options);\n        this._infoBox.setOptions(o);\n    }\n\n    /**\n     * Sets the info window position.\n     *\n     * @param position - Geo coordinates to move the anchor of the info window to.\n     *\n     * @memberof BingInfoWindow\n     * @method\n     */\n    public SetPosition(position: ILatLong): void {\n        const l: Microsoft.Maps.Location = BingConversions.TranslateLocation(position);\n        this._infoBox.setLocation(l);\n    }\n}\n","import { ILabelOptions } from '../interfaces/ilabel-options';\n\n/**\n * Abstract base implementing a label to be placed on the map.\n *\n * @export\n * @abstract\n */\nexport abstract class MapLabel {\n// export class MapLabel extends Microsoft.Maps.CustomOverlay {\n    ///\n    /// Field declarations\n    ///\n    protected _canvas: HTMLCanvasElement;\n\n    /**\n     * Returns the default label style for the platform\n     *\n     * @readonly\n     * @abstract\n     * @memberof MapLabel\n     */\n    public abstract get DefaultLabelStyle(): ILabelOptions;\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates a new MapLabel\n     * @param options Optional properties to set.\n     */\n    constructor(options: { [key: string]: any }) {\n        this.Set('fontFamily', 'sans-serif');\n        this.Set('fontSize', 12);\n        this.Set('fontColor', '#ffffff');\n        this.Set('strokeWeight', 4);\n        this.Set('strokeColor', '#000000');\n        this.Set('align', 'center');\n        this.SetValues(options);\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Deletes the label from the map. This method does not atually delete the label itself, so\n     * it can be readded to map later.\n     * @memberof MapLabel\n     * @method\n     */\n    public Delete(): void {\n        this.SetMap(null);\n    }\n\n    /**\n     * Delegate called when underlying properties change.\n     *\n     * @param prop - The property or properties that have changed.\n     * @memberof MapLabel\n     * @method\n     */\n    public Changed(prop: string | Array<string>): void {\n        let shouldRunDrawCanvas = false;\n        let shouldRunDraw = false;\n        if (!Array.isArray(prop)) { prop = [prop]; }\n        prop.forEach(p => {\n            switch (p) {\n                case 'fontFamily':\n                case 'fontSize':\n                case 'fontColor':\n                case 'strokeWeight':\n                case 'strokeColor':\n                case 'align':\n                case 'text':\n                    shouldRunDrawCanvas = true;\n                    break;\n                case 'maxZoom':\n                case 'minZoom':\n                case 'offset':\n                case 'hidden':\n                case 'position':\n                    shouldRunDraw = true;\n                    break;\n            }\n        });\n        if (shouldRunDrawCanvas) { this.DrawCanvas(); }\n        if (shouldRunDraw) { this.Draw(); }\n    }\n\n    /**\n     * Gets the value of a setting.\n     *\n     * @param key - Key specifying the setting.\n     * @returns - The value of the setting.\n     * @memberof MapLabel\n     * @abstract\n     * @method\n     */\n    public abstract Get(key: string): any;\n\n    /**\n     * Gets the map associted with the label.\n     *\n     * @returns - A native map object for the underlying implementation. Implementing derivatives should return the\n     * actual native object.\n     * @memberof MapLabel\n     * @method\n     * @abstract\n     */\n    public abstract GetMap(): any;\n\n    /**\n     * Set the value for a setting.\n     *\n     * @param key - Key specifying the setting.\n     * @param val - The value to set.\n     * @memberof MapLabel\n     * @abstract\n     * @method\n     */\n    public abstract Set(key: string, val: any): void;\n\n    /**\n     * Sets the map for the label. Settings this to null remove the label from hte map.\n     *\n     * @param map - A native map object for the underlying implementation. Implementing derivatives should return the\n     * actual native object.\n     * @memberof MapLabel\n     * @method\n     */\n    public abstract SetMap(map: any): void;\n\n    /**\n     * Applies settings to the object\n     *\n     * @param options - An object containing the settings key value pairs.\n     * @memberof MapLabel\n     * @abstract\n     * @method\n     */\n    public abstract SetValues(options: { [key: string]: any }): void;\n\n    ///\n    /// Protected methods\n    ///\n\n    /**\n     * Get the visibility of the label. Visibility depends on Zoom settings.\n     * @returns - blank string if visible, 'hidden' if invisible.\n     * @protected\n     */\n    protected GetVisible() {\n        const minZoom: number = this.Get('minZoom');\n        const maxZoom: number = this.Get('maxZoom');\n        const hidden: boolean = this.Get('hidden');\n\n        if (hidden) {return 'hidden'; }\n        if (minZoom === undefined && maxZoom === undefined) { return ''; }\n        if (!this.GetMap()) { return ''; }\n\n        const mapZoom: number = this.GetMap().getZoom();\n        if (mapZoom < minZoom || mapZoom > maxZoom) { return 'hidden'; }\n        return '';\n    }\n\n    /**\n     * Draws the label on the map.\n     * @memberof MapLabel\n     * @method\n     * @protected\n     */\n    protected abstract Draw(): void;\n\n    /**\n     * Draws the label to the canvas 2d context.\n     * @memberof MapLabel\n     * @method\n     * @protected\n     */\n    protected DrawCanvas () {\n        if (!this._canvas) { return; }\n\n        const style: CSSStyleDeclaration = this._canvas.style;\n        style.zIndex = this.Get('zIndex');\n\n        const ctx: CanvasRenderingContext2D = this._canvas.getContext('2d');\n        ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n        ctx.strokeStyle = this.Get('strokeColor');\n        ctx.font = this.Get('fontSize') + 'px ' + this.Get('fontFamily');\n\n        const backgroundColor: string = this.Get('backgroundColor');\n        const strokeWeight: number = Number(this.Get('strokeWeight'));\n        const text: string = this.Get('text');\n        const textMeasure: TextMetrics = ctx.measureText(text);\n        const textWidth: number = textMeasure.width;\n        if (text && strokeWeight && strokeWeight > 0) {\n                ctx.lineWidth = strokeWeight;\n                ctx.strokeText(text, 4, 4);\n        }\n        if (backgroundColor && backgroundColor !== '') {\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(0, 0, textWidth + 8, (parseInt(ctx.font, 10) * 2) - 2);\n        }\n        ctx.fillStyle = this.Get('fontColor');\n        ctx.fillText(text, 4, 4);\n\n        style.marginLeft = this.GetMarginLeft(textWidth) + 'px';\n        style.marginTop = '-0.4em';\n        style.pointerEvents = 'none';\n            // Bring actual text top in line with desired latitude.\n            // Cheaper than calculating height of text.\n    }\n\n    /**\n     * Gets the appropriate margin-left for the canvas.\n     * @param textWidth  - The width of the text, in pixels.\n     * @returns - The margin-left, in pixels.\n     * @protected\n     * @method\n     * @memberof MapLabel\n     */\n    protected GetMarginLeft(textWidth: number): number {\n        switch (this.Get('align')) {\n            case 'left':    return 0;\n            case 'right':   return -textWidth;\n        }\n        return textWidth / -2;\n    }\n\n    /**\n     * Delegate called when the label is added to the map. Generates and configures\n     * the canvas.\n     *\n     * @memberof MapLabel\n     * @method\n     * @protected\n     * @abstract\n     */\n    protected abstract OnAdd(): void;\n\n    /**\n     * Called when the label is removed from the map.\n     * @method\n     * @protected\n     * @memberof MapLabel\n     */\n    protected OnRemove() {\n        if (this._canvas && this._canvas.parentNode) {\n            this._canvas.parentNode.removeChild(this._canvas);\n        }\n    }\n}\n\n","export class Extender {\n\n    private _obj: any;\n    private _proto: any;\n\n    constructor(obj: any) {\n        this._obj = obj;\n        this._proto = obj.prototype;\n    }\n\n    Extend(newObj: any): Extender {\n\n        this.Set('prototype', newObj, this._obj);\n\n        for (const y in this._proto) {\n            if ((<any>this._proto)[y] != null) {\n                this.Set(y, (this._proto)[y], (<any>this._obj.prototype)[y]);\n            }\n        }\n\n        return this;\n    }\n\n    Set(property: string, newObj: any, obj?: any): Extender {\n        if (typeof newObj === 'undefined') {\n            return this;\n        }\n\n        if (typeof obj === 'undefined') {\n            obj = this._proto;\n        }\n\n        Object.defineProperty(obj, property, newObj);\n    }\n\n    Map(property: string, newProperty: string): Extender {\n        this.Set(property, this._proto[newProperty], this._obj.prototype);\n        return this;\n    }\n}","import { BingMapService } from '../../services/bing/bing-map.service';\nimport { BingConversions } from '../../services/bing/bing-conversions';\nimport { ILabelOptions } from '../../interfaces/ilabel-options';\nimport { MapLabel } from '../map-label';\nimport { Extender } from '../extender';\n\nlet id: number = 0;\n\n/**\n * Implements map a labled to be placed on the map.\n *\n * @export\n */\nexport class BingMapLabel extends MapLabel {\n\n    /**\n     * Returns the default label style for the platform\n     *\n     * @readonly\n     * @abstract\n     * @memberof BingMapLabel\n     */\n    public get DefaultLabelStyle(): ILabelOptions {\n        return {\n            fontSize: 12,\n            fontFamily: 'sans-serif',\n            fontColor: '#ffffff',\n            strokeWeight: 2,\n            strokeColor: '#000000'\n        };\n    }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates a new MapLabel\n     * @param options Optional properties to set.\n     */\n    constructor(options: { [key: string]: any }) {\n        options.fontSize = options.fontSize || 12;\n        options.fontColor = options.fontColor || '#ffffff';\n        options.strokeWeight = options.strokeWeight || 2;\n        options.strokeColor = options.strokeColor || '#000000';\n        super(options);\n        (<any>this)._options.beneathLabels = false;\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Gets the value of a setting.\n     *\n     * @param key - Key specifying the setting.\n     * @returns - The value of the setting.\n     * @memberof BingMapLabel\n     * @method\n     */\n    public Get(key: string): any {\n        return (<any>this)[key];\n    }\n\n    /**\n     * Gets the map associted with the label.\n     *\n     * @memberof BingMapLabel\n     * @method\n     */\n    public GetMap(): Microsoft.Maps.Map {\n        return (<any>this).getMap();\n    }\n\n    /**\n     * Set the value for a setting.\n     *\n     * @param key - Key specifying the setting.\n     * @param val - The value to set.\n     * @memberof BingMapLabel\n     * @method\n     */\n    public Set(key: string, val: any): void {\n        if (key === 'position' && !val.hasOwnProperty('altitude') && val.hasOwnProperty('latitude') && val.hasOwnProperty('longitude')) {\n            val = new Microsoft.Maps.Location(val.latitude, val.longitude);\n        }\n        if (this.Get(key) !== val) {\n            (<any>this)[key] = val;\n            this.Changed(key);\n        }\n    }\n\n    /**\n     * Sets the map for the label. Settings this to null remove the label from hte map.\n     *\n     * @param map - Map to associated with the label.\n     * @memberof BingMapLabel\n     * @method\n     */\n    public SetMap(map: Microsoft.Maps.Map): void {\n        const m: Microsoft.Maps.Map = this.GetMap();\n        if (map === m) { return; }\n        if (m) {\n            m.layers.remove(this);\n        }\n        if (map != null) {\n            map.layers.insert(this);\n        }\n    }\n\n    /**\n     * Applies settings to the object\n     *\n     * @param options - An object containing the settings key value pairs.\n     * @memberof BingMapLabel\n     * @method\n     */\n    public SetValues(options: { [key: string]: any }): void {\n        const p: Array<string> = new Array<string>();\n        for (const key in options) {\n            if (key !== '') {\n                if (key === 'position' && !options[key].hasOwnProperty('altitude') &&\n                    options[key].hasOwnProperty('latitude') && options[key].hasOwnProperty('longitude')) {\n                    options[key] = new Microsoft.Maps.Location(options[key].latitude, options[key].longitude);\n                }\n                if (this.Get(key) !== options[key]) {\n                    (<any>this)[key] = options[key];\n                    p.push(key);\n                }\n            }\n        }\n        if (p.length > 0) { this.Changed(p); }\n    }\n\n    ///\n    /// Protected methods\n    ///\n\n    /**\n     * Draws the label on the map.\n     * @memberof BingMapLabel\n     * @method\n     * @protected\n     */\n    protected Draw(): void {\n        const visibility: string = this.GetVisible();\n        const m: Microsoft.Maps.Map = this.GetMap();\n        if (!this._canvas) { return; }\n        if (!m) { return; }\n        const style: CSSStyleDeclaration = this._canvas.style;\n        if (visibility !== '') {\n            // label is not visible, don't calculate positions etc.\n            style['visibility'] = visibility;\n            return;\n        }\n\n        let offset: Microsoft.Maps.Point = this.Get('offset');\n        const latLng: Microsoft.Maps.Location = this.Get('position');\n        if (!latLng) { return; }\n        if (!offset) { offset = new Microsoft.Maps.Point(0, 0); }\n\n        const pos: Microsoft.Maps.Point = <Microsoft.Maps.Point>m.tryLocationToPixel(\n            latLng,\n            Microsoft.Maps.PixelReference.control);\n        style['top'] = (pos.y + offset.y) + 'px';\n        style['left'] = (pos.x + offset.x) + 'px';\n        style['visibility'] = visibility;\n    }\n\n    /**\n     * Delegate called when the label is added to the map. Generates and configures\n     * the canvas.\n     *\n     * @memberof BingMapLabel\n     * @method\n     * @protected\n     */\n    protected OnAdd() {\n        this._canvas = document.createElement('canvas');\n        this._canvas.id = `xMapLabel${id++}`;\n        const style: CSSStyleDeclaration = this._canvas.style;\n        style.position = 'absolute';\n\n        const ctx: CanvasRenderingContext2D = this._canvas.getContext('2d');\n        ctx.lineJoin = 'round';\n        ctx.textBaseline = 'top';\n\n        (<any>this).setHtmlElement(this._canvas);\n    }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Delegate callled when the label is loaded\n     * @memberof BingMapLabel\n     * @method\n     */\n    private OnLoad() {\n        Microsoft.Maps.Events.addHandler(this.GetMap(), 'viewchange', () => {\n            this.Changed('position');\n        });\n        this.DrawCanvas();\n        this.Draw();\n    }\n}\n\n/**\n * Helper function to extend the CustomOverlay into the MapLabel\n *\n * @export\n * @method\n */\nexport function MixinMapLabelWithOverlayView() {\n    new Extender(BingMapLabel)\n    .Extend(new Microsoft.Maps.CustomOverlay())\n    .Map('onAdd', 'OnAdd')\n    .Map('onLoad', 'OnLoad')\n    .Map('onRemove', 'OnRemove');\n}\n","import { ILatLong } from '../../interfaces/ilatlong';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { IPolygonEvent } from '../../interfaces/ipolygon-event';\nimport { BingConversions } from '../../services/bing/bing-conversions';\nimport { BingMapService } from '../../services/bing/bing-map.service';\nimport { Polygon } from '../polygon';\nimport { BingMapLabel } from './bing-label';\n\n/**\n * Concrete implementation for a polygon model for Bing Maps V8.\n *\n * @export\n */\nexport class BingPolygon extends Polygon implements Polygon {\n\n    ///\n    /// Field declarations\n    ///\n    private _map: Microsoft.Maps.Map = null;\n    private _isEditable: boolean = false;\n    private _title: string = '';\n    private _maxZoom: number = -1;\n    private _minZoom: number = -1;\n    private _showLabel: boolean = false;\n    private _showTooltip: boolean = false;\n    private _label: BingMapLabel = null;\n    private _tooltip: BingMapLabel = null;\n    private _hasToolTipReceiver: boolean = false;\n    private _tooltipVisible: boolean = false;\n    private _mouseOverListener: Microsoft.Maps.IHandlerId;\n    private _mouseMoveListener: Microsoft.Maps.IHandlerId;\n    private _mouseOutListener: Microsoft.Maps.IHandlerId;\n    private _metadata: Map<string, any> = new Map<string, any>();\n    private _originalPath: Array<Array<ILatLong>>;\n    private _editingCompleteEmitter: (event: IPolygonEvent) => void;\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Gets or sets the maximum zoom at which the label is displayed. Ignored or ShowLabel is false.\n     *\n     * @memberof GooglePolygon\n     * @property\n     */\n    public get LabelMaxZoom(): number { return this._maxZoom; }\n    public set LabelMaxZoom(val: number) {\n        this._maxZoom = val;\n        this.ManageLabel();\n    }\n\n    /**\n     * Gets or sets the minimum zoom at which the label is displayed. Ignored or ShowLabel is false.\n     *\n     * @memberof GooglePolygon\n     * @property\n     */\n    public get LabelMinZoom(): number { return this._minZoom; }\n    public set LabelMinZoom(val: number) {\n        this._minZoom = val;\n        this.ManageLabel();\n    }\n\n    /**\n     * Gets the polygon metadata.\n     *\n     * @readonly\n     * @memberof BingPolygon\n     */\n    public get Metadata(): Map<string, any> { return this._metadata; }\n\n    /**\n     * Gets the native primitve implementing the polygon, in this case {@link Microsoft.Maps.Polygon}\n     *\n     * @readonly\n     * @memberof BingPolygon\n     */\n    public get NativePrimitve(): Microsoft.Maps.Polygon { return this._polygon; }\n\n    /**\n     * Gets or sets whether to show the label\n     *\n     * @abstract\n     * @memberof BingPolygon\n     * @property\n     */\n    public get ShowLabel(): boolean { return this._showLabel; }\n    public set ShowLabel(val: boolean) {\n        this._showLabel = val;\n        this.ManageLabel();\n    }\n\n    /**\n     * Gets or sets whether to show the tooltip\n     *\n     * @abstract\n     * @memberof BingPolygon\n     * @property\n     */\n    public get ShowTooltip(): boolean { return this._showTooltip; }\n    public set ShowTooltip(val: boolean) {\n        this._showTooltip = val;\n        this.ManageTooltip();\n    }\n\n    /**\n     * Gets or sets the title off the polygon\n     *\n     * @abstract\n     * @memberof BingPolygon\n     * @property\n     */\n    public get Title(): string { return this._title; }\n    public set Title(val: string) {\n        this._title = val;\n        this.ManageLabel();\n        this.ManageTooltip();\n    }\n\n    ///\n    /// constructor\n    ///\n\n    /**\n     * Creates an instance of BingPolygon.\n     * @param _polygon - The {@link Microsoft.Maps.Polygon} underlying the model.\n     * @param _mapService Instance of the Map Service.\n     * @param _layer - The context layer.\n     * @memberof BingPolygon\n     */\n    constructor(\n        private _polygon: Microsoft.Maps.Polygon,\n        protected _mapService: BingMapService,\n        protected _layer: Microsoft.Maps.Layer,\n    ) {\n        super();\n        this._map = this._mapService.MapInstance;\n        this._originalPath = this.GetPaths();\n    }\n\n    /**\n     * Adds a delegate for an event.\n     *\n     * @param eventType - String containing the event name.\n     * @param fn - Delegate function to execute when the event occurs.\n\n     * @memberof BingPolygon\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        const supportedEvents = ['click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mouseout', 'mouseover', 'mouseup'];\n        if (supportedEvents.indexOf(eventType) !== -1) {\n            Microsoft.Maps.Events.addHandler(this._polygon, eventType, (e) => {\n                fn(e);\n            });\n        }\n        if (eventType === 'mousemove') {\n            let handlerId: Microsoft.Maps.IHandlerId;\n            Microsoft.Maps.Events.addHandler(this._polygon, 'mouseover', e => {\n                handlerId = Microsoft.Maps.Events.addHandler(this._map, 'mousemove', m => fn(m));\n            });\n            Microsoft.Maps.Events.addHandler(this._polygon, 'mouseout', e => {\n                if (handlerId) { Microsoft.Maps.Events.removeHandler(handlerId); }\n            });\n        } if (eventType === 'pathchanged') {\n            this._editingCompleteEmitter = <(event: IPolygonEvent) => void>fn;\n        }\n    }\n\n    /**\n     * Deleted the polygon.\n     *\n     * @memberof BingPolygon\n     */\n    public Delete(): void {\n        if (this._layer) { this._layer.remove(this.NativePrimitve); }\n        else {\n            this._map.entities.remove(this.NativePrimitve);\n        }\n        if (this._label) { this._label.Delete(); }\n        if (this._tooltip) { this._tooltip.Delete(); }\n    }\n\n    /**\n     * Gets whether the polygon is draggable.\n     *\n     * @returns - True if the polygon is dragable, false otherwise.\n     *\n     * @memberof BingPolygon\n     */\n    public GetDraggable(): boolean {\n        ///\n        /// Bing polygons are not draggable by default.\n        /// See https://social.msdn.microsoft.com/Forums/en-US/\n        ///     7aaae748-4d5f-4be5-a7bb-90498e08b41c/how-can-i-make-polygonpolyline-draggable-in-bing-maps-8?\n        ///     forum=bingmaps\n        /// for a possible approach to be implemented in the model.\n        ///\n        return false;\n    }\n\n    /**\n     * Gets whether the polygon path can be edited.\n     *\n     * @returns - True if the path can be edited, false otherwise.\n     *\n     * @memberof BingPolygon\n     */\n    public GetEditable(): boolean {\n        return this._isEditable;\n    }\n\n    /**\n     * Gets the polygon path.\n     *\n     * @returns - Array of {@link ILatLong} objects describing the polygon path.\n     *\n     * @memberof BingPolygon\n     */\n    public GetPath(): Array<ILatLong> {\n        const p: Array<Microsoft.Maps.Location> = this._polygon.getLocations();\n        const path: Array<ILatLong> = new Array<ILatLong>();\n        p.forEach(l => path.push({ latitude: l.latitude, longitude: l.longitude }));\n        return path;\n    }\n\n    /**\n     * Gets the polygon paths.\n     *\n     * @returns - Array of Array of {@link ILatLong} objects describing multiple polygon paths.\n     *\n     * @memberof BingPolygon\n     */\n    public GetPaths(): Array<Array<ILatLong>> {\n        const p: Array<Array<Microsoft.Maps.Location>> = this._polygon.getRings();\n        const paths: Array<Array<ILatLong>> = new Array<Array<ILatLong>>();\n        p.forEach(x => {\n            const path: Array<ILatLong> = new Array<ILatLong>();\n            x.forEach(y => path.push({ latitude: y.latitude, longitude: y.longitude }));\n            paths.push(path);\n        });\n        return paths;\n    }\n\n    /**\n     * Gets whether the polygon is visible.\n     *\n     * @returns - True if the polygon is visible, false otherwise.\n     *\n     * @memberof BingPolygon\n     */\n    public GetVisible(): boolean {\n        return this._polygon.getVisible();\n    }\n\n    /**\n     * Sets whether the polygon is dragable.\n     *\n     * @param draggable - True to make the polygon dragable, false otherwise.\n     *\n     * @memberof BingPolygon\n     */\n    public SetDraggable(draggable: boolean): void {\n        ///\n        /// Bing polygons are not draggable by default.\n        /// See https://social.msdn.microsoft.com/Forums/en-US/\n        ///     7aaae748-4d5f-4be5-a7bb-90498e08b41c/how-can-i-make-polygonpolyline-draggable-in-bing-maps-8\n        //      ?forum=bingmaps\n        /// for a possible approach to be implemented in the model.\n        ///\n        throw (new Error('The bing maps implementation currently does not support draggable polygons.'));\n    }\n\n    /**\n     * Sets wether the polygon path is editable.\n     *\n     * @param editable - True to make polygon path editable, false otherwise.\n     *\n     * @memberof BingPolygon\n     */\n    public SetEditable(editable: boolean): void {\n        const isChanged = this._isEditable !== editable;\n        this._isEditable = editable;\n        if (!isChanged) {\n            return;\n        }\n\n        if (this._isEditable) {\n            this._originalPath = this.GetPaths();\n            this._mapService.GetDrawingTools().then(t => {\n                t.edit(this._polygon);\n            });\n        }\n        else {\n            this._mapService.GetDrawingTools().then(t => {\n                t.finish((editedPolygon: Microsoft.Maps.Polygon) => {\n                    if (editedPolygon !== this._polygon || !this._editingCompleteEmitter) {\n                        return;\n                    }\n                    const newPath: Array<Array<ILatLong>> = this.GetPaths();\n                    const originalPath: Array<Array<ILatLong>> = this._originalPath;\n                    this.SetPaths(newPath);\n                        // this is necessary for the new path to persist it appears.\n                    this._editingCompleteEmitter({\n                        Click: null,\n                        Polygon: this,\n                        OriginalPath: originalPath,\n                        NewPath: newPath\n                    });\n                });\n            });\n        }\n    }\n\n    /**\n     * Sets the polygon options\n     *\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\n     * already on the underlying model.\n     *\n     * @memberof Polygon\n     */\n    public SetOptions(options: IPolygonOptions): void {\n        const o: Microsoft.Maps.IPolygonOptions = BingConversions.TranslatePolygonOptions(options);\n        this._polygon.setOptions(o);\n        if (options.visible != null && this._showLabel && this._label) { this._label.Set('hidden', !options.visible); }\n\n        if (typeof options.editable !== 'undefined') {\n            this.SetEditable(options.editable);\n        }\n    }\n\n    /**\n     * Sets the polygon path.\n     *\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polygons path.\n     *\n     * @memberof BingPolygon\n     */\n    public SetPath(path: Array<ILatLong>): void {\n        const p: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\n        path.forEach(x => p.push(new Microsoft.Maps.Location(x.latitude, x.longitude)));\n        this._originalPath = [path];\n        this._polygon.setLocations(p);\n        if (this._label) {\n            this._centroid = null;\n            this.ManageLabel();\n        }\n    }\n\n    /**\n     * Set the polygon path or paths.\n     *\n     * @param paths\n     * An Array of {@link ILatLong} (or array of arrays) describing the polygons path(s).\n     *\n     * @memberof BingPolygon\n     */\n    public SetPaths(paths: Array<Array<ILatLong>> | Array<ILatLong>): void {\n        if (paths == null) { return; }\n        if (!Array.isArray(paths)) { return; }\n        if (paths.length === 0) {\n            this._polygon.setRings(new Array<Microsoft.Maps.Location>());\n            if (this._label) {\n                this._label.Delete();\n                this._label = null;\n            }\n            return;\n        }\n        if (Array.isArray(paths[0])) {\n            // parameter is an array or arrays\n            const p: Array<Array<Microsoft.Maps.Location>> = new Array<Array<Microsoft.Maps.Location>>();\n            (<Array<Array<ILatLong>>>paths).forEach(path => {\n                const _p: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\n                path.forEach(x => _p.push(new Microsoft.Maps.Location(x.latitude, x.longitude)));\n                p.push(_p);\n            });\n            this._originalPath = <Array<Array<ILatLong>>>paths;\n            this._polygon.setRings(p);\n            if (this._label) {\n                this._centroid = null;\n                this.ManageLabel();\n            }\n        }\n        else {\n            // parameter is a simple array....\n            this.SetPath(<Array<ILatLong>>paths);\n        }\n    }\n\n    /**\n     * Sets whether the polygon is visible.\n     *\n     * @param visible - True to set the polygon visible, false otherwise.\n     *\n     * @memberof BingPolygon\n     */\n    public SetVisible(visible: boolean): void {\n        this._polygon.setOptions(<Microsoft.Maps.IPolygonOptions>{ visible: visible });\n        if (this._showLabel && this._label) { this._label.Set('hidden', !visible); }\n    }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Configures the label for the polygon\n     * @memberof Polygon\n     */\n    private ManageLabel(): void {\n        if (this.GetPath == null || this.GetPath().length === 0) { return; }\n        if (this._showLabel && this._title != null && this._title !== '') {\n            const o: { [key: string]: any } = {\n                text: this._title,\n                position: BingConversions.TranslateLocation(this.Centroid)\n            };\n            if (o.position == null) { return; }\n            if (this._minZoom !== -1) { o.minZoom = this._minZoom; }\n            if (this._maxZoom !== -1) { o.maxZoom = this._maxZoom; }\n            if (this._label == null) {\n                this._label = new BingMapLabel(o);\n                this._label.SetMap(this._map);\n            }\n            else {\n                this._label.SetValues(o);\n            }\n            this._label.Set('hidden', !this.GetVisible());\n        }\n        else {\n            if (this._label) {\n                this._label.SetMap(null);\n                this._label = null;\n            }\n        }\n    }\n\n    /**\n     * Configures the tooltip for the polygon\n     * @memberof Polygon\n     */\n    private ManageTooltip(): void {\n        if (this._showTooltip && this._title != null && this._title !== '') {\n            const o: { [key: string]: any } = {\n                text: this._title,\n                align: 'left',\n                offset: new Microsoft.Maps.Point(0, 25),\n                backgroundColor: 'bisque',\n                hidden: true,\n                fontSize: 12,\n                fontColor: '#000000',\n                strokeWeight: 0\n            };\n            if (this._tooltip == null) {\n                this._tooltip = new BingMapLabel(o);\n                this._tooltip.SetMap(this._map);\n            }\n            else {\n                this._tooltip.SetValues(o);\n            }\n            if (!this._hasToolTipReceiver) {\n                this._mouseOverListener = Microsoft.Maps.Events.addHandler(\n                    this._polygon, 'mouseover', (e: Microsoft.Maps.IMouseEventArgs) => {\n                        this._tooltip.Set('position', e.location);\n                        if (!this._tooltipVisible) {\n                            this._tooltip.Set('hidden', false);\n                            this._tooltipVisible = true;\n                        }\n                        this._mouseMoveListener = Microsoft.Maps.Events.addHandler(\n                            this._map, 'mousemove', (m: Microsoft.Maps.IMouseEventArgs) => {\n                                if (this._tooltipVisible && m.location && m.primitive === this._polygon) {\n                                    this._tooltip.Set('position', m.location);\n                                }\n                            });\n                    });\n                this._mouseOutListener = Microsoft.Maps.Events.addHandler(\n                    this._polygon, 'mouseout', (e: Microsoft.Maps.IMouseEventArgs) => {\n                        if (this._tooltipVisible) {\n                            this._tooltip.Set('hidden', true);\n                            this._tooltipVisible = false;\n                        }\n                        if (this._mouseMoveListener) { Microsoft.Maps.Events.removeHandler(this._mouseMoveListener); }\n                    });\n                this._hasToolTipReceiver = true;\n            }\n        }\n        if ((!this._showTooltip || this._title === '' || this._title == null)) {\n            if (this._hasToolTipReceiver) {\n                if (this._mouseOutListener) { Microsoft.Maps.Events.removeHandler(this._mouseOutListener); }\n                if (this._mouseOverListener) { Microsoft.Maps.Events.removeHandler(this._mouseOverListener); }\n                if (this._mouseMoveListener) { Microsoft.Maps.Events.removeHandler(this._mouseMoveListener); }\n                this._hasToolTipReceiver = false;\n            }\n            if (this._tooltip) {\n                this._tooltip.SetMap(null);\n                this._tooltip = null;\n            }\n        }\n    }\n\n}\n","import { ILatLong } from '../../interfaces/ilatlong';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { BingConversions } from '../../services/bing/bing-conversions';\nimport { Polyline } from '../polyline';\nimport { BingMapLabel } from './bing-label';\n\n/**\n * Concrete implementation for a polyline model for Bing Maps V8.\n *\n * @export\n */\nexport class BingPolyline extends Polyline implements Polyline {\n\n    ///\n    /// Field declarations\n    ///\n    private _isEditable: boolean = true;\n\n    ///\n    /// Property declarations\n    ///\n    private _title: string = '';\n    private _showTooltip: boolean = false;\n    private _tooltip: BingMapLabel = null;\n    private _hasToolTipReceiver: boolean = false;\n    private _tooltipVisible: boolean = false;\n    private _mouseOverListener: Microsoft.Maps.IHandlerId;\n    private _mouseMoveListener: Microsoft.Maps.IHandlerId;\n    private _mouseOutListener: Microsoft.Maps.IHandlerId;\n    private _metadata: Map<string, any> = new Map<string, any>();\n\n    /**\n     * Gets the polyline metadata.\n     *\n     * @readonly\n     * @memberof BingPolyline\n     */\n    public get Metadata(): Map<string, any> { return this._metadata; }\n\n    /**\n     * Gets the Navitve Polyline underlying the model\n     *\n     * @readonly\n     * @memberof BingPolyline\n     */\n    public get NativePrimitve(): Microsoft.Maps.Polyline { return this._polyline; }\n\n    /**\n     * Gets or sets whether to show the tooltip\n     *\n     * @abstract\n     * @memberof BingPolyline\n     * @property\n     */\n    public get ShowTooltip(): boolean { return this._showTooltip; }\n    public set ShowTooltip(val: boolean) {\n        this._showTooltip = val;\n        this.ManageTooltip();\n    }\n\n    /**\n     * Gets or sets the title off the polyline\n     *\n     * @abstract\n     * @memberof BingPolyline\n     * @property\n     */\n    public get Title(): string { return this._title; }\n    public set Title(val: string) {\n        this._title = val;\n        this.ManageTooltip();\n    }\n\n    ///\n    /// constructor\n    ///\n\n    /**\n     * Creates an instance of BingPolygon.\n     * @param _polyline - The {@link Microsoft.Maps.Polyline} underlying the model.\n     * @param _map - The context map.\n     * @param _layer - The context layer.\n     * @memberof BingPolyline\n     */\n    constructor(private _polyline: Microsoft.Maps.Polyline, protected _map: Microsoft.Maps.Map, protected _layer: Microsoft.Maps.Layer) {\n        super();\n    }\n\n    /**\n     * Adds a delegate for an event.\n     *\n     * @param eventType - String containing the event name.\n     * @param fn - Delegate function to execute when the event occurs.\n     * @memberof BingPolyline\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        const supportedEvents = ['click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mouseout', 'mouseover', 'mouseup' ];\n        if (supportedEvents.indexOf(eventType) !== -1) {\n            Microsoft.Maps.Events.addHandler(this._polyline, eventType, (e) => {\n                fn(e);\n            });\n        }\n        if (eventType === 'mousemove') {\n            let handlerId: Microsoft.Maps.IHandlerId;\n            Microsoft.Maps.Events.addHandler(this._polyline, 'mouseover', e => {\n                handlerId = Microsoft.Maps.Events.addHandler(this._map, 'mousemove', m => fn(m));\n            });\n            Microsoft.Maps.Events.addHandler(this._polyline, 'mouseout', e => {\n                if (handlerId) { Microsoft.Maps.Events.removeHandler(handlerId); }\n            });\n        }\n    }\n\n    /**\n     * Deleted the polyline.\n     *\n     * @memberof BingPolyline\n     */\n    public Delete(): void {\n        if (this._layer) { this._layer.remove(this.NativePrimitve); }\n        else {\n            this._map.entities.remove(this.NativePrimitve);\n        }\n        if (this._tooltip) { this._tooltip.Delete(); }\n    }\n\n    /**\n     * Gets whether the polyline is draggable.\n     *\n     * @returns - True if the polyline is dragable, false otherwise.\n     *\n     * @memberof BingPolyline\n     */\n    public GetDraggable(): boolean {\n        ///\n        /// Bing polygons are not draggable by default.\n        /// See https://social.msdn.microsoft.com/Forums/en-US/\n        ///     7aaae748-4d5f-4be5-a7bb-90498e08b41c/how-can-i-make-polygonpolyline-draggable-in-bing-maps-8\n        ///     ?forum=bingmaps\n        /// for a possible approach to be implemented in the model.\n        ///\n        return false;\n    }\n\n    /**\n     * Gets whether the polyline path can be edited.\n     *\n     * @returns - True if the path can be edited, false otherwise.\n     *\n     * @memberof BingPolyline\n     */\n    public GetEditable(): boolean {\n        return this._isEditable;\n    }\n\n    /**\n     * Gets the polyline path.\n     *\n     * @returns - Array of {@link ILatLong} objects describing the polyline path.\n     *\n     * @memberof BingPolyline\n     */\n    public GetPath(): Array<ILatLong> {\n        const p: Array<Microsoft.Maps.Location> = this._polyline.getLocations();\n        const path: Array<ILatLong> = new Array<ILatLong>();\n        p.forEach(l => path.push({ latitude: l.latitude, longitude: l.longitude }));\n        return path;\n    }\n\n    /**\n     * Gets whether the polyline is visible.\n     *\n     * @returns - True if the polyline is visible, false otherwise.\n     *\n     * @memberof BingPolyline\n     */\n    public GetVisible(): boolean {\n        return this._polyline.getVisible();\n    }\n\n    /**\n     * Sets whether the polyline is dragable.\n     *\n     * @param draggable - True to make the polyline dragable, false otherwise.\n     *\n     * @memberof BingPolyline\n     */\n    public SetDraggable(draggable: boolean): void {\n        ///\n        /// Bing polygons are not draggable by default.\n        /// See https://social.msdn.microsoft.com/Forums/en-US/\n        ///     7aaae748-4d5f-4be5-a7bb-90498e08b41c/how-can-i-make-polygonpolyline-draggable-in-bing-maps-8\n        ///     ?forum=bingmaps\n        /// for a possible approach to be implemented in the model.\n        ///\n        throw(new Error('The bing maps implementation currently does not support draggable polylines.'));\n    }\n\n    /**\n     * Sets wether the polyline path is editable.\n     *\n     * @param editable - True to make polyline path editable, false otherwise.\n     *\n     * @memberof BingPolyline\n     */\n    public SetEditable(editable: boolean): void {\n        this._isEditable = editable;\n    }\n\n    /**\n     * Sets the polyline options\n     *\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\n     * already on the underlying model.\n     *\n     * @memberof BingPolyline\n     */\n    public SetOptions(options: IPolylineOptions): void {\n        const o: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolylineOptions(options);\n        this._polyline.setOptions(o);\n        if (options.path) {\n            this.SetPath(<Array<ILatLong>>options.path);\n        }\n    }\n\n    /**\n     * Sets the polyline path.\n     *\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polylines path.\n     *\n     * @memberof BingPolyline\n     */\n    public SetPath(path: Array<ILatLong>): void {\n        const p: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\n        path.forEach(x => p.push(new Microsoft.Maps.Location(x.latitude, x.longitude)));\n        this._polyline.setLocations(p);\n    }\n\n    /**\n     * Sets whether the polyline is visible.\n     *\n     * @param visible - True to set the polyline visible, false otherwise.\n     *\n     * @memberof BingPolyline\n     */\n    public SetVisible(visible: boolean): void {\n        this._polyline.setOptions(<Microsoft.Maps.IPolylineOptions>{ visible: visible });\n    }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Configures the tooltip for the polygon\n     * @memberof Polygon\n     */\n    private ManageTooltip(): void {\n        if (this._showTooltip && this._title != null && this._title !== '') {\n            const o: { [key: string]: any } = {\n                text: this._title,\n                align: 'left',\n                offset: new Microsoft.Maps.Point(0, 25),\n                backgroundColor: 'bisque',\n                hidden: true,\n                fontSize: 12,\n                fontColor: '#000000',\n                strokeWeight: 0\n            };\n            if (this._tooltip == null) {\n                this._tooltip = new BingMapLabel(o);\n                this._tooltip.SetMap(this._map);\n            }\n            else {\n                this._tooltip.SetValues(o);\n            }\n            if (!this._hasToolTipReceiver) {\n                this._mouseOverListener = Microsoft.Maps.Events.addHandler(\n                        this._polyline, 'mouseover', (e: Microsoft.Maps.IMouseEventArgs) => {\n                    this._tooltip.Set('position', e.location);\n                    if (!this._tooltipVisible) {\n                        this._tooltip.Set('hidden', false);\n                        this._tooltipVisible = true;\n                    }\n                });\n                this._mouseMoveListener = Microsoft.Maps.Events.addHandler(\n                            this._map, 'mousemove', (e: Microsoft.Maps.IMouseEventArgs) => {\n                    if (this._tooltipVisible && e.location && e.primitive === this._polyline) {\n                        this._tooltip.Set('position', e.location);\n                    }\n                });\n                this._mouseOutListener = Microsoft.Maps.Events.addHandler(\n                            this._polyline, 'mouseout', (e: Microsoft.Maps.IMouseEventArgs) => {\n                    if (this._tooltipVisible) {\n                        this._tooltip.Set('hidden', true);\n                        this._tooltipVisible = false;\n                    }\n                });\n                this._hasToolTipReceiver = true;\n            }\n        }\n        if ((!this._showTooltip || this._title === '' || this._title == null)) {\n            if (this._hasToolTipReceiver) {\n                if (this._mouseOutListener) { Microsoft.Maps.Events.removeHandler(this._mouseOutListener) ; }\n                if (this._mouseOverListener) { Microsoft.Maps.Events.removeHandler(this._mouseOverListener); }\n                if (this._mouseMoveListener) { Microsoft.Maps.Events.removeHandler(this._mouseMoveListener); }\n                this._hasToolTipReceiver = false;\n            }\n            if (this._tooltip) {\n                this._tooltip.SetMap(null);\n                this._tooltip = null;\n            }\n        }\n    }\n}\n","import { IMapEventLookup } from '../../interfaces/imap-event-lookup';\n\n/**\n * This contstant translates the abstract map events into their corresponding bing map\n * equivalents.\n */\nexport const BingMapEventsLookup: IMapEventLookup = {\n    click :             'click',\n    dblclick :          'dblclick',\n    rightclick :        'rightclick',\n    resize :            'resize',\n    boundschanged :     'viewchangeend',\n    centerchanged :     'viewchangeend',\n    zoomchanged :       'viewchangeend',\n    mouseover:          'mouseover',\n    mouseout :          'mouseout',\n    mousemove :         'mousemove',\n    infowindowclose:    'infoboxChanged'\n};\n","import { ILatLong } from '../../interfaces/ilatlong';\nimport { BingConversions } from '../../services/bing/bing-conversions';\nimport { CanvasOverlay } from '../canvas-overlay';\nimport { MapLabel } from '../map-label';\nimport { BingMapLabel } from './bing-label';\nimport { Extender } from '../extender';\n\n/**\n * Concrete implementing a canvas overlay to be placed on the map for Bing Maps.\n *\n * @export\n */\nexport class BingCanvasOverlay extends CanvasOverlay {\n\n    ///\n    /// field declarations\n    ///\n    private _viewChangeEvent: Microsoft.Maps.IHandlerId;\n    private _viewChangeEndEvent: Microsoft.Maps.IHandlerId;\n    private _mapResizeEvent: Microsoft.Maps.IHandlerId;\n\n\n    /**\n     * Creates a new instance of the BingCanvasOverlay class.\n     * @param drawCallback A callback function that is triggered when the canvas is ready to be\n     * rendered for the current map view.\n     * @memberof BingCanvasOverlay\n     */\n    constructor(drawCallback: (canvas: HTMLCanvasElement) => void) {\n        super(drawCallback);\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Obtains geo coordinates for the click location\n     *\n     * @abstract\n     * @param e - The mouse event. Expected to implement {@link Microsoft.Maps.IMouseEventArgs}.\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\n     * @memberof BingCanvasOverlay\n     */\n    public GetCoordinatesFromClick(e: Microsoft.Maps.IMouseEventArgs): ILatLong {\n        return { latitude: e.location.latitude, longitude: e.location.longitude };\n    }\n\n    /**\n     * Gets the map associted with the label.\n     *\n     * @memberof BingCanvasOverlay\n     * @method\n     */\n    public GetMap(): Microsoft.Maps.Map {\n        return (<any>this).getMap();\n    }\n\n    /**\n     * Returns a MapLabel instance for the current platform that can be used as a tooltip.\n     * This method only generates the map label. Content and placement is the responsibility\n     * of the caller. Note that this method returns null until OnLoad has been called.\n     *\n     * @returns - The label to be used for the tooltip.\n     * @memberof BingCanvasOverlay\n     * @method\n     */\n    public GetToolTipOverlay(): MapLabel {\n        const o: { [key: string]: any } = {\n            align: 'left',\n            offset: new Microsoft.Maps.Point(0, 25),\n            backgroundColor: 'bisque',\n            hidden: true,\n            fontSize: 12,\n            fontColor: '#000000',\n            strokeWeight: 0\n        };\n        const label: MapLabel = new BingMapLabel(o);\n        label.SetMap(this.GetMap());\n        return label;\n    }\n\n    /**\n     * CanvasOverlay loaded, attach map events for updating canvas.\n     * @abstract\n     * @method\n     * @memberof BingCanvasOverlay\n     */\n    public OnLoad() {\n        const map: Microsoft.Maps.Map = (<any>this).getMap();\n\n        // Get the current map view information.\n        this._zoomStart = map.getZoom();\n        this._centerStart = <ILatLong>map.getCenter();\n\n        // Redraw the canvas.\n        this.Redraw(true);\n\n        // When the map moves, move the canvas accordingly.\n        this._viewChangeEvent = Microsoft.Maps.Events.addHandler(map, 'viewchange', (e) => {\n            if (map.getMapTypeId() === Microsoft.Maps.MapTypeId.streetside) {\n                // Don't show the canvas if the map is in Streetside mode.\n                this._canvas.style.display = 'none';\n            }\n            else {\n                // Re-drawing the canvas as it moves would be too slow. Instead, scale and translate canvas element.\n                const zoomCurrent: number = map.getZoom();\n                const centerCurrent: Microsoft.Maps.Location = map.getCenter();\n\n                // Calculate map scale based on zoom level difference.\n                const scale: number = Math.pow(2, zoomCurrent - this._zoomStart);\n\n                // Calculate the scaled dimensions of the canvas.\n                const newWidth: number = map.getWidth() * scale;\n                const newHeight: number = map.getHeight() * scale;\n\n                // Calculate offset of canvas based on zoom and center offsets.\n                const pixelPoints: Array<Microsoft.Maps.Point> = <Array<Microsoft.Maps.Point>>map.tryLocationToPixel([\n                        BingConversions.TranslateLocation(this._centerStart),\n                        centerCurrent\n                    ], Microsoft.Maps.PixelReference.control);\n                const centerOffsetX: number = pixelPoints[1].x - pixelPoints[0].x;\n                const centerOffsetY: number = pixelPoints[1].y - pixelPoints[0].y;\n                const x: number = (-(newWidth - map.getWidth()) / 2) - centerOffsetX;\n                const y: number = (-(newHeight - map.getHeight()) / 2) - centerOffsetY;\n\n                // Update the canvas CSS position and dimensions.\n                this.UpdatePosition(x, y, newWidth, newHeight);\n            }\n        });\n\n        // When the map stops moving, render new data on the canvas.\n        this._viewChangeEndEvent = Microsoft.Maps.Events.addHandler(map, 'viewchangeend', (e) => {\n            this.UpdateCanvas();\n        });\n\n        // Update the position of the overlay when the map is resized.\n        this._mapResizeEvent = Microsoft.Maps.Events.addHandler(map, 'mapresize', (e) => {\n            this.UpdateCanvas();\n        });\n\n        // set the overlay to ready state\n        this._readyResolver(true);\n    }\n\n    /**\n     * Sets the map for the label. Settings this to null remove the label from hte map.\n     *\n     * @param map - Map to associated with the label.\n     * @memberof CanvasOverlay\n     * @method\n     */\n    public SetMap(map: Microsoft.Maps.Map): void {\n        const m: Microsoft.Maps.Map = this.GetMap();\n        if (map === m) { return; }\n        if (m) {\n            m.layers.remove(this);\n        }\n        if (map != null) {\n            map.layers.insert(this);\n        }\n    }\n\n    ///\n    /// Protected methods\n    ///\n\n    /**\n     * Attaches the canvas to the map.\n     * @memberof CanvasOverlay\n     * @method\n     */\n    protected SetCanvasElement(el: HTMLCanvasElement): void {\n        (<any>this).setHtmlElement(el);\n    }\n\n    /**\n     * Remove the map event handlers.\n     * @memberof CanvasOverlay\n     * @method\n     * @protected\n     */\n    protected RemoveEventHandlers(): void {\n        // Remove all event handlers from the map.\n        Microsoft.Maps.Events.removeHandler(this._viewChangeEvent);\n        Microsoft.Maps.Events.removeHandler(this._viewChangeEndEvent);\n        Microsoft.Maps.Events.removeHandler(this._mapResizeEvent);\n    }\n\n    /**\n     * Updates the Canvas size based on the map size.\n     * @memberof CanvasOverlay\n     * @method\n     * @protected\n     */\n    protected Resize(): void {\n        const map: Microsoft.Maps.Map = (<any>this).getMap();\n\n        // Clear canvas by updating dimensions. This also ensures canvas stays the same size as the map.\n        this._canvas.width = map.getWidth();\n        this._canvas.height = map.getHeight();\n    }\n\n    /**\n     * Updates the Canvas.\n     * @memberof CanvasOverlay\n     * @method\n     * @protected\n     */\n    protected UpdateCanvas(): void {\n        const map: Microsoft.Maps.Map = (<any>this).getMap();\n\n        // Only render the canvas if it isn't in streetside mode.\n        if (map.getMapTypeId() !== Microsoft.Maps.MapTypeId.streetside) {\n            this._canvas.style.display = '';\n\n            // Reset CSS position and dimensions of canvas.\n            this.UpdatePosition(0, 0, map.getWidth(), map.getHeight());\n\n            // Redraw the canvas.\n            this.Redraw(true);\n\n            // Get the current map view information.\n            this._zoomStart = map.getZoom();\n            this._centerStart = <ILatLong>map.getCenter();\n        }\n    }\n}\n\n/**\n * Helper function to extend the OverlayView into the CanvasOverlay\n *\n * @export\n * @method\n */\nexport function MixinCanvasOverlay() {\n\n    new Extender(BingCanvasOverlay)\n    .Extend(new Microsoft.Maps.CustomOverlay())\n    .Map('onAdd', 'OnAdd')\n    .Map('onLoad', 'OnLoad')\n    .Map('onRemove', 'OnRemove');\n}\n","export let google: any;\n\nexport interface GoogleMap extends MVCObject {\n  data?: Data;\n  constructor(el: HTMLElement, opts?: MapOptions): void;\n  panTo(latLng: LatLng|LatLngLiteral): void;\n  setZoom(zoom: number): void;\n  getCenter(): LatLng;\n  setCenter(latLng: LatLng|LatLngLiteral): void;\n  getBounds(): LatLngBounds;\n  getZoom(): number;\n  getDiv(): HTMLDivElement;\n  getProjection(): any;\n  setOptions(options: MapOptions): void;\n  panToBounds(latLngBounds: LatLngBounds|LatLngBoundsLiteral): void;\n  fitBounds(bounds: LatLngBounds|LatLngBoundsLiteral): void;\n}\n\nexport interface LatLng {\n  constructor(lat: number, lng: number): void;\n  lat(): number;\n  lng(): number;\n}\n\nexport interface Marker extends MVCObject {\n  constructor(options?: MarkerOptions): void;\n  setMap(map: GoogleMap): void;\n  setPosition(latLng: LatLng|LatLngLiteral): void;\n  setTitle(title: string): void;\n  setLabel(label: string|MarkerLabel): void;\n  setPosition(latlng: LatLng|LatLngLiteral): void;\n  setDraggable(draggable: boolean): void;\n  setIcon(icon: string): void;\n  setOpacity(opacity: number): void;\n  setOptions(options: MarkerOptions): void;\n  setVisible(visible: boolean): void;\n  setZIndex(zIndex: number): void;\n  getLabel(): MarkerLabel;\n  getPosition(): LatLng;\n  getVisible(): boolean;\n}\n\nexport interface MarkerOptions {\n  position: LatLng|LatLngLiteral;\n  title?: string;\n  map?: GoogleMap;\n  label?: string|MarkerLabel;\n  draggable?: boolean;\n  clickable?: boolean;\n  icon?: string;\n  opacity?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface MarkerLabel {\n  color: string;\n  fontFamily: string;\n  fontSize: string;\n  fontWeight: string;\n  text: string;\n}\n\nexport interface ClusterStyle {\n  url?: string;\n  height?: number;\n  width?: number;\n  anchor?: Array<number>;\n  textColor?: string;\n  textSize?: number;\n  backgroundPosition?: string;\n}\n\nexport interface MarkerClusterer {\n  isZoomOnClick(): boolean;\n  isAverageCenter(): boolean;\n  getMarkers(): Array<Marker>;\n  getTotalMarkers(): number;\n  setMaxZoom(maxZoom: number): void;\n  getMaxZoom(): number;\n  addMarkers(markers: Array<Marker>, opt_nodraw?: boolean): void;\n  addMarker(marker: Marker, opt_nodraw?: boolean): void;\n  removeMarkers(markers: Array<Marker>, opt_nodraw?: boolean): void;\n  removeMarker(marker: Marker, opt_nodraw?: boolean): void;\n  getTotalClusters(): number;\n  getMap(): GoogleMap;\n  setMap(map: GoogleMap): void;\n  getGridSize(): number;\n  setGridSize(gridSize: number): void;\n  getMinClusterSize(): number;\n  setMinClusterSize(minClusterSize: number): void;\n  clearMarkers(): void;\n  setStyles(styles: Array<ClusterStyle>): void;\n  getStyles(): Array<ClusterStyle>;\n  setCalculator(callback: (markers: Array<Marker>, numStyles: number) => { text: string, index: number}): void;\n  getCalculator(): (markers: Array<Marker>, numStyles: number) => { text: string, index: number};\n  resetViewport(hide?: boolean): void;\n  redraw(): void;\n}\n\nexport interface Circle extends MVCObject {\n  getBounds(): LatLngBounds;\n  getCenter(): LatLng;\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getRadius(): number;\n  getVisible(): boolean;\n  setCenter(center: LatLng|LatLngLiteral): void;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: CircleOptions): void;\n  setRadius(radius: number): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface CircleOptions {\n  center?: LatLng|LatLngLiteral;\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  map?: GoogleMap;\n  radius?: number;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokePosition?: 'CENTER'|'INSIDE'|'OUTSIDE';\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface LatLngBounds {\n  contains(latLng: LatLng): boolean;\n  equals(other: LatLngBounds|LatLngBoundsLiteral): boolean;\n  extend(point: LatLng): void;\n  getCenter(): LatLng;\n  getNorthEast(): LatLng;\n  getSouthWest(): LatLng;\n  intersects(other: LatLngBounds|LatLngBoundsLiteral): boolean;\n  isEmpty(): boolean;\n  toJSON(): LatLngBoundsLiteral;\n  toSpan(): LatLng;\n  toString(): string;\n  toUrlValue(precision?: number): string;\n  union(other: LatLngBounds|LatLngBoundsLiteral): LatLngBounds;\n}\n\nexport interface LatLngBoundsLiteral {\n  east: number;\n  north: number;\n  south: number;\n  west: number;\n}\n\nexport interface LatLngLiteral {\n  lat: number;\n  lng: number;\n}\n\nexport interface MouseEvent { latLng: LatLng; }\n\nexport interface MapOptions {\n  center?: LatLng|LatLngLiteral;\n  zoom?: number;\n  minZoom?: number;\n  maxZoom?: number;\n  disableDoubleClickZoom?: boolean;\n  disableDefaultUI?: boolean;\n  scrollwheel?: boolean;\n  backgroundColor?: string;\n  draggable?: boolean;\n  draggableCursor?: string;\n  draggingCursor?: string;\n  keyboardShortcuts?: boolean;\n  styles?: MapTypeStyle[];\n  zoomControl?: boolean;\n  zoomControlOptions?: ZoomControlOptions;\n  streetViewControl?: boolean;\n  streetViewControlOptions?: StreetViewControlOptions;\n  scaleControl?: boolean;\n  scaleControlOptions?: ScaleControlOptions;\n  mapTypeControl?: boolean;\n  mapTypeControlOptions?: MapTypeControlOptions;\n  panControl?: boolean;\n  panControlOptions?: PanControlOptions;\n  rotateControl?: boolean;\n  rotateControlOptions?: RotateControlOptions;\n  fullscreenControl?: boolean;\n  fullscreenControlOptions?: FullscreenControlOptions;\n  mapTypeId?: string|MapTypeId;\n  clickableIcons?: boolean;\n  gestureHandling?: 'cooperative'|'greedy'|'none'|'auto';\n}\n\nexport interface MapTypeStyle {\n  elementType?: 'all'|'geometry'|'geometry.fill'|'geometry.stroke'|'labels'|'labels.icon'|\n      'labels.text'|'labels.text.fill'|'labels.text.stroke';\n  featureType?: 'administrative'|'administrative.country'|'administrative.land_parcel'|\n      'administrative.locality'|'administrative.neighborhood'|'administrative.province'|'all'|\n      'landscape'|'landscape.man_made'|'landscape.natural'|'landscape.natural.landcover'|\n      'landscape.natural.terrain'|'poi'|'poi.attraction'|'poi.business'|'poi.government'|\n      'poi.medical'|'poi.park'|'poi.place_of_worship'|'poi.school'|'poi.sports_complex'|'road'|\n      'road.arterial'|'road.highway'|'road.highway.controlled_access'|'road.local'|'transit'|\n      'transit.line'|'transit.station'|'transit.station.airport'|'transit.station.bus'|\n      'transit.station.rail'|'water';\n  stylers: MapTypeStyler[];\n}\n\n/**\n *  If more than one key is specified in a single MapTypeStyler, all but one will be ignored.\n */\nexport interface MapTypeStyler {\n  color?: string;\n  gamma?: number;\n  hue?: string;\n  invert_lightness?: boolean;\n  lightness?: number;\n  saturation?: number;\n  visibility?: string;\n  weight?: number;\n}\n\nexport interface InfoWindow extends MVCObject {\n  constructor(opts?: InfoWindowOptions): void;\n  close(): void;\n  getContent(): string|Node;\n  getPosition(): LatLng;\n  getZIndex(): number;\n  open(map?: GoogleMap, anchor?: MVCObject): void;\n  setContent(content: string|Node): void;\n  setOptions(options: InfoWindowOptions): void;\n  setPosition(position: LatLng|LatLngLiteral): void;\n  setZIndex(zIndex: number): void;\n}\n\nexport interface MVCObject { addListener(eventName: string, handler: Function): MapsEventListener; }\n\nexport interface MapsEventListener { remove(): void; }\n\nexport interface Size {\n  height: number;\n  width: number;\n  constructor(width: number, height: number, widthUnit?: string, heightUnit?: string): void;\n  equals(other: Size): boolean;\n  toString(): string;\n}\n\nexport interface InfoWindowOptions {\n  content?: string|Node;\n  disableAutoPan?: boolean;\n  maxWidth?: number;\n  pixelOffset?: Size;\n  position?: LatLng|LatLngLiteral;\n  zIndex?: number;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n  equals(other: Point): boolean;\n  toString(): string;\n}\n\nexport interface GoogleSymbol {\n  anchor?: Point;\n  fillColor?: string;\n  fillOpacity?: string;\n  labelOrigin?: Point;\n  path?: string;\n  rotation?: number;\n  scale?: number;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n}\n\nexport interface IconSequence {\n  fixedRotation?: boolean;\n  icon?: GoogleSymbol;\n  offset?: string;\n  repeat?: string;\n}\n\nexport interface PolylineOptions {\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  geodesic?: boolean;\n  icon?: Array<IconSequence>;\n  map?: GoogleMap;\n  path?: Array<LatLng>|Array<LatLng|LatLngLiteral>;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Polyline extends MVCObject {\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getPath(): Array<LatLng>;\n  getVisible(): boolean;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: PolylineOptions): void;\n  setPath(path: Array<LatLng|LatLngLiteral>): void;\n  setVisible(visible: boolean): void;\n}\n\n/**\n * PolyMouseEvent gets emitted when the user triggers mouse events on a polyline.\n */\nexport interface PolyMouseEvent extends MouseEvent {\n  edge: number;\n  path: number;\n  vertex: number;\n}\n\nexport interface PolygonOptions {\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  geodesic?: boolean;\n  icon?: Array<IconSequence>;\n  map?: GoogleMap;\n  paths?: Array<LatLng|LatLngLiteral>|Array<Array<LatLng|LatLngLiteral>>;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Polygon extends MVCObject {\n  zIndex: number;\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getPath(): Array<LatLng>;\n  getPaths(): Array<Array<LatLng>>;\n  getVisible(): boolean;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setPath(path: Array<LatLng>|Array<LatLng|LatLngLiteral>): void;\n  setOptions(options: PolygonOptions): void;\n  setPaths(paths: Array<Array<LatLng|LatLngLiteral>>|Array<LatLng|LatLngLiteral>): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface KmlLayer extends MVCObject {\n  getDefaultViewport(): LatLngBounds;\n  getMap(): GoogleMap;\n  getMetadata(): KmlLayerMetadata;\n  getStatus(): KmlLayerStatus;\n  getUrl(): string;\n  getZIndex(): number;\n  setMap(map: GoogleMap): void;\n  setOptions(options: KmlLayerOptions): void;\n  setUrl(url: string): void;\n  setZIndex(zIndex: number): void;\n}\n\n/**\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerStatus\n */\nexport type KmlLayerStatus = 'DOCUMENT_NOT_FOUND' |\n    'DOCUMENT_TOO_LARGE' | 'FETCH_ERROR' | 'INVALID_DOCUMENT' | 'INVALID_REQUEST' |\n    'LIMITS_EXCEEDED' | 'OK' | 'TIMED_OUT' | 'UNKNOWN';\n\n/**\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerMetadata\n */\nexport interface KmlLayerMetadata {\n  author: KmlAuthor;\n  description: string;\n  hasScreenOverlays: boolean;\n  name: string;\n  snippet: string;\n}\n\nexport interface KmlAuthor {\n  email: string;\n  name: string;\n  uri: string;\n}\n\nexport interface KmlLayerOptions {\n  clickable?: boolean;\n  map?: GoogleMap;\n  preserveViewport?: boolean;\n  screenOverlays?: boolean;\n  suppressInfoWindows?: boolean;\n  url?: string;\n  zIndex?: number;\n}\n\nexport interface KmlFeatureData {\n  author: KmlAuthor;\n  description: string;\n  id: string;\n  infoWindowHtml: string;\n  name: string;\n  snippet: string;\n}\n\nexport interface KmlMouseEvent extends MouseEvent {\n  featureData: KmlFeatureData;\n  pixelOffset: Size;\n}\n\nexport interface Data extends MVCObject {\n  features: Feature[];\n  constructor(options?: DataOptions): void;\n  addGeoJson(geoJson: Object, options?: GeoJsonOptions): Feature[];\n  remove(feature: Feature): void;\n  setControlPosition(controlPosition: ControlPosition): void;\n  setControls(controls: string[]): void;\n  setDrawingMode(drawingMode: string): void;\n  setMap(map: GoogleMap): void;\n  /* tslint:disable */\n  /*\n  * Tslint configuration check-parameters will prompt errors for these lines of code.\n  * https://palantir.github.io/tslint/rules/no-unused-variable/\n  */\n  setStyle(style: () => void): void;\n  forEach(callback: (feature: Feature) => void): void;\n  /* tslint:enable */\n}\n\nexport interface Feature extends MVCObject {\n  id?: number|string|undefined;\n  geometry: Geometry;\n  properties: any;\n}\n\nexport interface DataOptions {\n  controlPosition?: ControlPosition;\n  controls?: string[];\n  drawingMode?: string;\n  featureFactory?: (geometry: Geometry) => Feature;\n  map?: GoogleMap;\n  style?: () => void;\n}\n\nexport interface DataMouseEvent extends MouseEvent {\n  feature: Feature;\n}\n\nexport interface GeoJsonOptions {\n  idPropertyName: string;\n}\n\nexport interface Geometry {\n  type: string;\n}\n\n/**\n * Identifiers used to specify the placement of controls on the map. Controls are\n * positioned relative to other controls in the same layout position. Controls that\n * are added first are positioned closer to the edge of the map.\n */\nexport enum ControlPosition {\n  BOTTOM_CENTER,\n  BOTTOM_LEFT,\n  BOTTOM_RIGHT,\n  LEFT_BOTTOM,\n  LEFT_CENTER,\n  LEFT_TOP,\n  RIGHT_BOTTOM,\n  RIGHT_CENTER,\n  RIGHT_TOP,\n  TOP_CENTER,\n  TOP_LEFT,\n  TOP_RIGHT\n}\n\nexport enum MapTypeId {\n  /** This map type displays a transparent layer of major streets on satellite images. */\n  hybrid,\n  /** This map type displays a normal street map. */\n  roadmap,\n  /** This map type displays satellite images. */\n  satellite,\n  /** This map type displays maps with physical features such as terrain and vegetation. */\n  terrain\n}\n\n/***** Controls *****/\n/** Options for the rendering of the map type control. */\nexport interface MapTypeControlOptions {\n  /** IDs of map types to show in the control. */\n  mapTypeIds?: (MapTypeId|string)[];\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_RIGHT.\n   */\n  position?: ControlPosition;\n  /** Style id. Used to select what style of map type control to display. */\n  style?: MapTypeControlStyle;\n}\n\nexport enum MapTypeControlStyle {\n  DEFAULT,\n  DROPDOWN_MENU,\n  HORIZONTAL_BAR\n}\n\nexport interface OverviewMapControlOptions {\n  opened?: boolean;\n}\n\n/** Options for the rendering of the pan control. */\nexport interface PanControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the rendering of the rotate control. */\nexport interface RotateControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the rendering of the scale control. */\nexport interface ScaleControlOptions {\n  /** Style id. Used to select what style of scale control to display. */\n  style?: ScaleControlStyle;\n}\n\nexport enum ScaleControlStyle {\n  DEFAULT\n}\n\n/** Options for the rendering of the Street View pegman control on the map. */\nexport interface StreetViewControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map. The\n   * default position is embedded within the navigation (zoom and pan) controls.\n   * If this position is empty or the same as that specified in the\n   * zoomControlOptions or panControlOptions, the Street View control will be\n   * displayed as part of the navigation controls. Otherwise, it will be displayed\n   * separately.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the rendering of the zoom control. */\nexport interface ZoomControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: ControlPosition;\n  style?: ZoomControlStyle;\n}\n\nexport enum ZoomControlStyle {\n  DEFAULT,\n  LARGE,\n  SMALL\n}\n\n/** Options for the rendering of the fullscreen control. */\nexport interface FullscreenControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is RIGHT_TOP.\n   */\n  position?: ControlPosition;\n}\n\nexport declare class OverlayView {\n    public set(key: string, value: any): void;\n    public get(key: string): any;\n    public setValues(options: any): void;\n    public getPanes(): any;\n    public getProjection(): any;\n    public getMap(): GoogleMap;\n}\n","import { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\nimport { IBox } from '../../interfaces/ibox';\nimport { IMapOptions } from '../../interfaces/imap-options';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport * as GoogleMapTypes from './google-map-types';\nimport { MapTypeId } from '../../models/map-type-id';\n\ndeclare var google: any;\n\n\n/**\n * This class contains helperfunctions to map various interfaces used to represent options and structures into the\n * corresponding Google Maps specific implementations.\n *\n * @export\n */\nexport class GoogleConversions {\n\n    ///\n    /// Field declarations\n    ///\n\n    /**\n     * Map option attributes that are supported for conversion to Google Map properties\n     *\n     * @memberof GoogleConversions\n     */\n    private static _mapOptionsAttributes: string[] = [\n        'backgroundColor',\n        'center',\n        'clickableIcons',\n        'customMapStyleGoogle',\n        'disableDefaultUI',\n        'disableDoubleClickZoom',\n        'draggable',\n        'draggableCursor',\n        'draggingCursor',\n        'disableZooming',\n        'fullscreenControl',\n        'fullscreenControlOptions',\n        'gestureHandling',\n        'heading',\n        'keyboardShortcuts',\n        'mapTypeControl',\n        'mapTypeControlOptions',\n        'mapTypeId',\n        'maxZoom',\n        'minZoom',\n        'noClear',\n        'panControl',\n        'panControlOptions',\n        'rotateControl',\n        'rotateControlOptions',\n        'scaleControl',\n        'scaleControlOptions',\n        'scrollwheel',\n        'showMapTypeSelector',\n        'streetView',\n        'streetViewControl',\n        'streetViewControlOptions',\n        'styles',\n        'tilt',\n        'zoom',\n        'zoomControl',\n        'zoomControlOptions'\n    ];\n\n    /**\n     * InfoWindow option attributes that are supported for conversion to Google Map properties\n     *\n     * @memberof GoogleConversions\n     */\n    private static _infoWindowOptionsAttributes: string[] = [\n        'actions',\n        'description',\n        'htmlContent',\n        'id',\n        'position',\n        'pixelOffset',\n        'showCloseButton',\n        'showPointer',\n        'pushpin',\n        'title',\n        'titleClickHandler',\n        'typeName',\n        'visible',\n        'width',\n        'height'\n    ];\n\n    /**\n     * Marker option attributes that are supported for conversion to Google Map properties\n     *\n     * @memberof GoogleConversions\n     */\n    private static _markerOptionsAttributes: string[] = [\n        'anchor',\n        'position',\n        'title',\n        'text',\n        'label',\n        'draggable',\n        'icon',\n        'width',\n        'height',\n        'iconInfo',\n        'metadata',\n        'visible'\n    ];\n\n    /**\n     * Cluster option attributes that are supported for conversion to Google Map properties\n     *\n     * @memberof GoogleConversions\n     */\n    private static _clusterOptionsAttributes: string[] = [\n        'callback',\n        'clusteredPinCallback',\n        'clusteringEnabled',\n        'gridSize',\n        'layerOffset',\n        'placementMode',\n        'visible',\n        'zIndex'\n    ];\n\n    /**\n     * Polygon option attributes that are supported for conversion to Google Map properties\n     *\n     * @memberof GoogleConversions\n     */\n    private static _polygonOptionsAttributes: string[] = [\n        'clickable',\n        'draggable',\n        'editable',\n        'fillColor',\n        'fillOpacity',\n        'geodesic',\n        'paths',\n        'strokeColor',\n        'strokeOpacity',\n        'strokeWeight',\n        'visible',\n        'zIndex'\n    ];\n\n    /**\n     * Polyline option attributes that are supported for conversion to Google Map properties\n     *\n     * @memberof GoogleConversions\n     */\n    private static _polylineOptionsAttributes: string[] = [\n        'clickable',\n        'draggable',\n        'editable',\n        'geodesic',\n        'strokeColor',\n        'strokeOpacity',\n        'strokeWeight',\n        'visible',\n        'zIndex'\n    ];\n\n    /**\n     * Maps an IBox object to a GoogleMapTypes.LatLngBoundsLiteral object.\n     *\n     * @param bounds - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslateBounds(bounds: IBox): GoogleMapTypes.LatLngBoundsLiteral {\n        const b: GoogleMapTypes.LatLngBoundsLiteral = {\n            east: bounds.maxLongitude,\n            north: bounds.maxLatitude,\n            south: bounds.minLatitude,\n            west: bounds.minLongitude,\n        };\n        return b;\n    }\n\n    /**\n     * Maps an IInfoWindowOptions object to a GoogleMapTypes.InfoWindowOptions object.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslateInfoWindowOptions(options: IInfoWindowOptions): GoogleMapTypes.InfoWindowOptions {\n        const o: GoogleMapTypes.InfoWindowOptions | any = {};\n        Object.keys(options)\n            .filter(k => GoogleConversions._infoWindowOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'htmlContent') {\n                    o.content = (<any>options)[k];\n                } else {\n                    o[k] = (<any>options)[k];\n                }\n            });\n        if (o.content == null || o.content === '') {\n            if (options.title !== '' && options.description !== '') {\n                o.content = `${options.title}: ${options.description}`;\n            }\n            else if (options.description !== '') { o.content = options.description; }\n            else { o.content = options.title; }\n        }\n        return o;\n    }\n\n    /**\n     * Maps an ILatLong object to a GoogleMapTypes.LatLngLiteral object.\n     *\n     * @param latlong - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslateLocation(latlong: ILatLong): GoogleMapTypes.LatLngLiteral {\n        const l: GoogleMapTypes.LatLngLiteral = { lat: latlong.latitude, lng: latlong.longitude };\n        return l;\n    }\n\n    /**\n     * Maps an GoogleMapTypes.LatLngLiteral object to a ILatLong object.\n     *\n     * @param latlng - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslateLatLng(latlng: GoogleMapTypes.LatLngLiteral): ILatLong {\n        const l: ILatLong = { latitude: latlng.lat, longitude: latlng.lng };\n        return l;\n    }\n\n    /**\n     * Maps an ILatLong object to a GoogleMapTypes.LatLng object.\n     *\n     * @param latlong - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslateLocationObject(latlong: ILatLong): GoogleMapTypes.LatLng {\n        const l: GoogleMapTypes.LatLng = new google.maps.LatLng(latlong.latitude, latlong.longitude);\n        return l;\n    }\n\n    /**\n     * Maps an GoogleMapTypes.LatLng object to a ILatLong object.\n     *\n     * @param latlng - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslateLatLngObject(latlng: GoogleMapTypes.LatLng): ILatLong {\n        const l: ILatLong = { latitude: latlng.lat(), longitude: latlng.lng() };\n        return l;\n    }\n\n    /**\n     * Maps an ILatLong array to a array of GoogleMapTypes.LatLng object.\n     *\n     * @param latlongArray - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslateLocationObjectArray(latlongArray: Array<ILatLong>): Array<GoogleMapTypes.LatLng> {\n        // use for loop for performance in case we deal with large numbers of points and paths...\n        const p: Array<GoogleMapTypes.LatLng> = new Array<GoogleMapTypes.LatLng>();\n        for (let i = 0; i < latlongArray.length; i++) {\n            p.push(GoogleConversions.TranslateLocationObject(latlongArray[i]));\n        }\n        return p;\n    }\n\n    /**\n     * Maps a MapTypeId object to a Google maptype string.\n     *\n     * @param mapTypeId - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslateMapTypeId(mapTypeId: MapTypeId): string {\n        switch (mapTypeId) {\n            case MapTypeId.road: return GoogleMapTypes.MapTypeId[GoogleMapTypes.MapTypeId.roadmap];\n            case MapTypeId.grayscale: return GoogleMapTypes.MapTypeId[GoogleMapTypes.MapTypeId.terrain];\n            case MapTypeId.hybrid: return GoogleMapTypes.MapTypeId[GoogleMapTypes.MapTypeId.hybrid];\n            case MapTypeId.ordnanceSurvey: return GoogleMapTypes.MapTypeId[GoogleMapTypes.MapTypeId.terrain];\n            default: return GoogleMapTypes.MapTypeId[GoogleMapTypes.MapTypeId.satellite];\n        }\n    }\n\n    /**\n     * Maps an IMarkerOptions object to a GoogleMapTypes.MarkerOptions object.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Promise that when resolved contains the mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslateMarkerOptions(options: IMarkerOptions): GoogleMapTypes.MarkerOptions {\n        const o: GoogleMapTypes.MarkerOptions | any = {};\n        Object.keys(options)\n            .filter(k => GoogleConversions._markerOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'position') {\n                    const latlng = GoogleConversions.TranslateLocationObject(options[k]);\n                    o.position = latlng;\n                }\n                else {\n                    o[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n    /**\n     * Maps an IMapOptions object to a GoogleMapTypes.MapOptions object.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslateOptions(options: IMapOptions): GoogleMapTypes.MapOptions {\n        const o: GoogleMapTypes.MapOptions = {};\n        Object.keys(options)\n            .filter(k => GoogleConversions._mapOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'center') {\n                    o.center = GoogleConversions.TranslateLocation(options.center);\n                }\n                else if (k === 'mapTypeId') {\n                    o.mapTypeId = GoogleConversions.TranslateMapTypeId(options.mapTypeId);\n                }\n                else if (k === 'disableZooming') {\n                    o.gestureHandling = 'none';\n                    o.zoomControl =  false;\n                }\n                else if (k === 'showMapTypeSelector') {\n                    o.mapTypeControl = false;\n                }\n                else if (k === 'customMapStyleGoogle') {\n                    o.styles = <GoogleMapTypes.MapTypeStyle[]><any> options.customMapStyleGoogle\n                }\n                else {\n                    (<any>o)[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n    /**\n     * Translates an array of locations or an array or arrays of location to and array of arrays of Bing Map Locations\n     *\n     * @param paths - ILatLong based locations to convert.\n     * @returns - converted locations.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslatePaths(paths: Array<ILatLong> | Array<Array<ILatLong>>): Array<Array<GoogleMapTypes.LatLng>> {\n        const p: Array<Array<GoogleMapTypes.LatLng>> = new Array<Array<GoogleMapTypes.LatLng>>();\n        if (paths == null || !Array.isArray(paths) || paths.length === 0) {\n            p.push(new Array<GoogleMapTypes.LatLng>());\n        }\n        else if (Array.isArray(paths[0])) {\n            // parameter is an array or arrays\n            // use for loop for performance in case we deal with large numbers of points and paths...\n            const p1 = <Array<Array<ILatLong>>>paths;\n            for (let i = 0; i < p1.length; i++) {\n                p.push(GoogleConversions.TranslateLocationObjectArray(p1[i]));\n            }\n        }\n        else {\n            // parameter is a simple array....\n            p.push(GoogleConversions.TranslateLocationObjectArray(<Array<ILatLong>>paths));\n        }\n        return p;\n    }\n\n    /**\n     *  Maps an IPolygonOptions object to a GoogleMapTypes.PolygonOptions.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslatePolygonOptions(options: IPolygonOptions): GoogleMapTypes.PolygonOptions {\n        const o: GoogleMapTypes.PolygonOptions | any = {};\n        Object.keys(options)\n            .filter(k => GoogleConversions._polygonOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                if (k === 'paths') {\n                    if (!Array.isArray(options.paths)) { return; }\n                    if (options.paths.length === 0) {\n                        o.paths = new Array<GoogleMapTypes.LatLng>();\n                    }\n                    else if (Array.isArray(options.paths[0])) {\n                        o.paths = new Array<Array<GoogleMapTypes.LatLngLiteral>>();\n                        // use for loop for performance in case we deal with large numbers of points and paths..\n                        const p1 = <Array<Array<ILatLong>>>options.paths;\n                        for (let i = 0; i < p1.length; i++) {\n                            o.paths[i] = new Array<GoogleMapTypes.LatLngLiteral>();\n                            for (let j = 0; j < p1[i].length; j++) {\n                                o.paths[i][j] = {lat: p1[i][j].latitude, lng: p1[i][j].longitude};\n                            }\n                        }\n                    }\n                    else {\n                        o.paths = new Array<GoogleMapTypes.LatLngLiteral>();\n                        // use for loop for performance in case we deal with large numbers of points and paths..\n                        const p1 = <Array<ILatLong>>options.paths;\n                        for (let i = 0; i < p1.length; i++) {\n                            o.paths[i] = {lat: p1[i].latitude, lng: p1[i].longitude};\n                        }\n                    }\n                }\n                else {\n                    o[k] = (<any>options)[k];\n                }\n            });\n        return o;\n    }\n\n    /**\n     *  Maps an IPolylineOptions object to a GoogleMapTypes.PolylineOptions.\n     *\n     * @param options - Object to be mapped.\n     * @returns - Mapped object.\n     *\n     * @memberof GoogleConversions\n     */\n    public static TranslatePolylineOptions(options: IPolylineOptions): GoogleMapTypes.PolylineOptions {\n        const o: GoogleMapTypes.PolylineOptions | any = {};\n        Object.keys(options)\n            .filter(k => GoogleConversions._polylineOptionsAttributes.indexOf(k) !== -1)\n            .forEach((k) => {\n                o[k] = (<any>options)[k];\n            });\n        return o;\n    }\n}\n","import { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { GoogleConversions } from '../../services/google/google-conversions';\nimport { GoogleMapService} from '../../services/google/google-map.service';\nimport { InfoWindow } from '../info-window';\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\n\ndeclare var google: any;\n\n/**\n * Concrete implementation for a {@link InfoWindow}} model for Google Maps.\n *\n * @export\n */\nexport class GoogleInfoWindow implements InfoWindow {\n\n    private _isOpen: boolean;\n\n    /**\n     * Gets whether the info box is currently open.\n     *\n     * @readonly\n     * @memberof InfoWGoogleInfoWindowindow\n     */\n    public get IsOpen(): boolean {\n        if (this._isOpen === true) { return true; }\n        return false;\n    }\n\n    /**\n     * Gets the underlying native object.\n     *\n     * @property\n     * @readonly\n     */\n    public get NativePrimitve(): GoogleMapTypes.InfoWindow {\n        return this._infoWindow;\n    }\n\n    ///\n    /// constructor\n    ///\n\n    /**\n     * Creates an instance of GoogleInfoWindow.\n     * @param _infoWindow - A {@link GoogleMapTypes.InfoWindow} instance underlying the model.\n     * @param _mapService - An instance of the {@link GoogleMapService}.\n     * @memberof GoogleInfoWindow\n     */\n    constructor(private _infoWindow: GoogleMapTypes.InfoWindow, private _mapService: GoogleMapService) { }\n\n    ///\n    /// Public methods\n    ///\n\n   /**\n     * Adds an event listener to the InfoWindow.\n     *\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\n     * @param fn - Delegate invoked when the event occurs.\n     *\n     * @memberof GoogleInfoWindow\n     * @method\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        this._infoWindow.addListener(eventType, (e: any) => {\n            if (eventType === 'closeclick') { this._isOpen = false; }\n            fn(e);\n        });\n    }\n\n    /**\n     *\n     * Closes the info window.\n     *\n     * @memberof GoogleInfoWindow\n     * @method\n     */\n    public Close() {\n        this._isOpen = false;\n        this._infoWindow.close();\n    }\n\n    /**\n     * Gets the position of the info window\n     *\n     * @returns - The geo coordinates of the info window.\n     *\n     * @memberof GoogleInfoWindow\n     * @method\n     */\n    public GetPosition(): ILatLong {\n        return GoogleConversions.TranslateLatLngObject(this._infoWindow.getPosition());\n    }\n\n    /**\n     * Opens the info window\n     *\n     * @param [anchor] - Optional Anchor.\n     *\n     * @memberof GoogleInfoWindow\n     * @method\n     */\n    public Open(anchor?: any) {\n        this._mapService.MapPromise.then(m => {\n            this._isOpen = true;\n            this._infoWindow.open(m, anchor);\n        });\n    }\n\n    /**\n     * Sets the info window options\n     *\n     * @param options - The options to set. This object will be merged with the existing options.\n     *\n     * @memberof GoogleInfoWindow\n     * @method\n     */\n    public SetOptions(options: IInfoWindowOptions): void {\n        const o: GoogleMapTypes.InfoWindowOptions = GoogleConversions.TranslateInfoWindowOptions(options);\n        this._infoWindow.setOptions(o);\n    }\n\n    /**\n     * Sets the info window position\n     *\n     * @param position - Geo coordinates at which to anchor the info window.\n     *\n     * @memberof GoogleInfoWindow\n     * @method\n     */\n    public SetPosition(position: ILatLong): void {\n        const l: GoogleMapTypes.LatLngLiteral = GoogleConversions.TranslateLocation(position);\n        this._infoWindow.setPosition(l);\n    }\n}\n","import { GoogleConversions } from '../../services/google/google-conversions';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { Marker } from '../marker';\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\n\n/**\n * Concrete implementation of the {@link Marker} contract for the Google Maps map architecture.\n *\n * @export\n */\nexport class GoogleMarker implements Marker {\n\n    ///\n    /// Field declarations\n    ///\n    private _metadata: Map<string, any> = new Map<string, any>();\n    private _isFirst = false;\n    private _isLast = true;\n\n    ///\n    /// Public properties\n    ///\n\n    /**\n     * Indicates that the marker is the first marker in a set.\n     *\n     * @memberof Marker\n     */\n    public get IsFirst(): boolean { return this._isFirst; }\n    public set IsFirst(val: boolean) { this._isFirst = val; }\n\n    /**\n     * Indicates that the marker is the last marker in the set.\n     *\n     * @memberof Marker\n     */\n    public get IsLast(): boolean { return this._isLast; }\n    public set IsLast(val: boolean) { this._isLast = val; }\n\n    /**\n     * Gets the marker metadata.\n     *\n     * @readonly\n     * @memberof BingMarker\n     */\n    public get Metadata(): Map<string, any> { return this._metadata; }\n\n    /**\n     * Gets the native primitve implementing the marker, in this case {@link Microsoft.Maps.Pushpin}\n     *\n     * @readonly\n     * @abstract\n     * @memberof BingMarker\n     */\n    public get NativePrimitve(): GoogleMapTypes.Marker { return this._marker; }\n\n    /**\n     * Gets the Location of the marker\n     *\n     * @readonly\n     * @abstract\n     * @memberof BingMarker\n     */\n    public get Location(): ILatLong {\n        const l: GoogleMapTypes.LatLng = this._marker.getPosition();\n        return {\n            latitude: l.lat(),\n            longitude: l.lng()\n        };\n    }\n\n    ///\n    /// Constructors\n    ///\n\n    /**\n     * Creates an instance of GoogleMarker.\n     * @param _marker\n     *\n     * @memberof GoogleMarker\n     */\n    constructor(private _marker: GoogleMapTypes.Marker) { }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Adds an event listener to the marker.\n     *\n     * @param eventType - String containing the event for which to register the listener (e.g. \"click\")\n     * @param fn - Delegate invoked when the event occurs.\n     *\n     * @memberof GoogleMarker\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        this._marker.addListener(eventType, fn);\n    }\n\n    /**\n     * Deletes the marker.\n     *\n     *\n     * @memberof GoogleMarker\n     */\n    public DeleteMarker(): void {\n        this._marker.setMap(null);\n    }\n\n    /**\n     * Gets the marker label\n     *\n     * @memberof GoogleMarker\n     */\n    public GetLabel(): string {\n        return this._marker.getLabel().text;\n    }\n\n    /**\n     * Gets whether the marker is visible.\n     *\n     * @returns - True if the marker is visible, false otherwise.\n     *\n     * @memberof GoogleMarker\n     */\n    public GetVisible(): boolean {\n        return this._marker.getVisible();\n    }\n\n    /**\n     * Sets the anchor for the marker. Use this to adjust the root location for the marker to accomodate various marker image sizes.\n     *\n     * @param anchor - Point coordinates for the marker anchor.\n     *\n     * @memberof GoogleMarker\n     */\n    public SetAnchor(anchor: any): void {\n        // not implemented\n        // TODO: we need to switch the model to complex icons for google to\n        // support anchors, sizes and origins.\n        // https://developers.google.com/maps/documentation/javascript/markers\n    }\n\n    /**\n     * Sets the draggability of a marker.\n     *\n     * @param draggable - True to mark the marker as draggable, false otherwise.\n     *\n     * @memberof GoogleMarker\n     */\n    public SetDraggable(draggable: boolean): void {\n        this._marker.setDraggable(draggable);\n    }\n\n    /**\n     * Sets the icon for the marker.\n     *\n     * @param icon - String containing the icon in various forms (url, data url, etc.)\n     *\n     * @memberof GoogleMarker\n     */\n    public SetIcon(icon: string): void {\n        this._marker.setIcon(icon);\n    }\n\n    /**\n     * Sets the marker label.\n     *\n     * @param label - String containing the label to set.\n     *\n     * @memberof GoogleMarker\n     */\n    public SetLabel(label: string): void {\n        this._marker.setLabel(label);\n    }\n\n    /**\n     * Sets the marker position.\n     *\n     * @param latLng - Geo coordinates to set the marker position to.\n     *\n     * @memberof GoogleMarker\n     */\n    public SetPosition(latLng: ILatLong): void {\n        const p: GoogleMapTypes.LatLng = GoogleConversions.TranslateLocationObject(latLng);\n        this._marker.setPosition(p);\n    }\n\n    /**\n     * Sets the marker title.\n     *\n     * @param title - String containing the title to set.\n     *\n     * @memberof GoogleMarker\n     */\n    public SetTitle(title: string): void {\n        this._marker.setTitle(title);\n    }\n\n    /**\n     * Sets the marker options.\n     *\n     * @param options - {@link IMarkerOptions} object containing the marker options to set. The supplied options are\n     * merged with the underlying marker options.\n     *\n     * @memberof GoogleMarker\n     */\n    public SetOptions(options: IMarkerOptions): void {\n        const o: GoogleMapTypes.MarkerOptions = GoogleConversions.TranslateMarkerOptions(options);\n        this._marker.setOptions(o);\n    }\n\n    /**\n     * Sets whether the marker is visible.\n     *\n     * @param visible - True to set the marker visible, false otherwise.\n     *\n     * @memberof GoogleMarker\n     */\n    public SetVisible(visible: boolean): void {\n        this._marker.setVisible(visible);\n    }\n\n}\n","import * as GoogleMapTypes from '../../services/google/google-map-types';\nimport { MapLabel } from '../map-label';\nimport { ILabelOptions } from '../../interfaces/ilabel-options';\nimport { Extender } from '../extender';\n\n\ndeclare var google: any;\n\n/**\n * Implements map a labled to be placed on the map.\n *\n * @export\n */\nexport class GoogleMapLabel extends MapLabel {\n\n    /**\n     * Returns the default label style for the platform\n     *\n     * @readonly\n     * @abstract\n     * @memberof GoogleMapLabel\n     */\n    public get DefaultLabelStyle(): ILabelOptions {\n        return {\n            fontSize: 12,\n            fontFamily: 'sans-serif',\n            fontColor: '#ffffff',\n            strokeWeight: 3,\n            strokeColor: '#000000'\n        };\n    }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates a new MapLabel\n     * @param options Optional properties to set.\n     */\n    constructor(options: { [key: string]: any }) {\n        options.fontSize = options.fontSize || 12;\n        options.fontColor = options.fontColor || '#ffffff';\n        options.strokeWeight = options.strokeWeight || 3;\n        options.strokeColor = options.strokeColor || '#000000';\n        super(options);\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Gets the value of a setting.\n     *\n     * @param key - Key specifying the setting.\n     * @returns - The value of the setting.\n     * @memberof MapLabel\n     * @method\n     */\n    public Get(key: string): any {\n        return (<any>this).get(key);\n    }\n\n    /**\n     * Gets the map associted with the label.\n     *\n     * @memberof GoogleMapLabel\n     * @method\n     */\n    public GetMap(): GoogleMapTypes.GoogleMap {\n        return (<any>this).getMap();\n    }\n\n    /**\n     * Set the value for a setting.\n     *\n     * @param key - Key specifying the setting.\n     * @param val - The value to set.\n     * @memberof MapLabel\n     * @method\n     */\n    public Set(key: string, val: any): void {\n        if (key === 'position' && val.hasOwnProperty('latitude') && val.hasOwnProperty('longitude')) {\n            val = new google.maps.LatLng(val.latitude, val.longitude);\n        }\n        if (this.Get(key) !== val) {\n            (<any>this).set(key, val);\n        }\n    }\n\n    /**\n     * Sets the map for the label. Settings this to null remove the label from hte map.\n     *\n     * @param map - Map to associated with the label.\n     * @memberof GoogleMapLabel\n     * @method\n     */\n    public SetMap(map: GoogleMapTypes.GoogleMap): void {\n        (<any>this).setMap(map);\n    }\n\n    /**\n     * Applies settings to the object\n     *\n     * @param options - An object containing the settings key value pairs.\n     * @memberof MapLabel\n     * @method\n     */\n    public SetValues(options: { [key: string]: any }): void {\n        for (const key in options) {\n            if (key !== '') {\n                if (key === 'position' &&  options[key].hasOwnProperty('latitude') &&  options[key].hasOwnProperty('longitude')) {\n                    options[key] = new google.maps.LatLng( options[key].latitude,  options[key].longitude);\n                }\n                if (this.Get(key) === options[key]) { delete options[key]; }\n            }\n        }\n        (<any>this).setValues(options);\n    }\n\n    ///\n    /// Protected methods\n    ///\n\n    /**\n     * Draws the label on the map.\n     * @memberof GoogleMapLabel\n     * @method\n     * @protected\n     */\n    protected Draw(): void {\n        const projection = (<any>this).getProjection();\n        const visibility: string = this.GetVisible();\n        if (!projection) {\n            // The map projection is not ready yet so do nothing\n            return;\n        }\n        if (!this._canvas) {\n            // onAdd has not been called yet.\n            return;\n        }\n        const style: CSSStyleDeclaration = this._canvas.style;\n        if (visibility !== '') {\n            // label is not visible, don't calculate positions etc.\n            style['visibility'] = visibility;\n            return;\n        }\n\n        let offset: GoogleMapTypes.Point = this.Get('offset');\n        let latLng: GoogleMapTypes.LatLng|GoogleMapTypes.LatLngLiteral = this.Get('position');\n        if (!latLng) { return; }\n        if (!(latLng instanceof google.maps.LatLng)) { latLng = new google.maps.LatLng(latLng.lat, latLng.lng); }\n        if (!offset) { offset = new google.maps.Point(0, 0); }\n\n        const pos = projection.fromLatLngToDivPixel(latLng);\n        style['top'] = (pos.y + offset.y) + 'px';\n        style['left'] = (pos.x + offset.x) + 'px';\n        style['visibility'] = visibility;\n    }\n\n    /**\n     * Delegate called when the label is added to the map. Generates and configures\n     * the canvas.\n     *\n     * @memberof GoogleMapLabel\n     * @method\n     * @protected\n     */\n    protected OnAdd() {\n        this._canvas = document.createElement('canvas');\n        const style: CSSStyleDeclaration = this._canvas.style;\n        style.position = 'absolute';\n\n        const ctx: CanvasRenderingContext2D = this._canvas.getContext('2d');\n        ctx.lineJoin = 'round';\n        ctx.textBaseline = 'top';\n\n        this.DrawCanvas();\n        const panes = (<any>this).getPanes();\n        if (panes) {\n            panes.overlayLayer.appendChild(this._canvas);\n                // 4: floatPane (infowindow)\n                // 3: overlayMouseTarget (mouse events)\n                // 2: markerLayer (marker images)\n                // 1: overlayLayer (polygons, polylines, ground overlays, tile layer overlays)\n                // 0: mapPane (lowest pane above the map tiles)\n        }\n    }\n}\n\n/**\n * Helper function to extend the OverlayView into the MapLabel\n *\n * @export\n * @method\n */\n\n\nexport function MixinMapLabelWithOverlayView() {\n\n    new Extender(GoogleMapLabel)\n        .Extend(new google.maps.OverlayView)\n        .Map('changed', 'Changed')\n        .Map('onAdd', 'OnAdd')\n        .Map('draw', 'Draw')\n        .Map('onRemove', 'OnRemove');\n}\n","import { ILatLong } from '../../interfaces/ilatlong';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { IPolygonEvent } from '../../interfaces/ipolygon-event';\nimport { GoogleConversions } from '../../services/google/google-conversions';\nimport { Polygon } from '../polygon';\nimport { GoogleMapLabel } from './google-label';\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\n\ndeclare var google: any;\n\n/**\n * Concrete implementation for a polygon model for Google Maps.\n *\n * @export\n */\nexport class GooglePolygon extends Polygon implements Polygon {\n\n    private _title: string = '';\n    private _showLabel: boolean = false;\n    private _showTooltip: boolean = false;\n    private _maxZoom: number = -1;\n    private _minZoom: number = -1;\n    private _label: GoogleMapLabel = null;\n    private _tooltip: GoogleMapLabel = null;\n    private _tooltipVisible: boolean = false;\n    private _hasToolTipReceiver: boolean = false;\n    private _originalPath: Array<Array<ILatLong>>;\n    private _mouseOverListener: GoogleMapTypes.MapsEventListener = null;\n    private _mouseOutListener: GoogleMapTypes.MapsEventListener = null;\n    private _mouseMoveListener: GoogleMapTypes.MapsEventListener = null;\n    private _metadata: Map<string, any> = new Map<string, any>();\n    private _editingCompleteEmitter: (event: IPolygonEvent) => void = null;\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Gets or sets the maximum zoom at which the label is displayed. Ignored or ShowLabel is false.\n     *\n     * @memberof GooglePolygon\n     * @property\n     */\n    public get LabelMaxZoom(): number { return this._maxZoom; }\n    public set LabelMaxZoom(val: number) {\n        this._maxZoom = val;\n        this.ManageLabel();\n    }\n\n    /**\n     * Gets or sets the minimum zoom at which the label is displayed. Ignored or ShowLabel is false.\n     *\n     * @memberof GooglePolygon\n     * @property\n     */\n    public get LabelMinZoom(): number { return this._minZoom; }\n    public set LabelMinZoom(val: number) {\n        this._minZoom = val;\n        this.ManageLabel();\n    }\n\n    /**\n     * Gets the polygon metadata.\n     *\n     * @readonly\n     * @memberof GoolePolygon\n     */\n    public get Metadata(): Map<string, any> { return this._metadata; }\n\n    /**\n     * Gets the native primitve implementing the polygon, in this case {@link GoogleMapTypes.Polygon}\n     *\n     * @readonly\n     * @memberof GooglePolygon\n     */\n    public get NativePrimitve(): GoogleMapTypes.Polygon { return this._polygon; }\n\n    /**\n     * Gets or sets whether to show the label\n     *\n     * @abstract\n     * @memberof GooglePolygon\n     * @property\n     */\n    public get ShowLabel(): boolean { return this._showLabel; }\n    public set ShowLabel(val: boolean) {\n        this._showLabel = val;\n        this.ManageLabel();\n    }\n\n    /**\n     * Gets or sets whether to show the tooltip\n     *\n     * @abstract\n     * @memberof GooglePolygon\n     * @property\n     */\n    public get ShowTooltip(): boolean { return this._showTooltip; }\n    public set ShowTooltip(val: boolean) {\n        this._showTooltip = val;\n        this.ManageTooltip();\n    }\n\n    /**\n     * Gets or sets the title off the polygon\n     *\n     * @abstract\n     * @memberof GooglePolygon\n     * @property\n     */\n    public get Title(): string { return this._title; }\n    public set Title(val: string) {\n        this._title = val;\n        this.ManageLabel();\n        this.ManageTooltip();\n    }\n\n    ///\n    /// constructor\n    ///\n\n    /**\n     * Creates an instance of GooglePolygon.\n     * @param _polygon - The {@link GoogleMapTypes.Polygon} underlying the model.\n     *\n     * @memberof GooglePolygon\n     */\n    constructor(private _polygon: GoogleMapTypes.Polygon) {\n        super();\n        this._originalPath = this.GetPaths();\n    }\n\n    /**\n     * Adds a delegate for an event.\n     *\n     * @param eventType - String containing the event name.\n     * @param fn - Delegate function to execute when the event occurs.\n\n     * @memberof GooglePolygon\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        const supportedEvents = [\n            'click',\n            'dblclick',\n            'drag', 'dragend',\n            'dragstart',\n            'mousedown',\n            'mousemove',\n            'mouseout',\n            'mouseover',\n            'mouseup',\n            'rightclick'\n        ];\n        if (supportedEvents.indexOf(eventType) !== -1) {\n            this._polygon.addListener(eventType, fn);\n        }\n        if (eventType === 'pathchanged') {\n            this._editingCompleteEmitter = <(event: IPolygonEvent) => void>fn;\n        }\n    }\n\n    /**\n     * Deleted the polygon.\n     *\n     * @memberof GooglePolygon\n     */\n    public Delete(): void {\n        this._polygon.setMap(null);\n        if (this._label) { this._label.Delete(); }\n        if (this._tooltip) { this._tooltip.Delete(); }\n    }\n\n    /**\n     * Gets whether the polygon is draggable.\n     *\n     * @returns - True if the polygon is dragable, false otherwise.\n     *\n     * @memberof GooglePolygon\n     */\n    public GetDraggable(): boolean {\n        return this._polygon.getDraggable();\n    }\n\n    /**\n     * Gets whether the polygon path can be edited.\n     *\n     * @returns - True if the path can be edited, false otherwise.\n     *\n     * @memberof GooglePolygon\n     */\n    public GetEditable(): boolean {\n        return this._polygon.getEditable();\n    }\n\n    /**\n     * Gets the polygon path.\n     *\n     * @returns - Array of {@link ILatLong} objects describing the polygon path.\n     *\n     * @memberof GooglePolygon\n     */\n    public GetPath(): Array<ILatLong> {\n        const p: Array<GoogleMapTypes.LatLng> = this._polygon.getPath();\n        const path: Array<ILatLong> = new Array<ILatLong>();\n        p.forEach(x => path.push({ latitude: x.lat(), longitude: x.lng() }));\n        return path;\n    }\n\n    /**\n     * Gets the polygon paths.\n     *\n     * @returns - Array of Array of {@link ILatLong} objects describing multiple polygon paths.\n     *\n     * @memberof GooglePolygon\n     */\n    public GetPaths(): Array<Array<ILatLong>> {\n        const p: Array<Array<GoogleMapTypes.LatLng>> = this._polygon.getPaths();\n        const paths: Array<Array<ILatLong>> = new Array<Array<ILatLong>>();\n        p.forEach(x => {\n            const path: Array<ILatLong> = new Array<ILatLong>();\n            x.forEach(y => path.push({ latitude: y.lat(), longitude: y.lng() }));\n            paths.push(path);\n        });\n        return paths;\n    }\n\n    /**\n     * Gets whether the polygon is visible.\n     *\n     * @returns - True if the polygon is visible, false otherwise.\n     *\n     * @memberof GooglePolygon\n     */\n    public GetVisible(): boolean {\n        return this._polygon.getVisible();\n    }\n\n    /**\n     * Sets whether the polygon is dragable.\n     *\n     * @param draggable - True to make the polygon dragable, false otherwise.\n     *\n     * @memberof GooglePolygon\n     */\n    public SetDraggable(draggable: boolean): void {\n        this._polygon.setDraggable(draggable);\n    }\n\n    /**\n     * Sets wether the polygon path is editable.\n     *\n     * @param editable - True to make polygon path editable, false otherwise.\n     *\n     * @memberof GooglePolygon\n     */\n    public SetEditable(editable: boolean): void {\n        const previous = this._polygon.getEditable();\n        this._polygon.setEditable(editable);\n        if (previous && !editable && this._editingCompleteEmitter) {\n            this._editingCompleteEmitter({\n                Click: null,\n                Polygon: this,\n                OriginalPath: this._originalPath,\n                NewPath: this.GetPaths()\n            });\n            this._originalPath = this.GetPaths();\n        }\n    }\n\n    /**\n     * Sets the polygon options\n     *\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\n     * already on the underlying model.\n     *\n     * @memberof GooglePolygon\n     */\n    public SetOptions(options: IPolygonOptions): void {\n        const o: GoogleMapTypes.PolygonOptions = GoogleConversions.TranslatePolygonOptions(options);\n\n        if (typeof o.editable !== 'undefined') {\n            this.SetEditable(o.editable);\n            delete o.editable;\n        }\n\n        this._polygon.setOptions(o);\n        if (options.visible != null && this._showLabel && this._label) { this._label.Set('hidden', !options.visible); }\n    }\n\n    /**\n     * Sets the polygon path.\n     *\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polygons path.\n     *\n     * @memberof GooglePolygon\n     */\n    public SetPath(path: Array<ILatLong>): void {\n        const p: Array<GoogleMapTypes.LatLng> = new Array<GoogleMapTypes.LatLng>();\n        path.forEach(x => p.push(new google.maps.LatLng(x.latitude, x.longitude)));\n        this._polygon.setPath(p);\n        this._originalPath = [path];\n        if (this._label) {\n            this._centroid = null;\n            this.ManageLabel();\n        }\n    }\n\n    /**\n     * Set the polygon path or paths.\n     *\n     * @param paths An Array of {@link ILatLong}\n     * (or array of arrays) describing the polygons path(s).\n     *\n     * @memberof GooglePolygon\n     */\n    public SetPaths(paths: Array<Array<ILatLong>> | Array<ILatLong>): void {\n        if (paths == null) { return; }\n        if (!Array.isArray(paths)) { return; }\n        if (paths.length === 0) {\n            this._polygon.setPaths(new Array<GoogleMapTypes.LatLng>());\n            if (this._label) {\n                this._label.Delete();\n                this._label = null;\n            }\n            return;\n        }\n        if (Array.isArray(paths[0])) {\n            // parameter is an array or arrays\n            const p: Array<Array<GoogleMapTypes.LatLng>> = new Array<Array<GoogleMapTypes.LatLng>>();\n            (<Array<Array<ILatLong>>>paths).forEach(path => {\n                const _p: Array<GoogleMapTypes.LatLng> = new Array<GoogleMapTypes.LatLng>();\n                path.forEach(x => _p.push(new google.maps.LatLng(x.latitude, x.longitude)));\n                p.push(_p);\n            });\n            this._polygon.setPaths(p);\n            this._originalPath = <Array<Array<ILatLong>>>paths;\n            if (this._label) {\n                this._centroid = null;\n                this.ManageLabel();\n            }\n        } else {\n            // parameter is a simple array....\n            this.SetPath(<Array<ILatLong>>paths);\n        }\n    }\n\n    /**\n     * Sets whether the polygon is visible.\n     *\n     * @param visible - True to set the polygon visible, false otherwise.\n     *\n     * @memberof GooglePolygon\n     */\n    public SetVisible(visible: boolean): void {\n        this._polygon.setVisible(visible);\n        if (this._showLabel && this._label) { this._label.Set('hidden', !visible); }\n    }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Configures the label for the polygon\n     * @memberof GooglePolygon\n     */\n    private ManageLabel(): void {\n        if (this.GetPath == null || this.GetPath().length === 0) { return; }\n        if (this._showLabel && this._title != null && this._title !== '') {\n            const o: { [key: string]: any } = {\n                text: this._title,\n                position: GoogleConversions.TranslateLocationObject(this.Centroid)\n            };\n            if (o.position == null) { return; }\n            if (this._minZoom !== -1) { o.minZoom = this._minZoom; }\n            if (this._maxZoom !== -1) { o.maxZoom = this._maxZoom; }\n            if (this._label == null) {\n                o.map = this.NativePrimitve.getMap();\n                o.zIndex = this.NativePrimitve.zIndex ? this.NativePrimitve.zIndex + 1 : 100;\n                this._label = new GoogleMapLabel(o);\n            }\n            else {\n                this._label.SetValues(o);\n            }\n            this._label.Set('hidden', !this.GetVisible());\n        }\n        else {\n            if (this._label) {\n                this._label.SetMap(null);\n                this._label = null;\n            }\n        }\n    }\n\n    /**\n     * Configures the tooltip for the polygon\n     * @memberof GooglePolygon\n     */\n    private ManageTooltip(): void {\n        if (this._showTooltip && this._title != null && this._title !== '') {\n            const o: { [key: string]: any } = {\n                text: this._title,\n                align: 'left',\n                offset: new google.maps.Point(0, 25),\n                backgroundColor: 'bisque',\n                hidden: true,\n                fontSize: 12,\n                fontColor: '#000000',\n                strokeWeight: 0\n            };\n            if (this._tooltip == null) {\n                o.map = this.NativePrimitve.getMap();\n                o.zIndex = 100000;\n                this._tooltip = new GoogleMapLabel(o);\n            }\n            else {\n                this._tooltip.SetValues(o);\n            }\n            if (!this._hasToolTipReceiver) {\n                this._mouseOverListener = this.NativePrimitve.addListener('mouseover', (e: GoogleMapTypes.MouseEvent) => {\n                    this._tooltip.Set('position', e.latLng);\n                    if (!this._tooltipVisible) {\n                        this._tooltip.Set('hidden', false);\n                        this._tooltipVisible = true;\n                    }\n                });\n                this._mouseMoveListener = this.NativePrimitve.addListener('mousemove', (e: GoogleMapTypes.MouseEvent) => {\n                    if (this._tooltipVisible) { this._tooltip.Set('position', e.latLng); }\n                });\n                this._mouseOutListener = this.NativePrimitve.addListener('mouseout', (e: GoogleMapTypes.MouseEvent) => {\n                    if (this._tooltipVisible) {\n                        this._tooltip.Set('hidden', true);\n                        this._tooltipVisible = false;\n                    }\n                });\n                this._hasToolTipReceiver = true;\n            }\n        }\n        if ((!this._showTooltip || this._title === '' || this._title == null)) {\n            if (this._hasToolTipReceiver) {\n                if (this._mouseOutListener) { google.maps.event.removeListener(this._mouseOutListener); }\n                if (this._mouseOverListener) { google.maps.event.removeListener(this._mouseOverListener); }\n                if (this._mouseMoveListener) { google.maps.event.removeListener(this._mouseMoveListener); }\n                this._hasToolTipReceiver = false;\n            }\n            if (this._tooltip) {\n                this._tooltip.SetMap(null);\n                this._tooltip = null;\n            }\n        }\n    }\n\n}\n","import { ILatLong } from '../../interfaces/ilatlong';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { GoogleConversions } from '../../services/google/google-conversions';\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\nimport { GoogleMapLabel } from './google-label';\nimport { Polyline } from '../polyline';\n\ndeclare var google: any;\n\n/**\n * Concrete implementation for a polyline model for Google Maps.\n *\n * @export\n */\nexport class GooglePolyline extends Polyline implements Polyline {\n\n    ///\n    /// Field declarations\n    ///\n    private _title: string = '';\n    private _showTooltip: boolean = false;\n    private _tooltip: GoogleMapLabel = null;\n    private _tooltipVisible: boolean = false;\n    private _hasToolTipReceiver: boolean = false;\n    private _mouseOverListener: GoogleMapTypes.MapsEventListener = null;\n    private _mouseOutListener: GoogleMapTypes.MapsEventListener = null;\n    private _mouseMoveListener: GoogleMapTypes.MapsEventListener = null;\n    private _metadata: Map<string, any> = new Map<string, any>();\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Gets the polyline metadata.\n     *\n     * @readonly\n     * @memberof GooglePolyline\n     */\n    public get Metadata(): Map<string, any> { return this._metadata; }\n\n    /**\n     * Gets the native primitve implementing the marker, in this case {@link GoogleMApTypes.Polyline}\n     *\n     * @readonly\n     * @memberof GooglePolygon\n     */\n    public get NativePrimitve(): GoogleMapTypes.Polyline { return this._polyline; }\n\n    /**\n     * Gets or sets whether to show the tooltip\n     *\n     * @abstract\n     * @memberof GooglePolygon\n     * @property\n     */\n    public get ShowTooltip(): boolean { return this._showTooltip; }\n    public set ShowTooltip(val: boolean) {\n        this._showTooltip = val;\n        this.ManageTooltip();\n    }\n\n    /**\n     * Gets or sets the title off the polygon\n     *\n     * @abstract\n     * @memberof GooglePolygon\n     * @property\n     */\n    public get Title(): string { return this._title; }\n    public set Title(val: string) {\n        this._title = val;\n        this.ManageTooltip();\n    }\n\n    ///\n    /// constructor\n    ///\n\n     /**\n     * Creates an instance of GooglePolygon.\n     * @param _polyline - The {@link GoogleMApTypes.Polyline} underlying the model.\n     *\n     * @memberof GooglePolyline\n     */\n    constructor(private _polyline: GoogleMapTypes.Polyline) {\n        super();\n    }\n\n    /**\n     * Adds a delegate for an event.\n     *\n     * @param eventType - String containing the event name.\n     * @param fn - Delegate function to execute when the event occurs.\n     * @memberof Polyline\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        const supportedEvents = [\n            'click',\n            'dblclick',\n            'drag', 'dragend',\n            'dragstart',\n            'mousedown',\n            'mousemove',\n            'mouseout',\n            'mouseover',\n            'mouseup',\n            'rightclick'\n        ];\n        if (supportedEvents.indexOf(eventType) !== -1) {\n            this._polyline.addListener(eventType, fn);\n        }\n    }\n\n    /**\n     * Deleted the polyline.\n     *\n     *\n     * @memberof Polyline\n     */\n    public Delete(): void {\n        this._polyline.setMap(null);\n        if (this._tooltip) { this._tooltip.Delete(); }\n    }\n\n    /**\n     * Gets whether the polyline is draggable.\n     *\n     * @returns - True if the polyline is dragable, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public GetDraggable(): boolean {\n        return this._polyline.getDraggable();\n    }\n\n    /**\n     * Gets whether the polyline path can be edited.\n     *\n     * @returns - True if the path can be edited, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public GetEditable(): boolean {\n        return this._polyline.getEditable();\n    }\n\n    /**\n     * Gets the polyline path.\n     *\n     * @returns - Array of {@link ILatLong} objects describing the polyline path.\n     *\n     * @memberof Polyline\n     */\n    public GetPath(): Array<ILatLong> {\n        const p: Array<GoogleMapTypes.LatLng> = this._polyline.getPath();\n        const path: Array<ILatLong> = new Array<ILatLong>();\n        p.forEach(x => path.push({ latitude: x.lat(), longitude: x.lng() }));\n        return path;\n    }\n\n    /**\n     * Gets whether the polyline is visible.\n     *\n     * @returns - True if the polyline is visible, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public GetVisible(): boolean {\n        return this._polyline.getVisible();\n    }\n\n    /**\n     * Sets whether the polyline is dragable.\n     *\n     * @param draggable - True to make the polyline dragable, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public SetDraggable(draggable: boolean): void {\n        this._polyline.setDraggable(draggable);\n    }\n\n    /**\n     * Sets wether the polyline path is editable.\n     *\n     * @param editable - True to make polyline path editable, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public SetEditable(editable: boolean): void {\n        this._polyline.setEditable(editable);\n    }\n\n    /**\n     * Sets the polyline options\n     *\n     * @param options - {@link ILatLong} object containing the options. The options are merged with hte ones\n     * already on the underlying model.\n     *\n     * @memberof Polyline\n     */\n    public SetOptions(options: IPolylineOptions): void {\n        const o: GoogleMapTypes.PolylineOptions = GoogleConversions.TranslatePolylineOptions(options);\n        this._polyline.setOptions(o);\n        if (options.path) {\n            this.SetPath(<Array<ILatLong>>options.path);\n        }\n    }\n\n    /**\n     * Sets the polyline path.\n     *\n     * @param path - An Array of {@link ILatLong} (or array of arrays) describing the polylines path.\n     *\n     * @memberof Polyline\n     */\n    public SetPath(path: Array<ILatLong>): void {\n        const p: Array<GoogleMapTypes.LatLng> = new Array<GoogleMapTypes.LatLng>();\n        path.forEach(x => p.push(new google.maps.LatLng(x.latitude, x.longitude)));\n        this._polyline.setPath(p);\n    }\n\n    /**\n     * Sets whether the polyline is visible.\n     *\n     * @param visible - True to set the polyline visible, false otherwise.\n     *\n     * @memberof Polyline\n     */\n    public SetVisible(visible: boolean): void {\n        this._polyline.setVisible(visible);\n    }\n\n    ///\n    /// Private methods\n    ///\n    /**\n     * Configures the tooltip for the polyline\n     * @memberof GooglePolyline\n     */\n    private ManageTooltip(): void {\n        if (this._showTooltip && this._title != null && this._title !== '') {\n            const o: { [key: string]: any } = {\n                text: this._title,\n                align: 'left',\n                offset: new google.maps.Point(0, 25),\n                backgroundColor: 'bisque',\n                hidden: true,\n                fontSize: 12,\n                fontColor: '#000000',\n                strokeWeight: 0\n            };\n            if (this._tooltip == null) {\n                o.map = this.NativePrimitve.getMap();\n                o.zIndex = 100000;\n                this._tooltip = new GoogleMapLabel(o);\n            }\n            else {\n                this._tooltip.SetValues(o);\n            }\n            if (!this._hasToolTipReceiver) {\n                this._mouseOverListener = this.NativePrimitve.addListener('mouseover', (e: GoogleMapTypes.MouseEvent) => {\n                    this._tooltip.Set('position', e.latLng);\n                    if (!this._tooltipVisible) {\n                        this._tooltip.Set('hidden', false);\n                        this._tooltipVisible = true;\n                    }\n                });\n                this._mouseMoveListener = this.NativePrimitve.addListener('mousemove', (e: GoogleMapTypes.MouseEvent) => {\n                    if (this._tooltipVisible) { this._tooltip.Set('position', e.latLng); }\n                });\n                this._mouseOutListener = this.NativePrimitve.addListener('mouseout', (e: GoogleMapTypes.MouseEvent) => {\n                    if (this._tooltipVisible) {\n                        this._tooltip.Set('hidden', true);\n                        this._tooltipVisible = false;\n                    }\n                });\n                this._hasToolTipReceiver = true;\n            }\n        }\n        if ((!this._showTooltip || this._title === '' || this._title == null)) {\n            if (this._hasToolTipReceiver) {\n                if (this._mouseOutListener) { google.maps.event.removeListener(this._mouseOutListener); }\n                if (this._mouseOverListener) { google.maps.event.removeListener(this._mouseOverListener); }\n                if (this._mouseMoveListener) { google.maps.event.removeListener(this._mouseMoveListener); }\n                this._hasToolTipReceiver = false;\n            }\n            if (this._tooltip) {\n                this._tooltip.SetMap(null);\n                this._tooltip = null;\n            }\n        }\n    }\n\n}\n","import { IMapEventLookup } from '../../interfaces/imap-event-lookup';\n\n/**\n * This contstant translates the abstract map events into their corresponding google map\n * equivalents.\n */\nexport const GoogleMapEventsLookup: IMapEventLookup = {\n    click :             'click',\n    dblclick :          'dblclick',\n    rightclick :        'rightclick',\n    resize :            'resize',\n    boundschanged :     'bounds_changed',\n    centerchanged :     'center_changed',\n    zoomchanged :       'zoom_changed',\n    mouseover:          'mouseover',\n    mouseout :          'mouseout',\n    mousemove :         'mousemove',\n    infowindowclose:    'closeclick'\n};\n","import { ILatLong } from '../../interfaces/ilatlong';\nimport { GoogleConversions } from '../../services/google/google-conversions';\nimport { CanvasOverlay } from '../canvas-overlay';\nimport { MapLabel } from '../map-label';\nimport { GoogleMapLabel } from './google-label';\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\nimport { Extender } from '../extender';\ndeclare var google: any;\n\n/**\n * Concrete implementing a canvas overlay to be placed on the map for Google Maps.\n *\n * @export\n */\nexport class GoogleCanvasOverlay extends CanvasOverlay {\n\n    ///\n    /// field declarations\n    ///\n    private _viewChangeEndEvent: GoogleMapTypes.MapsEventListener;\n    private _mapResizeEvent: GoogleMapTypes.MapsEventListener;\n\n    /**\n     * Creates a new instance of the GoogleCanvasOverlay class.\n     * @param drawCallback A callback function that is triggered when the canvas is ready to be\n     * rendered for the current map view.\n     * @memberof GoogleCanvasOverlay\n     */\n    constructor(drawCallback: (canvas: HTMLCanvasElement) => void) {\n        super(drawCallback);\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Obtains geo coordinates for the click location\n     *\n     * @param e - The mouse event.\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\n     * @memberof GoogleCanvasOverlay\n     */\n    public GetCoordinatesFromClick(e: GoogleMapTypes.MouseEvent): ILatLong {\n        if (!e) { return null; }\n        if (!e.latLng) { return null; }\n        if (!e.latLng.lat || !e.latLng.lng) { return null; }\n        return { latitude: e.latLng.lat(), longitude: e.latLng.lng() };\n    }\n\n    /**\n     * Gets the map associted with the label.\n     *\n     * @memberof GoogleCanvasOverlay\n     * @method\n     */\n    public GetMap(): GoogleMapTypes.GoogleMap {\n        return (<any>this).getMap();\n    }\n\n    /**\n     * Returns a MapLabel instance for the current platform that can be used as a tooltip.\n     * This method only generates the map label. Content and placement is the responsibility\n     * of the caller.\n     *\n     * @returns - The label to be used for the tooltip.\n     * @memberof GoogleCanvasOverlay\n     * @method\n     */\n    public GetToolTipOverlay(): MapLabel {\n        const o: { [key: string]: any } = {\n            align: 'left',\n            offset: new google.maps.Point(0, 25),\n            backgroundColor: 'bisque',\n            hidden: true,\n            fontSize: 12,\n            fontColor: '#000000',\n            strokeWeight: 0\n        };\n        o.zIndex = 100000;\n        const label: MapLabel = new GoogleMapLabel(o);\n        label.SetMap(this.GetMap());\n        return label;\n    }\n\n    /**\n     * Called when the custom overlay is added to the map. Triggers Onload....\n     * @memberof GoogleCanvasOverlay\n     */\n    public OnAdd(): void {\n        super.OnAdd();\n        this.OnLoad();\n        this._canvas.style.zIndex = '100';\n            // move the canvas above primitives such as polygons.\n\n        // set the overlay to ready state\n        this._readyResolver(true);\n    }\n\n    /**\n     * Called whenever the canvas needs to be redrawn. This method does not do the actual\n     * update, it simply scales the canvas. The actual redraw happens once the map is idle.\n     * @memberof GoogleCanvasOverly\n     * @method\n     */\n    public OnDraw(): void {\n        const isStreetView: boolean = false;\n        const map: GoogleMapTypes.GoogleMap = this.GetMap();\n\n        if (isStreetView) {\n            // Don't show the canvas if the map is in Streetside mode.\n            this._canvas.style.display = 'none';\n        }\n        else {\n            // Re-drawing the canvas as it moves would be too slow. Instead, scale and translate canvas element.\n            // Upon idle or drag end, we can then redraw the canvas....\n            const zoomCurrent: number = map.getZoom();\n            const centerCurrent: GoogleMapTypes.LatLng = map.getCenter();\n\n            // Calculate map scale based on zoom level difference.\n            const scale: number = Math.pow(2, zoomCurrent - this._zoomStart);\n\n            // Calculate the scaled dimensions of the canvas.\n            const el: HTMLDivElement = map.getDiv();\n            const w: number = el.offsetWidth;\n            const h: number = el.offsetHeight;\n            const newWidth: number = w * scale;\n            const newHeight: number = h * scale;\n\n            // Calculate offset of canvas based on zoom and center offsets.\n            const projection = (<any>this).getProjection();\n            const cc = projection.fromLatLngToDivPixel(centerCurrent);\n\n            // Update the canvas CSS position and dimensions.\n            this.UpdatePosition(cc.x - newWidth / 2, cc.y - newHeight / 2, newWidth, newHeight);\n        }\n    }\n\n    /**\n     * CanvasOverlay loaded, attach map events for updating canvas.\n     * @method\n     * @memberof GoogleCanvasOverlay\n     */\n    public OnLoad(): void {\n        const isStreetView: boolean = false;\n        const map: GoogleMapTypes.GoogleMap = (<any>this).getMap();\n\n        // Get the current map view information.\n        this._zoomStart = map.getZoom();\n        const c: GoogleMapTypes.LatLng = map.getCenter();\n        this._centerStart = {\n            latitude: c.lat(),\n            longitude: c.lng()\n        };\n\n        // When the map stops moving, render new data on the canvas.\n        this._viewChangeEndEvent = google.maps.event.addListener(map, 'idle', (e: any) => {\n            this.UpdateCanvas();\n        });\n\n        // Update the position of the overlay when the map is resized.\n        this._mapResizeEvent = google.maps.event.addListener(map, 'resize', (e: any) => {\n            this.UpdateCanvas();\n        });\n    }\n\n    /**\n     * Associates the cnavas overlay with a map.\n     * @method\n     * @memberof GoogleCanvasOverlay\n     */\n    public SetMap(map: GoogleMapTypes.GoogleMap): void {\n        (<any>this).setMap(map);\n    }\n\n    ///\n    /// Protected methods\n    ///\n\n    /**\n     * Attaches the canvas to the map.\n     * @memberof CanvasOverlay\n     * @method\n     */\n    protected SetCanvasElement(el: HTMLCanvasElement): void {\n        const panes = (<any>this).getPanes();\n        if (panes) {\n            if (el != null) {\n                panes.overlayLayer.appendChild(el);\n                // 4: floatPane (infowindow)\n                // 3: overlayMouseTarget (mouse events)\n                // 2: markerLayer (marker images)\n                // 1: overlayLayer (polygons, polylines, ground overlays, tile layer overlays)\n                // 0: mapPane (lowest pane above the map tiles)\n            }\n            else {\n                panes.overlayLayer.removeChild(this._canvas);\n            }\n        }\n    }\n\n    /**\n     * Remove the map event handlers.\n     * @memberof CanvasOverlay\n     * @method\n     * @protected\n     */\n    protected RemoveEventHandlers(): void {\n        // Remove all event handlers from the map.\n        if (this._viewChangeEndEvent) { google.maps.event.removeListener(this._viewChangeEndEvent); }\n        if (this._mapResizeEvent) { google.maps.event.removeListener(this._mapResizeEvent); }\n    }\n\n    /**\n     * Updates the Canvas size based on the map size.\n     * @memberof CanvasOverlay\n     * @method\n     * @protected\n     */\n    protected Resize(): void {\n        const map: GoogleMapTypes.GoogleMap = (<any>this).getMap();\n\n        // Clear canvas by updating dimensions. This also ensures canvas stays the same size as the map.\n        const el: HTMLDivElement = map.getDiv();\n        this._canvas.width = el.offsetWidth;\n        this._canvas.height = el.offsetHeight;\n    }\n\n    /**\n     * Updates the Canvas.\n     * @memberof CanvasOverlay\n     * @method\n     * @protected\n     */\n    protected UpdateCanvas(): void {\n        const map: GoogleMapTypes.GoogleMap = (<any>this).getMap();\n\n        // Only render the canvas if it isn't in streetside mode.\n        if (true) {\n            this._canvas.style.display = '';\n\n            // Reset CSS position and dimensions of canvas.\n            const el: HTMLDivElement = map.getDiv();\n            const w: number = el.offsetWidth;\n            const h: number = el.offsetHeight;\n            const centerPoint = (<any>this).getProjection().fromLatLngToDivPixel(map.getCenter());\n            this.UpdatePosition((centerPoint.x - w / 2), (centerPoint.y - h / 2), w, h);\n\n            // Redraw the canvas.\n            this.Redraw(true);\n\n            // Get the current map view information.\n            this._zoomStart = map.getZoom();\n            const c: GoogleMapTypes.LatLng = map.getCenter();\n            this._centerStart = {\n                latitude: c.lat(),\n                longitude: c.lng()\n            };\n        }\n    }\n}\n\n/**\n * Helper function to extend the OverlayView into the CanvasOverlay\n *\n * @export\n * @method\n */\nexport function MixinCanvasOverlay() {\n\n    new Extender(GoogleCanvasOverlay)\n        .Extend(new google.maps.OverlayView)\n        .Map('onAdd', 'OnAdd')\n        .Map('draw', 'OnDraw')\n        .Map('onRemove', 'OnRemove');\n}\n","import { Injectable } from '@angular/core';\nimport { MapService } from './map.service';\nimport { MarkerService } from './marker.service';\nimport { InfoBoxService } from './infobox.service';\nimport { LayerService } from './layer.service';\nimport { ClusterService } from './cluster.service';\nimport { PolygonService } from './polygon.service';\nimport { PolylineService } from './polyline.service';\n\n/**\n * Implements a factory to create all the implementation specifc services for a map implementation\n *\n * @export\n * @abstract\n */\n@Injectable()\nexport abstract class MapServiceFactory {\n\n    /**\n     * Creates the map service.\n     *\n     * @abstract\n     * @returns - {@link MapService} implementing a specific underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    abstract Create(): MapService;\n\n    /**\n     * Creates the cluster service.\n     *\n     * @abstract\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\n     * @returns - {@link ClusterService} implementation for the underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    abstract CreateClusterService(map: MapService): ClusterService;\n\n    /**\n     * Creates the info box service.\n     *\n     * @abstract\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\n     * @param marker - {@link MarkerService} implementation for thh underlying marker archticture.\n     * @returns - {@link InfoBoxService} implementation for the underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    abstract CreateInfoBoxService(map: MapService, marker: MarkerService): InfoBoxService;\n\n    /**\n     * Creates the layer service.\n     *\n     * @abstract\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\n     * @returns - {@link LayerService} implementation for the underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    abstract CreateLayerService(map: MapService): LayerService;\n\n    /**\n     * Creates the marker service.\n     *\n     * @abstract\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\n     * @param clusters  - {@link ClusterService} implementation for the underlying map architecture.\n     * @returns - {@link MarkerService} implementation for the underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    abstract CreateMarkerService(map: MapService, layers: LayerService, clusters: ClusterService): MarkerService;\n\n    /**\n     * Creates the polygon service.\n     *\n     * @abstract\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\n     * @returns - {@link PolygonService} implementation for the underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    abstract CreatePolygonService(map: MapService, layers: LayerService): PolygonService;\n\n    /**\n     * Creates the polyline service.\n     *\n     * @abstract\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\n     * @returns - {@link PolylineService} implementation for the underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    abstract CreatePolylineService(map: MapService, layers: LayerService): PolylineService;\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IMapOptions } from '../interfaces/imap-options';\nimport { ILayerOptions } from '../interfaces/ilayer-options';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { IPoint } from '../interfaces/ipoint';\nimport { ISize } from '../interfaces/isize';\nimport { IBox } from '../interfaces/ibox';\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\nimport { IMarkerOptions } from '../interfaces/imarker-options';\nimport { IInfoWindowOptions } from '../interfaces/iinfo-window-options';\nimport { Marker } from '../models/marker';\nimport { Layer } from '../models/layer';\nimport { Polygon } from '../models/polygon';\nimport { Polyline } from '../models/polyline';\nimport { InfoWindow } from '../models/info-window';\nimport { CanvasOverlay } from '../models/canvas-overlay';\n\n/**\n * Abstract class to implement map api. A concrete implementation should be created for each\n * Map provider supported (e.g. Bing, Goolge, ESRI)\n *\n * @export\n * @abstract\n */\n@Injectable()\nexport abstract class MapService {\n\n    ///\n    /// Public properties\n    ///\n\n    /**\n     * Gets the Map control instance underlying the implementation\n     *\n     * @readonly\n     * @memberof MapService\n     */\n    abstract get MapInstance(): any;\n\n    /**\n     * Gets a Promise for a Map control instance underlying the implementation. Use this instead of {@link MapInstance} if you\n     * are not sure if and when the instance will be created.\n     * @readonly\n     * @memberof MapService\n     */\n    abstract get MapPromise(): Promise<any>;\n\n    /**\n     * Gets the maps physical size.\n     *\n     * @readonly\n     * @abstract\n     * @memberof MapService\n     */\n    abstract get MapSize(): ISize;\n\n\n    ///\n    /// Public methods and MapService interface implementation\n    ///\n\n    /**\n     * Gets a random geo locations filling the bounding box.\n     *\n     * @param count - number of locations to return\n     * @param bounds  - bounding box.\n     * @returns - Array of geo locations.\n     * @memberof MapService\n     */\n    public static GetRandonLocations(count: number, bounds: IBox): Array<ILatLong> {\n        const a: Array<ILatLong> = [];\n        const _getRandomLocation = (b: IBox) => {\n            const lat: number = Math.random() * (b.maxLatitude - b.minLatitude) + b.minLatitude;\n            let lng: number = 0;\n            if (crossesDateLine) {\n                lng = Math.random() * (b.minLongitude + 360 - b.maxLongitude) + b.maxLongitude;\n                if (lng > 180) { lng = lng - 360; }\n            }\n            else {\n                lng = Math.random() * (b.maxLongitude - b.minLongitude) + b.minLongitude;\n            }\n            const p: ILatLong = { latitude: lat, longitude: lng };\n            return p;\n        };\n        let crossesDateLine: boolean = false;\n\n        if (bounds == null) { bounds = <IBox>{\n                maxLatitude: 360,\n                minLatitude: 0,\n                maxLongitude: 170,\n                minLongitude: 0\n            };\n        }\n        if (bounds.center.longitude < bounds.minLongitude  || bounds.center.longitude > bounds.maxLongitude) { crossesDateLine = true; }\n        if (!count || count <= 0) {\n            return [_getRandomLocation(bounds)];\n        }\n        for (let r = 0; r < count; r++) { a.push(_getRandomLocation(bounds)); }\n        return a;\n    }\n\n    /**\n     * Creates a canvas overlay layer to perform custom drawing over the map with out\n     * some of the overhead associated with going through the Map objects.\n     * @param drawCallback A callback function that is triggered when the canvas is ready to be\n     * rendered for the current map view.\n     * @returns - Promise of a {@link CanvasOverlay} object.\n     * @memberof MapService\n     * @abstract\n     */\n    public abstract CreateCanvasOverlay(drawCallback: (canvas: HTMLCanvasElement) => void): Promise<CanvasOverlay>;\n\n    /**\n     * Creates a map cluster layer within the map context\n     *\n     * @param options - Options for the layer. See {@link IClusterOptions}.\n     * @returns - Promise of a {@link Layer} object, which models the underlying native layer object.\n     *\n     * @memberof MapService\n     */\n    abstract CreateClusterLayer(options: ILayerOptions): Promise<Layer>;\n\n    /**\n     * Creates an information window for a map position\n     *\n     * @param [options] - Infowindow options. See {@link IInfoWindowOptions}\n     * @returns - Promise of a {@link InfoWindow} object, which models the underlying natvie infobox object.\n     *\n     * @memberof MapService\n     */\n    abstract CreateInfoWindow(options?: IInfoWindowOptions): Promise<InfoWindow>;\n\n    /**\n     * Creates a map layer within the map context\n     *\n     * @param options - Options for the layer. See {@link ILayerOptions}\n     * @returns - Promise of a {@link Layer} object, which models the underlying native layer object.\n     *\n     * @memberof MapService\n     */\n    abstract CreateLayer(options: ILayerOptions): Promise<Layer>;\n\n    /**\n     * Creates a map instance\n     *\n     * @param el - HTML element to host the map.\n     * @param mapOptions - Map options\n     * @returns - Promise fullfilled once the map has been created.\n     *\n     * @memberof MapService\n     */\n    abstract CreateMap(el: HTMLElement, mapOptions: IMapOptions): Promise<void>;\n\n    /**\n     * Creates a map marker within the map context\n     *\n     * @param [options=<IMarkerOptions>{}] - Options for the marker. See {@link IMarkerOptions}.\n     * @returns - Promise of a {@link Marker} object, which models the underlying native pushpin object.\n     *\n     * @memberof MapService\n     */\n    abstract CreateMarker(options: IMarkerOptions): Promise<Marker>;\n\n    /**\n     * Creates a polygon within the map context\n     *\n     * @abstract\n     * @param options - Options for the polygon. See {@link IPolygonOptions}.\n     * @returns - Promise of a {@link Polygon} object, which models the underlying native polygon.\n     *\n     * @memberof MapService\n     */\n    abstract CreatePolygon(options: IPolygonOptions): Promise<Polygon>;\n\n    /**\n     * Creates a polyline within the map context\n     *\n     * @abstract\n     * @param options - Options for the polyline. See {@link IPolylineOptions}.\n     * @returns - Promise of a {@link Polyline} object (or an array thereof for complex paths),\n     * which models the underlying native polyline.\n     *\n     * @memberof MapService\n     */\n    abstract CreatePolyline(options: IPolylineOptions): Promise<Polyline|Array<Polyline>>;\n\n    /**\n     * Deletes a layer from the map.\n     *\n     * @param layer - Layer to delete. See {@link Layer}.\n     * @returns - Promise fullfilled when the layer has been removed.\n     *\n     * @memberof MapService\n     */\n    abstract DeleteLayer(layer: Layer): Promise<void>;\n\n    /**\n     * Dispaose the map and associated resoures.\n     *\n     * @memberof MapService\n     */\n    abstract DisposeMap(): void;\n\n    /**\n     * Gets the geo coordinates of the map bounds\n     *\n     * @returns - A promise that when fullfilled contains the bounding box of the screen. See {@link IBox}.\n     *\n     * @memberof MapService\n     */\n    abstract GetBounds(): Promise<IBox>;\n\n    /**\n     * Gets the geo coordinates of the map center\n     *\n     * @returns - A promise that when fullfilled contains the goe location of the center. See {@link ILatLong}.\n     *\n     * @memberof MapService\n     */\n    abstract GetCenter(): Promise<ILatLong>;\n\n    /**\n     * Gets the current zoom level of the map.\n     *\n     * @returns - A promise that when fullfilled contains the zoom level.\n     *\n     * @memberof MapService\n     */\n    abstract GetZoom(): Promise<number>;\n\n    /**\n     * Provides a conversion of geo coordinates to pixels on the map control.\n     *\n     * @param loc - The geo coordinates to translate.\n     * @returns - Promise of an {@link IPoint} interface representing the pixels. This promise resolves to null\n     * if the goe coordinates are not in the view port.\n     *\n     * @memberof MapService\n     */\n    abstract LocationToPoint(loc: ILatLong): Promise<IPoint>;\n\n    /**\n     * Provides a conversion of geo coordinates to pixels on the map control.\n     *\n     * @param loc - The geo coordinates to translate.\n     * @returns - Promise of an {@link IPoint} interface array representing the pixels.\n     *\n     * @memberof MapService\n     */\n    abstract LocationsToPoints(locs: Array<ILatLong>): Promise<Array<IPoint>>;\n\n    /**\n     * Centers the map on a geo location.\n     *\n     * @param latLng - GeoCoordinates around which to center the map. See {@link ILatLong}\n     * @returns - Promise that is fullfilled when the center operations has been completed.\n     *\n     * @memberof MapService\n     */\n    abstract SetCenter(latLng: ILatLong): Promise<void>;\n\n    /**\n     * Sets the generic map options.\n     *\n     * @param options - Options to set.\n     *\n     * @memberof MapService\n     */\n    abstract SetMapOptions(options: IMapOptions): void;\n\n    /**\n     * Sets the view options of the map.\n     *\n     * @param options - Options to set.\n     *\n     * @memberof MapService\n     */\n    abstract SetViewOptions(options: IMapOptions): void;\n\n    /**\n     * Sets the zoom level of the map.\n     *\n     * @param zoom - Zoom level to set.\n     * @returns - A Promise that is fullfilled once the zoom operation is complete.\n     *\n     * @memberof MapService\n     */\n    abstract SetZoom(zoom: number): Promise<void>;\n\n    /**\n     * Creates an event subscription\n     *\n     * @param eventName - The name of the event (e.g. 'click')\n     * @returns - An observable of tpye E that fires when the event occurs.\n     *\n     * @memberof MapService\n     */\n    abstract SubscribeToMapEvent<E>(eventName: string): Observable<E>;\n\n    /**\n     * Triggers the given event name on the map instance.\n     *\n     * @param eventName - Event to trigger.\n     * @returns - A promise that is fullfilled once the event is triggered.\n     *\n     * @memberof MapService\n     */\n    abstract TriggerMapEvent(eventName: string): Promise<void>;\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IPoint } from '../interfaces/ipoint';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { Marker } from '../models/marker';\nimport { MapMarkerDirective } from '../components/map-marker';\n\n/**\n * The abstract class represents the contract defintions for a marker service to be implemented by an acutaly underlying\n * map architecture.\n *\n * @export\n * @abstract\n */\n@Injectable()\nexport abstract class MarkerService {\n\n    /**\n     * Adds a marker. Depending on the marker context, the marker will either by added to the map or a correcsponding layer.\n     *\n     * @abstract\n     * @param marker - The {@link MapMarkerDirective} to be added.\n     *\n     * @memberof MarkerService\n     */\n    public abstract AddMarker(marker: MapMarkerDirective): void;\n\n    /**\n     * Registers an event delegate for a marker.\n     *\n     * @abstract\n     * @param eventName - The name of the event to register (e.g. 'click')\n     * @param marker - The {@link MapMarker} for which to register the event.\n     * @returns - Observable emiting an instance of T each time the event occurs.\n     *\n     * @memberof MarkerService\n     */\n    public abstract CreateEventObservable<T>(eventName: string, marker: MapMarkerDirective): Observable<T>;\n\n    /**\n     * Deletes a marker.\n     *\n     * @abstract\n     * @param marker - {@link MapMarkerDirective} to be deleted.\n     * @returns - A promise fullfilled once the marker has been deleted.\n     *\n     * @memberof MarkerService\n     */\n    public abstract DeleteMarker(marker: MapMarkerDirective): Promise<void>;\n\n    /**\n     * Obtains geo coordinates for the marker on the click location\n     *\n     * @abstract\n     * @param e - The mouse event.\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\n     *\n     * @memberof MarkerService\n     */\n    public abstract GetCoordinatesFromClick(e: MouseEvent| any): ILatLong;\n\n    /**\n     * Obtains the marker model for the marker allowing access to native implementation functionatiliy.\n     *\n     * @abstract\n     * @param marker - The {@link MapMarkerDirective} for which to obtain the marker model.\n     * @returns - A promise that when fullfilled contains the {@link Marker} implementation of the underlying platform.\n     *\n     * @memberof MarkerService\n     */\n    public abstract GetNativeMarker(marker: MapMarkerDirective): Promise<Marker>;\n\n    /**\n     * Obtains the marker pixel location for the marker on the click location\n     *\n     * @abstract\n     * @param e - The mouse event.\n     * @returns - {@link ILatLong} containing the pixels of the marker on the map canvas.\n     *\n     * @memberof MarkerService\n     */\n    public abstract GetPixelsFromClick(e: MouseEvent| any): IPoint;\n\n    /**\n     * Converts a geo location to a pixel location relative to the map canvas.\n     *\n     * @abstract\n     * @param target - Either a {@link MapMarkerDirective} or a {@link ILatLong}\n     * for the basis of translation.\n     * @returns - A promise that when fullfilled contains a {@link IPoint}\n     * with the pixel coordinates of the MapMarkerDirective or ILatLong relative to the map canvas.\n     *\n     * @memberof MarkerService\n     */\n    public abstract LocationToPoint(target: MapMarkerDirective | ILatLong): Promise<IPoint>;\n\n    /**\n     * Updates the anchor position for the marker.\n     *\n     * @abstract\n     * @param - The {@link MapMarkerDirective} object for which to upate the anchor.\n     * Anchor information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the anchor position has been updated.\n     *\n     * @memberof MarkerService\n     */\n    public abstract UpdateAnchor(maker: MapMarkerDirective): Promise<void>;\n\n    /**\n     * Updates whether the marker is draggable.\n     *\n     * @abstract\n     * @param - The {@link MapMarkerDirective} object for which to upate dragability.\n     * Dragability information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the marker has been updated.\n     *\n     * @memberof MarkerService\n     */\n    public abstract UpdateDraggable(marker: MapMarkerDirective): Promise<void>;\n\n    /**\n     * Updates the Icon on the marker.\n     *\n     * @abstract\n     * @param - The {@link MapMarkerDirective} object for which to upate the icon.\n     * Icon information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the icon information has been updated.\n     *\n     * @memberof MarkerService\n     */\n    public abstract UpdateIcon(marker: MapMarkerDirective): Promise<void>;\n\n    /**\n     * Updates the label on the marker.\n     *\n     * @abstract\n     * @param - The {@link MapMarkerDirective} object for which to upate the label.\n     * Label information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the label has been updated.\n     *\n     * @memberof MarkerService\n     */\n    public abstract UpdateLabel(marker: MapMarkerDirective): Promise<void>;\n\n    /**\n     * Updates the geo coordinates for the marker.\n     *\n     * @abstract\n     * @param - The {@link MapMarkerDirective} object for which to upate the coordinates.\n     * Coordinate information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the position has been updated.\n     *\n     * @memberof MarkerService\n     */\n    public abstract UpdateMarkerPosition(marker: MapMarkerDirective): Promise<void>;\n\n    /**\n     * Updates the title on the marker.\n     *\n     * @abstract\n     * @param - The {@link MapMarkerDirective} object for which to upate the title.\n     * Title information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the title has been updated.\n     *\n     * @memberof MarkerService\n     */\n    public abstract UpdateTitle(marker: MapMarkerDirective): Promise<void>;\n\n    /**\n     * Updates the visibility on the marker.\n     *\n     * @abstract\n     * @param - The {@link MapMarkerDirective} object for which to upate the visibility.\n     * Visibility information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the visibility has been updated.\n     *\n     * @memberof MarkerService\n     */\n    public abstract UpdateVisible(marker: MapMarkerDirective): Promise<void>;\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { InfoBoxComponent } from '../components/infobox';\nimport { IInfoWindowOptions } from '../interfaces/iinfo-window-options';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { InfoWindow } from '../models/info-window';\n\n/**\n * This class defines the contract for an InfoBoxService. Each Map Architecture provider is expected the furnish a concrete implementation.\n *\n * @export\n * @abstract\n */\n@Injectable()\nexport abstract class InfoBoxService {\n\n    /**\n     * Adds an info window to the map or layer.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     *\n     * @memberof InfoBoxService\n     */\n    abstract AddInfoWindow(info: InfoBoxComponent): void;\n\n    /**\n     * Closes an infobox that is open.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     * @returns - A promise that is fullfilled when the infobox has been closed.\n     *\n     * @memberof InfoBoxService\n     */\n    abstract Close(info: InfoBoxComponent): Promise<void>;\n\n    /**\n     * Subscribe to events on the infowindow.\n     *\n     * @abstract\n     * @param eventName - The name of the event to register (e.g. 'click')\n     * @param infoComponent - The {@link InfoBoxComponent} for which to register the event.\n     * @returns - Observable emiting an instance of T each time the event occurs.\n     *\n     * @memberof InfoBoxService\n     */\n    abstract CreateEventObservable<T>(event: string, infoBoxComponent: InfoBoxComponent): Observable<T>;\n\n\n    /**\n     * Deletes an infobox.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     * @returns - A promise that is fullfilled when the infobox has been deleted.\n     *\n     * @memberof InfoBoxService\n     */\n    abstract DeleteInfoWindow(info: InfoBoxComponent): Promise<void>;\n\n    /**\n     * Opens an infobox that is closed.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     * @returns - A promise that is fullfilled when the infobox has been opened.\n     *\n     * @memberof InfoBoxService\n     */\n    abstract Open(info: InfoBoxComponent, loc?: ILatLong): Promise<void>;\n\n    /**\n     * Sets the infobox options.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     * @param options - {@link IInfoWindowOptions} object containing the options to set. Options provided are\n     * merged with the existing options of the underlying infobox.\n     * @returns - A promise that is fullfilled when the infobox options have been updated.\n     *\n     * @memberof InfoBoxService\n     */\n    abstract SetOptions(info: InfoBoxComponent, options: IInfoWindowOptions): Promise<void>;\n\n    /**\n     * Set the position of the infobox based on the properties set on the InfoBox component.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     * @param latlng - The position to set\n     * @returns - A promise that is fullfilled when the infobox position has been updated.\n     *\n     * @memberof InfoBoxService\n     */\n    abstract SetPosition(info: InfoBoxComponent, latlng?: ILatLong): Promise<void>;\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IMarkerOptions } from '../interfaces/imarker-options';\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\nimport { IMarkerIconInfo } from '../interfaces/imarker-icon-info';\nimport { Marker } from '../models/marker';\nimport { Polygon } from '../models/polygon';\nimport { Polyline } from '../models/polyline';\nimport { Layer } from '../models/layer';\nimport { MapLayerDirective } from '../components/map-layer';\n\n/**\n * Abstract class to to define the layer service contract. Must be realized by implementing provider.\n *\n * @export\n * @abstract\n */\n@Injectable()\nexport abstract class LayerService {\n\n    /**\n     * Adds a layer to the map.\n     *\n     * @abstract\n     * @param layer - MapLayerDirective component object.\n     * Generally, MapLayerDirective will be injected with an instance of the\n     * LayerService and then self register on initialization.\n     *\n     * @memberof LayerService\n     */\n    public abstract AddLayer(layer: MapLayerDirective): void;\n\n    /**\n     * Adds a marker to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the marker.\n     * @param options - Marker options defining the marker.\n     * @returns - A promise that when fullfilled contains the an instance of the Marker model.\n     *\n     * @memberof LayerService\n     */\n    public abstract CreateMarker(layer: number, options: IMarkerOptions): Promise<Marker>;\n\n    /**\n     * Creates an array of unbound markers. Use this method to create arrays of markers to be used in bulk\n     * operations.\n     *\n     * @abstract\n     * @param options - Marker options defining the markers.\n     * @param markerIcon - Optional information to generate custom markers. This will be applied to all markers.\n     * @returns - A promise that when fullfilled contains the an arrays of the Marker models.\n     *\n     * @memberof LayerService\n     */\n    public abstract CreateMarkers(options: Array<IMarkerOptions>, markerIcon?: IMarkerIconInfo): Promise<Array<Marker>>;\n\n    /**\n     * Adds a polygon to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the line.\n     * @param options - Polygon options defining the line.\n     * @returns - A promise that when fullfilled contains the an instance of the Polygon model.\n     *\n     * @memberof LayerService\n     */\n    public abstract CreatePolygon(layer: number, options: IPolygonOptions): Promise<Polygon>;\n\n    /**\n     * Creates an array of unbound polygons. Use this method to create arrays of polygons to be used in bulk\n     * operations.\n     *\n     * @param layer - The id of the layer to which to add the polygon.\n     * @param options - Polygon options defining the polygons.\n     * @returns - A promise that when fullfilled contains the an arrays of the Polygon models.\n     *\n     * @memberof LayerService\n     */\n    public abstract CreatePolygons(layer: number, options: Array<IPolygonOptions>): Promise<Array<Polygon>>;\n\n    /**\n     * Adds a polyline to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the line.\n     * @param options - Polyline options defining the marker.\n     * @returns - A promise that when fullfilled contains the an instance of the Polyline (or an\n     * array of polylines for complex paths) model.\n     *\n     * @memberof LayerService\n     */\n    public abstract CreatePolyline(layer: number, options: IPolygonOptions): Promise<Polyline|Array<Polyline>>;\n\n    /**\n     * Creates an array of unbound polylines. Use this method to create arrays of polylines to be used in bulk\n     * operations.\n     *\n     * @param layer - The id of the layer to which to add the polylines.\n     * @param options - Polyline options defining the polylines.\n     * @returns - A promise that when fullfilled contains the an arrays of the Polyline models.\n     *\n     * @memberof LayerService\n     */\n    public abstract CreatePolylines(layer: number, options: Array<IPolylineOptions>): Promise<Array<Polyline|Array<Polyline>>>;\n\n    /**\n     * Deletes the layer\n     *\n     * @abstract\n     * @param layer - MapLayerDirective component object for which to retrieve the layer.\n     * @returns - A promise that is fullfilled when the layer has been removed.\n     *\n     * @memberof LayerService\n     */\n    public abstract DeleteLayer(layer: MapLayerDirective): Promise<void>;\n\n    /**\n     * Returns the Layer model represented by this layer.\n     *\n     * @abstract\n     * @param layer - MapLayerDirective component object or MapLayerId for which to retrieve the layer model.\n     * @returns - A promise that when resolved contains the Layer model.\n     *\n     * @memberof LayerService\n     */\n    public abstract GetNativeLayer(layer: MapLayerDirective|number): Promise<Layer>;\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { Polygon } from '../models/polygon';\nimport { MapPolygonDirective } from '../components/map-polygon';\n\n/**\n * The abstract class represents the contract defintions for a polygon service to be implemented by an acutaly underlying\n * map architecture.\n *\n * @export\n * @abstract\n */\n@Injectable()\nexport abstract class PolygonService {\n\n  /**\n   * Adds a polygon to a map. Depending on the polygon context, the polygon will either by added to the map or a\n   * correcsponding layer.\n   *\n   * @abstract\n   * @param polygon - The {@link MapPolygonDirective} to be added.\n   *\n   * @memberof PolygonService\n   */\n  public abstract AddPolygon(polygon: MapPolygonDirective): void;\n\n  /**\n    * Registers an event delegate for a marker.\n    *\n    * @abstract\n    * @param eventName - The name of the event to register (e.g. 'click')\n    * @param polygon - The {@link MapPolygonDirective} for which to register the event.\n    * @returns - Observable emiting an instance of T each time the event occurs.\n    *\n    * @memberof PolygonService\n    */\n  public abstract CreateEventObservable<T>(eventName: string, polygon: MapPolygonDirective): Observable<T>;\n\n  /**\n    * Deletes a polygon.\n    *\n    * @abstract\n    * @param polygon - {@link MapPolygonDirective} to be deleted.\n    * @returns - A promise fullfilled once the polygon has been deleted.\n    *\n    * @memberof PolygonService\n    */\n  public abstract DeletePolygon(polygon: MapPolygonDirective): Promise<void>;\n\n  /**\n   * Obtains geo coordinates for the marker on the click location\n   *\n   * @abstract\n   * @param e - The mouse event.\n   * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\n   *\n   * @memberof MarkerService\n   */\n  public abstract GetCoordinatesFromClick(e: MouseEvent | any): ILatLong;\n\n  /**\n   * Obtains the polygon model for the polygon allowing access to native implementation functionatiliy.\n   *\n   * @abstract\n   * @param polygon - The {@link MapPolygonDirective} for which to obtain the polygon model.\n   * @returns - A promise that when fullfilled contains the {@link Polygon} implementation of the underlying platform.\n   *\n   * @memberof PolygonService\n   */\n  public abstract GetNativePolygon(polygon: MapPolygonDirective): Promise<Polygon>;\n\n  /**\n   * Set the polygon options.\n   *\n   * @abstract\n   * @param polygon - {@link MapPolygonDirective} to be updated.\n   * @param options - {@link IPolygonOptions} object containing the options. Options will be merged with the\n   * options already on the underlying object.\n   * @returns - A promise fullfilled once the polygon options have been set.\n   *\n   * @memberof PolygonService\n   */\n  public abstract SetOptions(polygon: MapPolygonDirective, options: IPolygonOptions): Promise<void>;\n\n  /**\n   * Updates the Polygon path\n   *\n   * @abstract\n   * @param polygon - {@link MapPolygonDirective} to be updated.\n   * @returns - A promise fullfilled once the polygon has been updated.\n   *\n   * @memberof PolygonService\n   */\n  public abstract UpdatePolygon(polygon: MapPolygonDirective): Promise<void>;\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { Polyline } from '../models/polyline';\nimport { MapPolylineDirective } from '../components/map-polyline';\n\n/**\n * The abstract class represents the contract defintions for a polyline service to be implemented by an acutaly underlying\n * map architecture.\n *\n * @export\n * @abstract\n */\n@Injectable()\nexport abstract class PolylineService {\n\n  /**\n   * Adds a polyline to a map. Depending on the polyline context, the polyline will either by added to the map or a\n   * correcsponding layer.\n   *\n   * @abstract\n   * @param polyline - The {@link MapPolylineDirective} to be added.\n   *\n   * @memberof PolylineService\n   */\n  public abstract AddPolyline(polyline: MapPolylineDirective): void;\n\n  /**\n    * Registers an event delegate for a marker.\n    *\n    * @abstract\n    * @param eventName - The name of the event to register (e.g. 'click')\n    * @param polyline - The {@link MapPolylineDirective} for which to register the event.\n    * @returns - Observable emiting an instance of T each time the event occurs.\n    *\n    * @memberof PolylineService\n    */\n  public abstract CreateEventObservable<T>(eventName: string, polyline: MapPolylineDirective): Observable<T>;\n\n  /**\n    * Deletes a polyline.\n    *\n    * @abstract\n    * @param polyline - {@link MapPolylineDirective} to be deleted.\n    * @returns - A promise fullfilled once the polyline has been deleted.\n    *\n    * @memberof PolylineService\n    */\n  public abstract DeletePolyline(polyline: MapPolylineDirective): Promise<void>;\n\n  /**\n   * Obtains geo coordinates for the marker on the click location\n   *\n   * @abstract\n   * @param e - The mouse event.\n   * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\n   *\n   * @memberof MarkerService\n   */\n  public abstract GetCoordinatesFromClick(e: MouseEvent | any): ILatLong;\n\n  /**\n   * Obtains the polyline model for the polyline allowing access to native implementation functionatiliy.\n   *\n   * @abstract\n   * @param polyline - The {@link MapPolylineDirective} for which to obtain the polyline model.\n   * @returns - A promise that when fullfilled contains the {@link Polyline} implementation (or an\n   * array of polylines) for complex paths of the underlying platform.\n   *\n   * @memberof PolylineService\n   */\n  public abstract GetNativePolyline(polyline: MapPolylineDirective): Promise<Polyline|Array<Polyline>>;\n\n  /**\n   * Set the polyline options.\n   *\n   * @abstract\n   * @param polyline - {@link MapPolylineDirective} to be updated.\n   * @param options - {@link IPolylineOptions} object containing the options. Options will be merged with the\n   * options already on the underlying object.\n   * @returns - A promise fullfilled once the polyline options have been set.\n   *\n   * @memberof PolylineService\n   */\n  public abstract SetOptions(polyline: MapPolylineDirective, options: IPolylineOptions): Promise<void>;\n\n  /**\n   * Updates the Polyline path\n   *\n   * @abstract\n   * @param polyline - {@link MapPolylineDirective} to be updated.\n   * @returns - A promise fullfilled once the polyline has been updated.\n   *\n   * @memberof PolylineService\n   */\n  public abstract UpdatePolyline(polyline: MapPolylineDirective): Promise<void>;\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IMarkerOptions } from '../interfaces/imarker-options';\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\nimport { IMarkerIconInfo } from '../interfaces/imarker-icon-info';\nimport { Marker } from '../models/marker';\nimport { Layer } from '../models/layer';\nimport { Polygon } from '../models/polygon';\nimport { Polyline } from '../models/polyline';\nimport { ClusterLayerDirective } from '../components/cluster-layer';\nimport { LayerService } from './layer.service';\n\n/**\n * Abstract class to to define teh cluster layer service contract. Must be realized by implementing provider.\n *\n * @export\n * @abstract\n */\n@Injectable()\nexport abstract class ClusterService extends LayerService {\n\n    /**\n     * Start to actually cluster the entities in a cluster layer. This method should be called after the initial set of entities\n     * have been added to the cluster. This method is used for performance reasons as adding an entitiy will recalculate all clusters.\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\n     * complete to recalculate the clusters.\n     *\n     * @param layer - ClusterLayerDirective component object for which to retrieve the layer.\n     *\n     * @memberof ClusterService\n     */\n    public abstract StartClustering(layer: ClusterLayerDirective): Promise<void>;\n\n    /**\n     * Stop to actually cluster the entities in a cluster layer.\n     * This method is used for performance reasons as adding an entitiy will recalculate all clusters.\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\n     * complete to recalculate the clusters.\n     *\n     * @param layer - ClusterLayerDirective component object for which to retrieve the layer.\n     *\n     * @memberof ClusterService\n     */\n    public abstract StopClustering(layer: ClusterLayerDirective): Promise<void>;\n\n}\n","import { Directive, Input, Output, EventEmitter } from '@angular/core';\n\n/**\n * InfoBoxAction renders an action in an info window {@link InfoBox}\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent, MapMarkerDirective, InfoBoxComponent, InfoBoxActionDirective} from '...';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .map-container { height: 300px; }\n *  `],\n *  template: `\n *    <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\n *      <x-map-marker [Latitude]=\"lat\" [Longitude]=\"lng\" [Label]=\"'M'\">\n *        <x-info-box>\n *          <x-info-box-action [Label]=\"actionlabel\" (ActionClicked)=\"actionClicked(this)\"></x-info-box-action>\n *        </x-info-box>\n *      </x-map-marker>\n *    </x-map>\n *  `\n * })\n * ```\n *\n * @export\n */\n@Directive({\n    selector: 'x-info-box-action'\n})\nexport class InfoBoxActionDirective {\n\n    /**\n     * The label to display on the action\n     *\n     * @memberof InfoBoxActionDirective\n     */\n    @Input()\n    Label: string;\n\n    /**\n     * Emits an event when the action has been clicked\n     *\n     * @memberof InfoBoxActionDirective\n     */\n    @Output()\n    ActionClicked: EventEmitter<void> = new EventEmitter<void>();\n\n}\n","import {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    QueryList,\n    SimpleChange,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IInfoWindowOptions } from '../interfaces/iinfo-window-options';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { InfoBoxService } from '../services/infobox.service';\nimport { MapMarkerDirective } from './map-marker';\nimport { InfoBoxActionDirective } from './infobox-action';\n\n/**\n * internal counter to use as ids for multiple infoboxes.\n */\nlet infoBoxId = 0;\n\n/**\n * InfoBox renders a info window inside a {@link MapMarkerDirective} or standalone.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent, MapMarkerDirective, InfoBoxComponent, InfoBoxActionDirective} from '...';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .map-container { height: 300px; }\n * `],\n *  template: `\n *    <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\n *      <x-map-marker [Latitude]=\"lat\" [Longitude]=\"lng\" [Label]=\"'M'\">\n *        <x-info-box [DisableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *         </x-info-box>\n *       </x-map-marker>\n *     </x-map>\n *  `\n * })\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'x-info-box',\n    template: `\n        <div #infoBoxContent class='info-box-content'>\n            <ng-content></ng-content>\n        </div>`,\n    styles: [`\n        x-map .MicrosoftMap .Infobox .infobox-title { padding: 10px 10px 5px 10px }\n        x-map .MicrosoftMap .Infobox .infobox-info { padding: 3px 10px 10px 10px }\n        x-map .MicrosoftMap .Infobox .infobox-actions { height: auto }\n    `],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InfoBoxComponent implements OnDestroy, OnChanges, AfterViewInit {\n\n    ///\n    /// Field declarations\n    ///\n    private _infoBoxAddedToManager = false;\n    private _id: string = (infoBoxId++).toString();\n\n    /**\n     * HTML conent of the infobox\n     *\n     * @memberof InfoBoxComponent\n     */\n    @ViewChild('infoBoxContent') private _content: ElementRef;\n\n    /**\n     * Zero or more actions to show on the info window\n     *\n     * @memberof InfoBoxComponent\n     */\n    @ContentChildren(InfoBoxActionDirective) public InfoWindowActions: QueryList<InfoBoxActionDirective>;\n\n\n    /**\n     * The latitude position of the info window (only usefull if you use it ouside of a {@link MapMarker}).\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public Latitude: number;\n\n    /**\n     * The longitude position of the info window (only usefull if you use it ouside of a {@link MapMarker}).\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public Longitude: number;\n\n    /**\n     * The title to display in the info window\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public Title: string;\n\n    /**\n     * The description to display in the info window.\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public Description: string;\n\n    /**\n     * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\n     * visible when it opens.\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public DisableAutoPan: boolean;\n\n    /**\n     *  Maximum width of the infowindow, regardless of content's width. This value is only considered\n     *  if it is set before a call to open. To change the maximum width when changing content, call\n     *  close, update maxWidth, and then open.\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public MaxWidth: number;\n\n    /**\n     * Determine whether only one infobox can be open at a time. Note that ANY info box settings.\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public Modal = true;\n\n    /**\n     * Holds the marker that is the host of the info window (if available)\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public HostMarker: MapMarkerDirective;\n\n    /**\n     * Determines visibility of infobox\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public Visible = false;\n\n    /**\n     * Horizontal offset of the infobox from the host marker lat/long or the sepecified coordinates.\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public xOffset: number;\n\n    /**\n     * Vertical offset for the infobox from the host marker lat/long or the specified coordinates.\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public yOffset: number;\n\n    /**\n     * Determines if other info boxes should be closed before opening this one\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Input() public CloseInfoBoxesOnOpen = true;\n\n    ///\n    /// Delegate defintions\n    ///\n\n    /**\n     * Emits an event when the info window is closed.\n     *\n     * @memberof InfoBoxComponent\n     */\n    @Output() public InfoBoxClose: EventEmitter<string> = new EventEmitter<string>();\n\n    ///\n    /// Property declarations.\n    ///\n\n    /**\n     * Gets the HTML content of the info box.\n     *\n     * @readonly\n     * @memberof InfoBoxComponent\n     */\n    public get HtmlContent(): string {\n        if (this._content.nativeElement && this._content.nativeElement.innerText && this._content.nativeElement.innerText.trim() !== '') {\n            return this._content.nativeElement.outerHTML;\n        }\n        return '';\n    }\n\n    /**\n     * Gets the Id of the info box as a string.\n     *\n     * @readonly\n     * @memberof InfoBoxComponent\n     */\n    public get Id(): string { return this._id; }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of InfoBoxComponent.\n     * @param _infoBoxService - Concrete {@link InfoBoxService} implementation for underlying Map architecture.\n     *\n     * @memberof InfoBoxComponent\n     */\n    constructor(private _infoBoxService: InfoBoxService) { }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Closes the Infobox.\n     *\n     * @memberof InfoBoxComponent\n     */\n    public Close(): Promise<void> {\n        return this._infoBoxService.Close(this).then(() => {\n            this.InfoBoxClose.emit(this._id);\n        });\n    }\n\n    /**\n     * Called on after component view as been initialized. Part of the ng Component life cycle.\n     *\n     * @memberof Map\n     */\n    public ngAfterViewInit() {\n        this._infoBoxService.AddInfoWindow(this);\n        this._infoBoxAddedToManager = true;\n        this.HandleEvents();\n    }\n\n    /**\n     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.\n     *\n     * @param changes - Changes that have occured.\n     *\n     * @memberof Map\n     */\n    public ngOnChanges(changes: { [key: string]: SimpleChange }) {\n        if (!this._infoBoxAddedToManager) { return; }\n        if ((changes['latitude'] || changes['longitude']) && typeof this.Latitude === 'number' &&\n            typeof this.Longitude === 'number') {\n            this._infoBoxService.SetPosition(this, {\n                latitude: changes['latitude'].currentValue,\n                longitude: changes['longitude'].currentValue\n            });\n        }\n        this.SetInfoWindowOptions(changes);\n    }\n\n    /**\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\n     *\n     * @memberof Map\n     */\n    public ngOnDestroy() { this._infoBoxService.DeleteInfoWindow(this); }\n\n    /**\n     * Opens a closed info window.\n     *\n     * @param [loc]  - {@link ILatLong } representing position on which to open the window.\n     * @returns - Promise that is fullfilled when the infobox has been opened.\n     *\n     * @memberof InfoBoxComponent\n     */\n    public Open(loc?: ILatLong): Promise<void> {\n        return this._infoBoxService.Open(this, loc);\n    }\n\n    /**\n     * Returns a string representation of the info box.\n     *\n     * @returns - string representation of the info box.\n     *\n     * @memberof InfoBoxComponent\n     */\n    public ToString(): string { return 'InfoBoxComponent-' + this._id; }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Delegate handling the map click events.\n     *\n     * @memberof MapComponent\n     */\n    private HandleEvents(): void {\n        this._infoBoxService.CreateEventObservable('infowindowclose', this).subscribe(e => {\n            this.InfoBoxClose.emit(this._id);\n        });\n    }\n\n    /**\n     * Sets the info window options\n     *\n     * @param changes\n     *\n     * @memberof InfoBoxComponent\n     */\n    private SetInfoWindowOptions(changes: { [key: string]: SimpleChange }) {\n        const options: IInfoWindowOptions = {};\n        if (changes['title']) { options.title = this.Title; }\n        if (changes['description']) { options.description = this.Description; }\n        if (changes['disableAutoPan']) { options.disableAutoPan = this.DisableAutoPan; }\n        if (changes['visible']) { options.visible = this.Visible; }\n        if (changes['xOffset'] || changes['yOffset']) {\n            if (options.pixelOffset == null) { options.pixelOffset = { x: 0, y: 0 }; }\n            options.pixelOffset.x = this.xOffset;\n            options.pixelOffset.y = this.yOffset;\n        }\n        this._infoBoxService.SetOptions(this, options);\n    }\n}\n","import {\n    Directive, SimpleChange, Input, Output, OnDestroy, OnChanges,\n    EventEmitter, ContentChild, AfterContentInit, ViewContainerRef\n} from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IPoint } from '../interfaces/ipoint';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { IMarkerEvent } from '../interfaces/imarker-event';\nimport { IMarkerIconInfo } from '../interfaces/imarker-icon-info';\nimport { MarkerService } from '../services/marker.service';\nimport { InfoBoxComponent } from './infobox';\n\n/**\n * internal counter to use as ids for marker.\n */\nlet markerId = 0;\n\n/**\n * MapMarkerDirective renders a map marker inside a {@link MapComponent}.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent, MapMarkerDirective} from '...';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *   .map-container {\n *     height: 300px;\n *   }\n * `],\n * template: `\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\n *      <x-map-marker [Latitude]=\"lat\" [Longitude]=\"lng\" [Label]=\"'M'\"></x-map-marker>\n *   </x-map>\n * `\n * })\n * ```\n *\n * @export\n */\n@Directive({\n    selector: 'x-map-marker'\n})\nexport class MapMarkerDirective implements OnDestroy, OnChanges, AfterContentInit {\n\n    ///\n    /// Field declarations\n    ///\n    private _clickTimeout: Subscription = null;\n    private _events: Subscription[] = [];\n    private _id: string;\n    private _inClusterLayer = false;\n    private _inCustomLayer = false;\n\n    /**\n     * Any InfoBox that is a direct children of the marker\n     *\n     * @protected\n     * @memberof MapMarkerDirective\n     */\n    @ContentChild(InfoBoxComponent) protected _infoBox: InfoBoxComponent;\n\n    private _layerId: number;\n    private _markerAddedToManger = false;\n\n    /**\n     *  Icon anchor relative to marker root\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public Anchor: IPoint;\n\n    /**\n     * This event is fired when the DOM dblclick event is fired on the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() DblClick: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * This event is repeatedly fired while the user drags the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() Drag: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * This event is fired when the user stops dragging the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() DragEnd: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * If true, the marker can be dragged. Default value is false.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public Draggable = false;\n\n    /**\n     * This event is fired when the user starts dragging the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() DragStart: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * This event emitter gets emitted when a marker icon is being created.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() public DynamicMarkerCreated: EventEmitter<IMarkerIconInfo> = new EventEmitter<IMarkerIconInfo>();\n\n    /**\n     * Icon height\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public Height: number;\n\n    /**\n     * Information for dynamic, custom created icons.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public IconInfo: IMarkerIconInfo;\n\n    /**\n     * Icon (the URL of the image) for the foreground.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public IconUrl: string;\n\n    /**\n     * True to indiciate whether this is the first marker in a set.\n     * Use this for bulk operations (particularily clustering) to ensure performance.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public IsFirstInSet = false;\n\n    /**\n     * True to indiciate whether this is the last marker in a set.\n     * Use this for bulk operations (particularily clustering) to ensure performance.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public IsLastInSet = true;\n\n    /**\n     * The label (a single uppercase character) for the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public Label: string;\n\n    /**\n     * The latitude position of the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public Latitude: number;\n\n    /**\n     * The longitude position of the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public Longitude: number;\n\n    /**\n     * This event emitter gets emitted when the user clicks on the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() public MarkerClick: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * Arbitary metadata to assign to the Marker. This is useful for events\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public Metadata: Map<string, any> = new Map<string, any>();\n\n    /**\n     * This event is fired when the DOM mousedown event is fired on the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() MouseDown: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * This event is fired when the DOM mousemove event is fired on the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() MouseMove: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * This event is fired on marker mouseout.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() MouseOut: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * This event is fired on marker mouseover.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() MouseOver: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the marker\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() MouseUp: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * This even is fired when the marker is right-clicked on.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Output() RightClick: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     *  The title of the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public Title: string;\n\n    /**\n     * Sets the visibility of the marker\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public Visible: boolean;\n\n    /**\n     * Icon Width\n     *\n     * @memberof MapMarkerDirective\n     */\n    @Input() public Width: number;\n\n    ///\n    /// Delegates\n    ///\n\n\n\n\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Getswhether the marker has already been added to the marker service and is ready for use.\n     *\n     * @readonly\n     * @memberof MapMarkerDirective\n     */\n    public get AddedToManager(): boolean { return this._markerAddedToManger; }\n\n    /**\n     * Gets the id of the marker as a string.\n     *\n     * @readonly\n     * @memberof MapMarkerDirective\n     */\n    public get Id(): string { return this._id; }\n\n    /**\n     * Gets whether the marker is in a cluster layer. See {@link ClusterLayer}.\n     *\n     * @readonly\n     * @memberof MapMarkerDirective\n     */\n    public get InClusterLayer(): boolean { return this._inClusterLayer; }\n\n    /**\n     * Gets whether the marker is in a custom layer. See {@link MapLayer}.\n     *\n     * @readonly\n     * @memberof MapMarkerDirective\n     */\n    public get InCustomLayer(): boolean { return this._inCustomLayer; }\n\n    /**\n     * gets the id of the Layer the marker belongs to.\n     *\n     * @readonly\n     * @memberof MapMarkerDirective\n     */\n    public get LayerId(): number { return this._layerId; }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of MapMarkerDirective.\n     * @param _markerService - Concreate implementation of a {@link MarkerService}.\n     * @param _containerRef - View container hosting the marker.\n     * Used to determine parent layer through markup.\n     *\n     * @memberof MapMarkerDirective\n     */\n    constructor(private _markerService: MarkerService, private _containerRef: ViewContainerRef) {\n        this._id = (markerId++).toString();\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Translates a marker geo location to a pixel location relative to the map viewport.\n     *\n     * @param [loc] - {@link ILatLong} containing the geo coordinates. If null, the marker's coordinates are used.\n     * @returns - A promise that when fullfilled contains an {@link IPoint} representing the pixel coordinates.\n     *\n     * @memberof MapMarkerDirective\n     */\n    public LocationToPixel(loc?: ILatLong): Promise<IPoint> {\n        return this._markerService.LocationToPoint(loc ? loc : this);\n    }\n\n    /**\n     * Called after Component content initialization. Part of ng Component life cycle.\n     *\n     * @memberof MapMarkerDirective\n     */\n    public ngAfterContentInit() {\n        if (this._infoBox != null) { this._infoBox.HostMarker = this; }\n        if (this._containerRef.element.nativeElement.parentElement) {\n            const parentName: string = this._containerRef.element.nativeElement.parentElement.tagName;\n            if (parentName.toLowerCase() === 'x-cluster-layer') {\n                this._inClusterLayer = true;\n            } else if (parentName.toLowerCase() === 'x-map-layer') {\n                this._inCustomLayer = true;\n            }\n            this._layerId = Number(this._containerRef.element.nativeElement.parentElement.attributes['layerId']);\n        }\n        if (!this._markerAddedToManger) {\n            this._markerService.AddMarker(this);\n            this._markerAddedToManger = true;\n            this.AddEventListeners();\n        }\n    }\n\n    /**\n     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.\n     *\n     * @param changes - collection of changes.\n     *\n     * @memberof MapMarkerDirective\n     */\n    public ngOnChanges(changes: { [key: string]: SimpleChange }) {\n        if (typeof this.Latitude !== 'number' || typeof this.Longitude !== 'number') {\n            return;\n        }\n        if (!this._markerAddedToManger) { return; }\n        if (changes['Latitude'] || changes['Longitude']) {\n            this._markerService.UpdateMarkerPosition(this);\n        }\n        if (changes['Title']) {\n            this._markerService.UpdateTitle(this);\n        }\n        if (changes['Label']) {\n            this._markerService.UpdateLabel(this);\n        }\n        if (changes['Draggable']) {\n            this._markerService.UpdateDraggable(this);\n        }\n        if (changes['IconUrl'] || changes['IconInfo']) {\n            this._markerService.UpdateIcon(this);\n        }\n        if (changes['Anchor']) {\n            this._markerService.UpdateAnchor(this);\n        }\n        if (changes['Visible']) {\n            this._markerService.UpdateVisible(this);\n        }\n    }\n\n    /**\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\n     *\n     *\n     * @memberof MapMarkerDirective\n     */\n    public ngOnDestroy() {\n        this._markerService.DeleteMarker(this);\n        this._events.forEach((s) => s.unsubscribe());\n    }\n\n    /**\n     * Obtains a string representation of the Marker Id.\n     * @returns - string representation of the marker id.\n     * @memberof MapMarkerDirective\n     */\n    public toString(): string { return 'MapMarker-' + this._id.toString(); }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Adds various event listeners for the marker.\n     *\n     * @memberof MapMarkerDirective\n     */\n    private AddEventListeners(): void {\n        const _getEventArg: (e: MouseEvent) => IMarkerEvent = e => {\n            return {\n                Marker: this,\n                Click: e,\n                Location: this._markerService.GetCoordinatesFromClick(e),\n                Pixels: this._markerService.GetPixelsFromClick(e)\n            };\n        };\n\n        this._events.push(this._markerService.CreateEventObservable('click', this).subscribe((e: MouseEvent) => {\n            ///\n            /// this is necessary since map will treat a doubleclick first as two clicks...'\n            ///\n            this._clickTimeout = timer(300).subscribe(n => {\n                if (this._infoBox != null) {\n                    this._infoBox.Open(this._markerService.GetCoordinatesFromClick(e));\n                }\n                this.MarkerClick.emit(_getEventArg(e));\n            });\n        }));\n\n        this._events.push(this._markerService.CreateEventObservable('dblclick', this).subscribe((e: MouseEvent) => {\n            if (this._clickTimeout) {\n                this._clickTimeout.unsubscribe();\n                this._clickTimeout = null;\n            }\n            this.DblClick.emit(_getEventArg(e));\n        }));\n\n        const handlers = [\n            { name: 'drag', handler: (ev: MouseEvent) => this.Drag.emit(_getEventArg(ev)) },\n            { name: 'dragend', handler: (ev: MouseEvent) => this.DragEnd.emit(_getEventArg(ev)) },\n            { name: 'dragstart', handler: (ev: MouseEvent) => this.DragStart.emit(_getEventArg(ev)) },\n            { name: 'mousedown', handler: (ev: MouseEvent) => this.MouseDown.emit(_getEventArg(ev)) },\n            { name: 'mousemove', handler: (ev: MouseEvent) => this.MouseMove.emit(_getEventArg(ev)) },\n            { name: 'mouseout', handler: (ev: MouseEvent) => this.MouseOut.emit(_getEventArg(ev)) },\n            { name: 'mouseover', handler: (ev: MouseEvent) => this.MouseOver.emit(_getEventArg(ev)) },\n            { name: 'mouseup', handler: (ev: MouseEvent) => this.MouseUp.emit(_getEventArg(ev)) },\n            { name: 'rightclick', handler: (ev: MouseEvent) => this.RightClick.emit(_getEventArg(ev)) },\n        ];\n        handlers.forEach((obj) => {\n            const os = this._markerService.CreateEventObservable(obj.name, this).subscribe(obj.handler);\n            this._events.push(os);\n        });\n    }\n\n}\n","import {\n    Component,\n    EventEmitter,\n    OnChanges,\n    OnInit,\n    OnDestroy,\n    SimpleChange,\n    ViewChild,\n    AfterViewInit,\n    ContentChildren,\n    Input,\n    Output,\n    ElementRef,\n    HostBinding,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    NgZone\n} from '@angular/core';\nimport { MapServiceFactory } from '../services/mapservicefactory';\nimport { MapService } from '../services/map.service';\nimport { MarkerService } from '../services/marker.service';\nimport { InfoBoxService } from '../services/infobox.service';\nimport { LayerService } from '../services/layer.service';\nimport { PolygonService } from '../services/polygon.service';\nimport { PolylineService } from '../services/polyline.service';\nimport { ClusterService } from '../services/cluster.service';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { IBox } from '../interfaces/ibox';\nimport { IMapOptions } from '../interfaces/imap-options';\nimport { MapTypeId } from '../models/map-type-id';\nimport { MapMarkerDirective } from './map-marker';\n\n/**\n * Renders a map based on a given provider.\n * **Important note**: To be able see a map in the browser, you have to define a height for the CSS\n * class `map-container`.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent} from '...';\n *\n * @Component({\n *  selector: 'my-map',\n *  styles: [`\n *    .map-container { height: 300px; }\n * `],\n *  template: `\n *    <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\"></x-map>\n *  `\n * })\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'x-map',\n    providers: [\n        { provide: MapService, deps: [MapServiceFactory], useFactory: MapServiceCreator },\n        { provide: MarkerService, deps: [MapServiceFactory, MapService, LayerService, ClusterService], useFactory: MarkerServiceFactory },\n        {\n            provide: InfoBoxService, deps: [MapServiceFactory, MapService,\n                MarkerService], useFactory: InfoBoxServiceFactory\n        },\n        { provide: LayerService, deps: [MapServiceFactory, MapService], useFactory: LayerServiceFactory },\n        { provide: ClusterService, deps: [MapServiceFactory, MapService], useFactory: ClusterServiceFactory },\n        { provide: PolygonService, deps: [MapServiceFactory, MapService, LayerService], useFactory: PolygonServiceFactory },\n        { provide: PolylineService, deps: [MapServiceFactory, MapService, LayerService], useFactory: PolylineServiceFactory }\n    ],\n    template: `\n        <div #container class='map-container-inner'></div>\n        <div class='map-content'>\n            <ng-content></ng-content>\n        </div>\n    `,\n    styles: [`\n        .map-container-inner { width: inherit; height: inherit; }\n        .map-container-inner div { background-repeat: no-repeat; }\n        .map-content { display:none; }\n    `],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MapComponent implements OnChanges, OnInit, AfterViewInit, OnDestroy {\n\n    ///\n    /// Field declarations\n    ///\n    private _longitude = 0;\n    private _latitude = 0;\n    private _zoom = 0;\n    private _clickTimeout: number | NodeJS.Timer;\n    private _options: IMapOptions = {};\n    private _box: IBox = null;\n    private _mapPromise: Promise<void>;\n    @HostBinding('class.map-container') public _containerClass: boolean = true;\n    @ViewChild('container') private _container: ElementRef;\n    @ContentChildren(MapMarkerDirective) private _markers: Array<MapMarkerDirective>;\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Get or sets the maximum and minimum bounding box for map.\n     *\n     * @memberof MapComponent\n     */\n    @Input()\n    public get Box(): IBox { return this._box; }\n    public set Box(val: IBox) { this._box = val; }\n\n    /**\n     * Gets or sets the latitude that sets the center of the map.\n     *\n     * @memberof MapComponent\n     */\n    @Input()\n    public get Latitude(): number | string { return this._longitude; }\n    public set Latitude(value: number | string) {\n        this._latitude = this.ConvertToDecimal(value);\n        this.UpdateCenter();\n    }\n\n    /**\n     * Gets or sets the longitude that sets the center of the map.\n     *\n     * @memberof MapComponent\n     */\n    @Input()\n    public get Longitude(): number | string { return this._longitude; }\n    public set Longitude(value: number | string) {\n        this._longitude = this.ConvertToDecimal(value);\n        this.UpdateCenter();\n    }\n\n    /**\n     * Gets or sets general map Options\n     *\n     * @memberof MapComponent\n     */\n    @Input()\n    public get Options(): IMapOptions { return this._options; }\n    public set Options(val: IMapOptions) { this._options = val; }\n\n    /**\n     * Gets or sets the zoom level of the map. The default value is `8`.\n     *\n     * @memberof MapComponent\n     */\n    @Input()\n    public get Zoom(): number | string { return this._zoom; }\n    public set Zoom(value: number | string) {\n        this._zoom = this.ConvertToDecimal(value, 8);\n        if (typeof this._zoom === 'number') {\n            this._mapService.SetZoom(this._zoom);\n        }\n    }\n\n    /**\n     * This event emitter is fired when the map bounding box changes.\n     *\n     * @memberof MapComponent\n     */\n    @Output()\n    BoundsChange: EventEmitter<IBox> = new EventEmitter<IBox>();\n\n    /**\n     * This event emitter is fired when the map center changes.\n     *\n     * @memberof MapComponent\n     */\n    @Output()\n    CenterChange: EventEmitter<ILatLong> = new EventEmitter<ILatLong>();\n\n    /**\n     * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n     * marker or infoWindow).\n     *\n     * @memberof MapComponent\n     */\n    @Output()\n    MapClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n    /**\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     *\n     * @memberof MapComponent\n     */\n    @Output()\n    MapDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n    /**\n     * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     *\n     * @memberof MapComponent\n     */\n    @Output()\n    MapRightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n    /**\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     *\n     * @memberof MapComponent\n     */\n    @Output()\n    MapMouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n    /**\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     *\n     * @memberof MapComponent\n     */\n    @Output()\n    MapMouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n    /**\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     *\n     * @memberof MapComponent\n     */\n    @Output()\n    MapMouseMove: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n    /**\n     * The event emitter is fired when the map service is available and the maps has been\n     * Initialized (but not necessarily created). It contains a Promise that when fullfilled returns\n     * the main map object of the underlying platform.\n     *\n     * @memberof MapComponent\n     */\n    @Output()\n    MapPromise: EventEmitter<Promise<any>> = new EventEmitter<Promise<any>>();\n\n    /**\n     * This event emiiter is fired when the map zoom changes\n     *\n     * @memberof MapComponent\n     */\n    @Output()\n    ZoomChange: EventEmitter<Number> = new EventEmitter<Number>();\n\n    /**\n     * This event emitter is fired when the map service is available and the maps has been\n     * Initialized\n     * @memberOf MapComponent\n     */\n    @Output()\n    MapService: EventEmitter<MapService> = new EventEmitter<MapService>();\n\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of MapComponent.\n     *\n     * @param _mapService - Concreted implementation of a map service for the underlying maps implementations.\n     *                                   Generally provided via injections.\n     * @memberof MapComponent\n     */\n    constructor(private _mapService: MapService, private _zone: NgZone) { }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Called on Component initialization. Part of ng Component life cycle.\n     *\n     * @memberof MapComponent\n     */\n    public ngOnInit(): void {\n        this.MapPromise.emit(this._mapService.MapPromise);\n        this.MapService.emit(this._mapService);\n    }\n    \n    public ngAfterViewInit() {\n        this.InitMapInstance(this._container.nativeElement);\n    }\n\n    /**\n     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.\n     *\n     * @param changes - Changes that have occured.\n     *\n     * @memberof MapComponent\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n        if (this._mapPromise) {\n            if (changes['Box']) {\n                if (this._box != null) {\n                    this._mapService.SetViewOptions(<IMapOptions>{\n                        bounds: this._box\n                    });\n                }\n            }\n            if (changes['Options']) {\n                this._mapService.SetMapOptions(this._options);\n            }\n        }\n    }\n\n    /**\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\n     *\n     * @memberof MapComponent\n     */\n    public ngOnDestroy(): void {\n        this._mapService.DisposeMap();\n    }\n\n    /**\n     * Triggers a resize event on the map instance.\n     *\n     * @returns - A promise that gets resolved after the event was triggered.\n     *\n     * @memberof MapComponent\n     */\n    public TriggerResize(): Promise<void> {\n        // Note: When we would trigger the resize event and show the map in the same turn (which is a\n        // common case for triggering a resize event), then the resize event would not\n        // work (to show the map), so we trigger the event in a timeout.\n        return new Promise<void>((resolve) => {\n            setTimeout(\n                () => { return this._mapService.TriggerMapEvent('resize').then(() => resolve()); });\n        });\n    }\n\n    ///\n    /// Private methods.\n    ///\n\n    /**\n     * Converts a number-ish value to a number.\n     *\n     * @param value - The value to convert.\n     * @param [defaultValue=null] - Default value to use if the conversion cannot be performed.\n     * @returns - Converted number of the default.\n     *\n     * @memberof MapComponent\n     */\n    private ConvertToDecimal(value: string | number, defaultValue: number = null): number {\n        if (typeof value === 'string') {\n            return parseFloat(value);\n        } else if (typeof value === 'number') {\n            return <number>value;\n        }\n        return defaultValue;\n    }\n\n    /**\n     * Delegate handling the map click events.\n     *\n     * @memberof MapComponent\n     */\n    private HandleMapClickEvents(): void {\n        this._mapService.SubscribeToMapEvent<any>('click').subscribe(e => {\n            //\n            // this is necessary since bing will treat a doubleclick first as two clicks...'\n            ///\n            this._clickTimeout = setTimeout(() => {\n                this.MapClick.emit(<MouseEvent>e);\n            }, 300);\n        });\n        this._mapService.SubscribeToMapEvent<any>('dblclick').subscribe(e => {\n            if (this._clickTimeout) {\n                clearTimeout(<NodeJS.Timer>this._clickTimeout);\n            }\n            this.MapDblClick.emit(<MouseEvent>e);\n        });\n        this._mapService.SubscribeToMapEvent<any>('rightclick').subscribe(e => {\n            this.MapRightClick.emit(<MouseEvent>e);\n        });\n        this._mapService.SubscribeToMapEvent<any>('mouseover').subscribe(e => {\n            this.MapMouseOver.emit(<MouseEvent>e);\n        });\n        this._mapService.SubscribeToMapEvent<any>('mouseout').subscribe(e => {\n            this.MapMouseOut.emit(<MouseEvent>e);\n        });\n        this._mapService.SubscribeToMapEvent<any>('mousemove').subscribe(e => {\n            this.MapMouseMove.emit(<MouseEvent>e);\n        });\n    }\n\n    /**\n     * Delegate handling map center change events.\n     *\n     * @memberof MapComponent\n     */\n    private HandleMapBoundsChange(): void {\n        this._mapService.SubscribeToMapEvent<void>('boundschanged').subscribe(() => {\n            this._mapService.GetBounds().then((bounds: IBox) => {\n                this.BoundsChange.emit(bounds);\n            });\n        });\n    }\n\n    /**\n     * Delegate handling map center change events.\n     *\n     * @memberof MapComponent\n     */\n    private HandleMapCenterChange(): void {\n        this._mapService.SubscribeToMapEvent<void>('centerchanged').subscribe(() => {\n            this._mapService.GetCenter().then((center: ILatLong) => {\n                if (this._latitude !== center.latitude || this._longitude !== center.longitude) {\n                    this._latitude = center.latitude;\n                    this._longitude = center.longitude;\n                    this.CenterChange.emit(<ILatLong>{ latitude: this._latitude, longitude: this._longitude });\n                }\n            });\n        });\n    }\n\n    /**\n     * Delegate handling map zoom change events.\n     *\n     * @memberof MapComponent\n     */\n    private HandleMapZoomChange(): void {\n        this._mapService.SubscribeToMapEvent<void>('zoomchanged').subscribe(() => {\n            this._mapService.GetZoom().then((z: number) => {\n                if (this._zoom !== z) {\n                    this._zoom = z;\n                    this.ZoomChange.emit(z);\n                }\n            });\n        });\n    }\n\n    /**\n     * Initializes the map.\n     *\n     * @param el - Html elements which will host the map canvas.\n     *\n     * @memberof MapComponent\n     */\n    private InitMapInstance(el: HTMLElement) {\n        this._zone.runOutsideAngular(() => {\n            if (this._options.center == null) { this._options.center = { latitude: this._latitude, longitude: this._longitude }; }\n            if (this._options.zoom == null) { this._options.zoom = this._zoom; }\n            if (this._options.mapTypeId == null) { this._options.mapTypeId = MapTypeId.hybrid; }\n            if (this._box != null) { this._options.bounds = this._box; }\n            this._mapPromise = this._mapService.CreateMap(el, this._options);\n            this.HandleMapCenterChange();\n            this.HandleMapBoundsChange();\n            this.HandleMapZoomChange();\n            this.HandleMapClickEvents();\n        });\n    }\n\n    /**\n     * Updates the map center based on the geo properties of the component.\n     *\n     * @memberof MapComponent\n     */\n    private UpdateCenter(): void {\n        if (typeof this._latitude !== 'number' || typeof this._longitude !== 'number') {\n            return;\n        }\n        this._mapService.SetCenter({\n            latitude: this._latitude,\n            longitude: this._longitude,\n        });\n    }\n}\n\n/**\n * Factory function to generate a cluster service instance. This is necessary because of constraints with AOT that do no allow\n * us to use lamda functions inline.\n *\n * @export\n * @param f - The {@link MapServiceFactory} implementation.\n * @param m - A {@link MapService} instance.\n * @returns - A concrete instance of a Cluster Service based on the underlying map architecture\n */\nexport function ClusterServiceFactory(f: MapServiceFactory, m: MapService): ClusterService { return f.CreateClusterService(m); }\n\n/**\n * Factory function to generate a infobox service instance. This is necessary because of constraints with AOT that do no allow\n * us to use lamda functions inline.\n *\n * @export\n * @param f - The {@link MapServiceFactory} implementation.\n * @param m - A {@link MapService} instance.\n * @param m - A {@link MarkerService} instance.\n * @returns - A concrete instance of a InfoBox Service based on the underlying map architecture.\n */\nexport function InfoBoxServiceFactory(f: MapServiceFactory, m: MapService,\n    ma: MarkerService): InfoBoxService { return f.CreateInfoBoxService(m, ma); }\n\n/**\n * Factory function to generate a layer service instance. This is necessary because of constraints with AOT that do no allow\n * us to use lamda functions inline.\n *\n * @export\n * @param f - The {@link MapServiceFactory} implementation.\n * @param m - A {@link MapService} instance.\n * @returns - A concrete instance of a Layer Service based on the underlying map architecture.\n */\nexport function LayerServiceFactory(f: MapServiceFactory, m: MapService): LayerService { return f.CreateLayerService(m); }\n\n/**\n * Factory function to generate a map service instance. This is necessary because of constraints with AOT that do no allow\n * us to use lamda functions inline.\n *\n * @export\n * @param f - The {@link MapServiceFactory} implementation.\n * @returns - A concrete instance of a MapService based on the underlying map architecture.\n */\nexport function MapServiceCreator(f: MapServiceFactory): MapService { return f.Create(); }\n\n/**\n * Factory function to generate a marker service instance. This is necessary because of constraints with AOT that do no allow\n * us to use lamda functions inline.\n *\n * @export\n * @param f - The {@link MapServiceFactory} implementation.\n * @param m - A {@link MapService} instance.\n * @param l - A {@link LayerService} instance.\n * @param c - A {@link ClusterService} instance.\n * @returns - A concrete instance of a Marker Service based on the underlying map architecture.\n */\nexport function MarkerServiceFactory(f: MapServiceFactory, m: MapService, l: LayerService, c: ClusterService): MarkerService {\n    return f.CreateMarkerService(m, l, c);\n}\n\n/**\n * Factory function to generate a polygon service instance. This is necessary because of constraints with AOT that do no allow\n * us to use lamda functions inline.\n *\n * @export\n * @param f - The {@link MapServiceFactory} implementation.\n * @param m - A {@link MapService} instance.\n * @param l - A {@link LayerService} instance.\n * @returns - A concrete instance of a Polygon Service based on the underlying map architecture.\n */\nexport function PolygonServiceFactory(f: MapServiceFactory, m: MapService, l: LayerService): PolygonService {\n    return f.CreatePolygonService(m, l);\n}\n\n/**\n * Factory function to generate a polyline service instance. This is necessary because of constraints with AOT that do no allow\n * us to use lamda functions inline.\n *\n * @export\n * @param f - The {@link MapServiceFactory} implementation.\n * @param m - A {@link MapService} instance.\n * @param l - A {@link LayerService} instance.\n * @returns - A concrete instance of a Polyline Service based on the underlying map architecture.\n */\nexport function PolylineServiceFactory(f: MapServiceFactory, m: MapService, l: LayerService): PolylineService {\n    return f.CreatePolylineService(m, l);\n}\n","import { Directive, EventEmitter, OnInit, OnDestroy, OnChanges, AfterContentInit, SimpleChange,\n    ContentChildren, Input, ViewContainerRef } from '@angular/core';\nimport { LayerService } from '../services/layer.service';\nimport { MapMarkerDirective } from './map-marker';\n\n/**\n * internal counter to use as ids for multiple layers.\n */\nlet layerId = 0;\n\n/**\n * MapLayerDirective creates a layer on a {@link MapComponent}.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent, MapMarkerDirective} from '...';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *   .map-container {\n *     height: 300px;\n *   }\n * `],\n * template: `\n *   <x-map [Latitude]='lat' [Longitude]='lng' [Zoom]='zoom'>\n *     <x-map-layer [Visible]='visible'>\n *         <x-map-marker [Latitude]='lat' [Longitude]='lng' [Label]=''M''></x-map-marker>\n *     </x-map-layer>\n *   </x-map>\n * `\n * })\n * ```\n *\n * @export\n */\n@Directive({\n    selector: 'x-map-layer'\n})\nexport class MapLayerDirective implements OnInit, OnDestroy, OnChanges {\n\n    ///\n    /// Field declarations\n    ///\n    protected _visible = true;\n    protected _addedToManager = false;\n    protected _id: number;\n\n    @ContentChildren(MapMarkerDirective) protected _markers: Array<MapMarkerDirective>;\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Gets or sets the layer visibility.\n     *\n     * @memberof MapLayerDirective\n     */\n    @Input()\n        public get Visible(): boolean { return this._visible; }\n        public set Visible(val: boolean) { this._visible = val; }\n\n    /**\n     * Gets the layer id.\n     *\n     * @readonly\n     * @memberof MapLayerDirective\n     */\n    public get Id(): number { return this._id; }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of MapLayerDirective.\n     * @param _layerService - Concreted implementation of a layer service for the underlying maps implementations.\n     * Generally provided via injections.\n     * @param _containerRef - Reference to the container hosting the map canvas. Generally provided via injection.\n     *\n     * @memberof MapLayerDirective\n     */\n    constructor(protected _layerService: LayerService, protected _containerRef: ViewContainerRef) {\n        this._id = layerId++;\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Called on Component initialization. Part of ng Component life cycle.\n     *\n     * @memberof MapLayerDirective\n     */\n    public ngOnInit(): void {\n        this._containerRef.element.nativeElement.attributes['layerId'] = this._id.toString();\n        this._layerService.AddLayer(this);\n        this._addedToManager = true;\n    }\n\n    /**\n     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.\n     *\n     * @param changes - Changes that have occured.\n     *\n     * @memberof MapLayerDirective\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n        if (!this._addedToManager) { return; }\n        if (changes['Visible']) {\n            this._layerService.GetNativeLayer(this).then(l => {\n                l.SetVisible(!l.GetVisible());\n            });\n        }\n    }\n\n    /**\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\n     *\n     *\n     * @memberof MapLayerDirective\n     */\n    public ngOnDestroy(): void {\n        this._layerService.DeleteLayer(this);\n    }\n}\n","import { IClusterIconInfo } from '../interfaces/icluster-icon-info';\nimport { Directive, EventEmitter, OnInit, OnDestroy, OnChanges, SimpleChange,\n    ContentChildren, Input, ViewContainerRef } from '@angular/core';\nimport { Marker } from '../models/marker';\nimport { Layer } from '../models/layer';\nimport { ClusterPlacementMode } from '../models/cluster-placement-mode';\nimport { ClusterClickAction } from '../models/cluster-click-action';\nimport { IPoint } from '../interfaces/ipoint';\nimport { IClusterOptions } from '../interfaces/icluster-options';\nimport { IMarkerIconInfo} from '../interfaces/imarker-icon-info';\nimport { ClusterService } from '../services/cluster.service';\nimport { ISpiderClusterOptions } from '../interfaces/ispider-cluster-options';\nimport { MapMarkerDirective } from './map-marker';\nimport { MapLayerDirective } from './map-layer';\n\n/**\n *\n * Creates a cluster layer on a {@link MapComponent}.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent, MapMarkerDirective} from '...';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *   .map-container {\n *     height: 300px;\n *   }\n * `],\n * template: `\n *   <x-map [Latitude]='lat' [Longitude]='lng' [Zoom]='zoom'>\n *     <x-cluster-layer [Visible]='visible'>\n *         <x-map-marker [Latitude]='lat' [Longitude]='lng' [Label]=''M''></x-map-marker>\n *     </x-cluster-layer>\n *   </x-map>\n * `\n * })\n * ```\n *\n * @export\n */\n@Directive({\n    selector: 'x-cluster-layer'\n})\nexport class ClusterLayerDirective extends MapLayerDirective implements OnInit, OnDestroy, OnChanges {\n\n    ///\n    /// Field declarations\n    ///\n    private _clusteringEnabled = true;\n    private _clusterPlacementMode: ClusterPlacementMode = ClusterPlacementMode.MeanValue;\n    private _clusterClickAction: ClusterClickAction = ClusterClickAction.ZoomIntoCluster;\n    private _spiderClusterOptions: ISpiderClusterOptions;\n    private _zIndex: number;\n    private _gridSize: number;\n    private _layerOffset: IPoint;\n    private _iconInfo: IMarkerIconInfo;\n    private _minimumClusterSize: number;\n    private _styles: Array<IClusterIconInfo>;\n    private _useDynamicSizeMarker = false;\n    private _dynamicMarkerBaseSize = 18;\n    private _dynamicMarkerRanges: Map<number, string> = new Map<number, string>([\n        [10, 'rgba(20, 180, 20, 0.5)'],\n        [100, 'rgba(255, 210, 40, 0.5)'],\n        [Number.MAX_SAFE_INTEGER , 'rgba(255, 40, 40, 0.5)']\n    ]);\n    private _zoomOnClick = true;\n    private _iconCreationCallback: (m: Array<Marker>, i: IMarkerIconInfo) => string;\n\n    ///\n    /// Property defintions\n    ///\n\n    /**\n     * Gets or sets the the Cluster Click Action {@link ClusterClickAction}.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get ClusterClickAction(): ClusterClickAction  { return this._clusterClickAction; }\n        public set ClusterClickAction(val: ClusterClickAction) { this._clusterClickAction = val; }\n\n    /**\n     * Gets or sets whether the clustering layer enables clustering. When set to false, the layer\n     * behaves like a generic layer. This is handy if you want to prevent clustering at certain zoom levels.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get ClusteringEnabled(): boolean  { return this._clusteringEnabled; }\n        public set ClusteringEnabled(val: boolean) { this._clusteringEnabled = val; }\n\n    /**\n     * Gets or sets the cluster placement mode. {@link ClusterPlacementMode}\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get ClusterPlacementMode(): ClusterPlacementMode  { return this._clusterPlacementMode; }\n        public set ClusterPlacementMode(val: ClusterPlacementMode) { this._clusterPlacementMode = val; }\n\n    /**\n     * Gets or sets the callback invoked to create a custom cluster marker. Note that when {@link UseDynamicSizeMarkers} is enabled,\n     * you cannot set a custom marker callback.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get CustomMarkerCallback(): (m: Array<Marker>, i: IMarkerIconInfo) => string  { return this._iconCreationCallback; }\n        public set CustomMarkerCallback(val: (m: Array<Marker>, i: IMarkerIconInfo) => string) {\n            if (this._useDynamicSizeMarker) {\n                throw(\n                    new Error(`You cannot set a custom marker callback when UseDynamicSizeMarkers is set to true.\n                    Set UseDynamicSizeMakers to false.`)\n                );\n            }\n            this._iconCreationCallback = val;\n        }\n\n    /**\n     * Gets or sets the base size of dynamic markers in pixels. The actualy size of the dynamic marker is based on this.\n     * See {@link UseDynamicSizeMarkers}.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get DynamicMarkerBaseSize(): number  { return this._dynamicMarkerBaseSize; }\n        public set DynamicMarkerBaseSize(val: number) { this._dynamicMarkerBaseSize = val; }\n\n    /**\n     * Gets or sets the ranges to use to calculate breakpoints and colors for dynamic markers.\n     * The map contains key/value pairs, with the keys being\n     * the breakpoint sizes and the values the colors to be used for the dynamic marker in that range. See {@link UseDynamicSizeMarkers}.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get DynamicMarkerRanges(): Map<number, string>  { return this._dynamicMarkerRanges; }\n        public set DynamicMarkerRanges(val: Map<number, string>) { this._dynamicMarkerRanges = val; }\n\n    /**\n     * Gets or sets the grid size to be used for clustering.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get GridSize(): number  { return this._gridSize; }\n        public set GridSize(val: number) { this._gridSize = val; }\n\n    /**\n     * Gets or sets the IconInfo to be used to create a custom cluster marker. Supports font-based, SVG, graphics and more.\n     * See {@link IMarkerIconInfo}.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get IconInfo(): IMarkerIconInfo  { return this._iconInfo; }\n        public set IconInfo(val: IMarkerIconInfo) { this._iconInfo = val; }\n\n    /**\n     * Gets or sets An offset applied to the positioning of the layer.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get LayerOffset(): IPoint  { return this._layerOffset; }\n        public set LayerOffset(val: IPoint) { this._layerOffset = val; }\n\n    /**\n     * Gets or sets the minimum pins required to form a cluster\n     *\n     * @readonly\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get MinimumClusterSize(): number  { return this._minimumClusterSize; }\n        public set MinimumClusterSize(val: number) { this._minimumClusterSize = val; }\n\n    /**\n     * Gets or sets the options for spider clustering behavior. See {@link ISpiderClusterOptions}\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get SpiderClusterOptions(): ISpiderClusterOptions { return this._spiderClusterOptions; }\n        public set SpiderClusterOptions(val: ISpiderClusterOptions) { this._spiderClusterOptions = val; }\n\n    /**\n     * Gets or sets the cluster styles\n     *\n     * @readonly\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get Styles(): Array<IClusterIconInfo> { return this._styles; }\n        public set Styles(val: Array<IClusterIconInfo>) { this._styles = val; }\n\n    /**\n     * Gets or sets whether to use dynamic markers. Dynamic markers change in size and color depending on the number of\n     * pins in the cluster. If set to true, this will take precendence over any custom marker creation.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get UseDynamicSizeMarkers(): boolean { return this._useDynamicSizeMarker; }\n        public set UseDynamicSizeMarkers(val: boolean) {\n            this._useDynamicSizeMarker = val;\n            if (val) {\n                this._iconCreationCallback = (m: Array<Marker>, info: IMarkerIconInfo) => {\n                    return ClusterLayerDirective.CreateDynamicSizeMarker(\n                        m.length, info, this._dynamicMarkerBaseSize, this._dynamicMarkerRanges);\n                };\n            }\n        }\n\n    /**\n     * Gets or sets the z-index of the layer. If not used, layers get stacked in the order created.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get ZIndex(): number { return this._zIndex; }\n        public set ZIndex(val: number) { this._zIndex = val; }\n\n    /**\n     * Gets or sets whether the cluster should zoom in on click\n     *\n     * @readonly\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get ZoomOnClick(): boolean { return this._zoomOnClick; }\n        public set ZoomOnClick(val: boolean) { this._zoomOnClick = val; }\n\n    /**\n     * Creates the dynamic size marker to be used for cluster markers if UseDynamicSizeMarkers is set to true.\n     *\n     * @param size - The number of markers in the cluster.\n     * @param info  - The icon info to be used. This will be hydrated with\n     * the actualy dimensions of the created markers and is used by the underlying model/services\n     * to correctly offset the marker for correct positioning.\n     * @param baseMarkerSize - The base size for dynmic markers.\n     * @param ranges - The ranges to use to calculate breakpoints and colors for dynamic markers.\n     * The map contains key/value pairs, with the keys being\n     * the breakpoint sizes and the values the colors to be used for the dynamic marker in that range.\n     * @returns - An string containing the SVG for the marker.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    public static CreateDynamicSizeMarker(size: number, info: IMarkerIconInfo,\n                                             baseMarkerSize: number, ranges: Map<number, string>): string {\n        const mr: number = baseMarkerSize;\n        const outline: number = mr * 0.35;\n        const total: number = size;\n        const r: number = Math.log(total) / Math.log(10) * 5 + mr;\n        const d: number = r * 2;\n        let fillColor: string;\n        ranges.forEach((v, k) => {\n            if (total <= k && !fillColor) { fillColor = v; }\n        });\n        if (!fillColor) { fillColor = 'rgba(20, 180, 20, 0.5)'; }\n\n        // Create an SVG string of two circles, one on top of the other, with the specified radius and color.\n        const svg: Array<any> = [`<svg xmlns='http://www.w3.org/2000/svg' width='${d}' height='${d}'>`,\n            `<circle cx='${r}' cy='${r}' r='${r}' fill='${fillColor}'/>`,\n            `<circle cx='${r}' cy='${r}' r='${r - outline}' fill='${fillColor}'/>`,\n            `</svg>`];\n        info.size = { width: d, height: d };\n        info.markerOffsetRatio = { x: 0.5, y: 0.5 };\n        info.textOffset = { x: 0, y: r - 8 };\n        return svg.join('');\n    }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of ClusterLayerDirective.\n     *\n     * @param _layerService - Concreted implementation of a cluster layer service for the underlying maps\n     * implementations. Generally provided via injections.\n     * @param _containerRef - A reference to the view container of the layer. Generally provided via injection.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    constructor(_layerService: ClusterService, _containerRef: ViewContainerRef) {\n        super(_layerService, _containerRef);\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.\n     *\n     * @param changes - collection of changes.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n        if (!this._addedToManager) { return; }\n        if (changes['ClusterClickAction']) {\n            throw (\n                new Error('You cannot change the ClusterClickAction after the layer has been added to the layerservice.')\n            );\n        }\n\n        const options: IClusterOptions = { id: this._id };\n        if (changes['ClusteringEnabled']) { options.clusteringEnabled = this._clusteringEnabled; }\n        if (changes['GridSize']) { options.gridSize = this._gridSize; }\n        if (changes['LayerOffset']) { options.layerOffset = this._layerOffset; }\n        if (changes['SpiderClusterOptions']) { options.spiderClusterOptions = this._spiderClusterOptions; }\n        if (changes['ZIndex']) { options.zIndex = this._zIndex; }\n        if (changes['Visible']) { options.visible = this._visible; }\n\n        this._layerService.GetNativeLayer(this).then((l: Layer) => {\n            l.SetOptions(options);\n        });\n    }\n\n}\n","import {\n    Directive, Input, Output, OnDestroy, OnChanges, ViewContainerRef,\n    EventEmitter, ContentChild, AfterContentInit, SimpleChanges\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\nimport { IPoint } from '../interfaces/ipoint';\nimport { IPolygonEvent } from '../interfaces/ipolygon-event';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { PolygonService } from '../services/polygon.service';\nimport { InfoBoxComponent } from './infobox';\n\nlet polygonId = 0;\n\n/**\n *\n * MapPolygonDirective renders a polygon inside a {@link MapComponent}.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent, MapPolygonDirective} from '...';\n *\n * @Component({\n *  selector: 'my-map,\n *  styles: [`\n *   .map-container { height: 300px; }\n * `],\n * template: `\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\n *      <x-map-polygon [Paths]=\"path\"></x-map-polygon>\n *   </x-map>\n * `\n * })\n * ```\n *\n *\n * @export\n */\n@Directive({\n    selector: 'x-map-polygon'\n})\nexport class MapPolygonDirective implements OnDestroy, OnChanges, AfterContentInit {\n\n    ///\n    /// Field declarations\n    ///\n    private _inCustomLayer = false;\n    private _id: number;\n    private _layerId: number;\n    private _addedToService = false;\n    private _events: Subscription[] = [];\n\n    ///\n    /// Any InfoBox that is a direct children of the polygon\n    ///\n    @ContentChild(InfoBoxComponent) protected _infoBox: InfoBoxComponent;\n\n\n    /**\n     * Gets or sets whether this Polygon handles mouse events.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public Clickable = true;\n\n    /**\n     * If set to true, the user can drag this shape over the map.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public Draggable = false;\n\n    /**\n     * If set to true, the user can edit this shape by dragging the control\n     * points shown at the vertices and on each segment.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public Editable = false;\n\n    /**\n     * The fill color of the polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public FillColor: string;\n\n    /**\n     * The fill opacity between 0.0 and 1.0\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public FillOpacity: number;\n\n    /**\n     * When true, edges of the polygon are interpreted as geodesic and will\n     * follow the curvature of the Earth. When false, edges of the polygon are\n     * rendered as straight lines in screen space. Note that the shape of a\n     * geodesic polygon may appear to change when dragged, as the dimensions\n     * are maintained relative to the surface of the earth. Defaults to false.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public Geodesic = false;\n\n    /**\n     * Set the maximum zoom at which the polygon lable is visible. Ignored if ShowLabel is false.\n     * @memberof MapPolygonDirective\n     */\n    @Input() public LabelMaxZoom: number;\n\n    /**\n     * Set the minimum zoom at which the polygon lable is visible. Ignored if ShowLabel is false.\n     * @memberof MapPolygonDirective\n     */\n    @Input() public LabelMinZoom: number;\n\n    /**\n     * Arbitary metadata to assign to the Polygon. This is useful for events\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public Metadata: Map<string, any> = new Map<string, any>();\n\n    /**\n     * The ordered sequence of coordinates that designates a closed loop.\n     * Unlike polylines, a polygon may consist of one or more paths.\n     * As a result, the paths property may specify one or more arrays of\n     * LatLng coordinates. Paths are closed automatically; do not repeat the\n     * first vertex of the path as the last vertex. Simple polygons may be\n     * defined using a single array of LatLngs. More complex polygons may\n     * specify an array of arrays (for inner loops ). Any simple arrays are converted into Arrays.\n     * Inserting or removing LatLngs from the Array will automatically update\n     * the polygon on the map.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public Paths: Array<ILatLong> | Array<Array<ILatLong>> = [];\n\n    /**\n     * Whether to show the title as the label on the polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public ShowLabel: boolean;\n\n    /**\n     * Whether to show the title of the polygon as the tooltip on the polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public ShowTooltip: boolean = true;\n\n    /**\n     * The stroke color.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public StrokeColor: string;\n\n    /**\n     * The stroke opacity between 0.0 and 1.0\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public StrokeOpacity: number;\n\n    /**\n     * The stroke width in pixels.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public StrokeWeight: number;\n\n    /**\n     * The title of the polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public Title: string;\n\n    /**\n     * Whether this polygon is visible on the map. Defaults to true.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public Visible: boolean;\n\n    /**\n     * The zIndex compared to other polys.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Input() public zIndex: number;\n\n    ///\n    /// Delegate definitions\n    ///\n\n    /**\n     * This event is fired when the DOM click event is fired on the Polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() Click: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired when the DOM dblclick event is fired on the Polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() DblClick: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is repeatedly fired while the user drags the polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() Drag: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired when the user stops dragging the polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() DragEnd: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired when the user starts dragging the polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() DragStart: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired when the DOM mousedown event is fired on the Polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() MouseDown: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired when the DOM mousemove event is fired on the Polygon.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() MouseMove: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired on Polygon mouseout.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() MouseOut: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired on Polygon mouseover.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() MouseOver: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the Polygon\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() MouseUp: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n\n    /**\n     * This event is fired when the Polygon is right-clicked on.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() RightClick: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired when editing has completed.\n     *\n     * @memberof MapPolygonDirective\n     */\n    @Output() PathChanged: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Gets whether the polygon has been registered with the service.\n     * @readonly\n     * @memberof MapPolygonDirective\n     */\n    public get AddedToService(): boolean { return this._addedToService; }\n\n    /**\n     * Get the id of the polygon.\n     *\n     * @readonly\n     * @memberof MapPolygonDirective\n     */\n    public get Id(): number { return this._id; }\n\n    /**\n     * Gets the id of the polygon as a string.\n     *\n     * @readonly\n     * @memberof MapPolygonDirective\n     */\n    public get IdAsString(): string { return this._id.toString(); }\n\n    /**\n     * Gets whether the polygon is in a custom layer. See {@link MapLayer}.\n     *\n     * @readonly\n     * @memberof MapPolygonDirective\n     */\n    public get InCustomLayer(): boolean { return this._inCustomLayer; }\n\n    /**\n     * gets the id of the Layer the polygon belongs to.\n     *\n     * @readonly\n     * @memberof MapPolygonDirective\n     */\n    public get LayerId(): number { return this._layerId; }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of MapPolygonDirective.\n     * @param _polygonManager\n     *\n     * @memberof MapPolygonDirective\n     */\n    constructor(private _polygonService: PolygonService, private _containerRef: ViewContainerRef) {\n        this._id = polygonId++;\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Called after the content intialization of the directive is complete. Part of the ng Component life cycle.\n     *\n     * @memberof MapPolygonDirective\n     */\n    ngAfterContentInit(): void {\n        if (this._containerRef.element.nativeElement.parentElement) {\n            const parentName: string = this._containerRef.element.nativeElement.parentElement.tagName;\n            if (parentName.toLowerCase() === 'x-map-layer') {\n                this._inCustomLayer = true;\n                this._layerId = Number(this._containerRef.element.nativeElement.parentElement.attributes['layerId']);\n            }\n        }\n        if (!this._addedToService) {\n            this._polygonService.AddPolygon(this);\n            this._addedToService = true;\n            this.AddEventListeners();\n        }\n        return;\n    }\n\n    /**\n     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.\n     *\n     * @param changes - Changes that have occured.\n     *\n     * @memberof MapPolygonDirective\n     */\n    ngOnChanges(changes: SimpleChanges): any {\n        if (!this._addedToService) { return; }\n\n        const o: IPolygonOptions = this.GeneratePolygonChangeSet(changes);\n        if (o != null) { this._polygonService.SetOptions(this, o); }\n        if (changes['Paths'] && !changes['Paths'].isFirstChange()) {\n            this._polygonService.UpdatePolygon(this);\n        }\n\n    }\n\n    /**\n     * Called when the poygon is being destroyed. Part of the ng Component life cycle. Release resources.\n     *\n     *\n     * @memberof MapPolygonDirective\n     */\n    ngOnDestroy() {\n        this._polygonService.DeletePolygon(this);\n        this._events.forEach((s) => s.unsubscribe());\n        ///\n        /// remove event subscriptions\n        ///\n    }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Wires up the event receivers.\n     *\n     * @memberof MapPolygonDirective\n     */\n    private AddEventListeners() {\n        const _getEventArg: (e: MouseEvent) => IPolygonEvent = e => {\n            return {\n                Polygon: this,\n                Click: e\n            };\n        };\n        this._events.push(this._polygonService.CreateEventObservable('click', this).subscribe((ev: MouseEvent) => {\n            const t: MapPolygonDirective = this;\n            if (this._infoBox != null) {\n                this._infoBox.Open(this._polygonService.GetCoordinatesFromClick(ev));\n            }\n            this.Click.emit(_getEventArg(ev));\n        }));\n        const handlers = [\n            { name: 'dblclick', handler: (ev: MouseEvent) => this.DblClick.emit(_getEventArg(ev)) },\n            { name: 'drag', handler: (ev: MouseEvent) => this.Drag.emit(_getEventArg(ev)) },\n            { name: 'dragend', handler: (ev: MouseEvent) => this.DragEnd.emit(_getEventArg(ev)) },\n            { name: 'dragstart', handler: (ev: MouseEvent) => this.DragStart.emit(_getEventArg(ev)) },\n            { name: 'mousedown', handler: (ev: MouseEvent) => this.MouseDown.emit(_getEventArg(ev)) },\n            { name: 'mousemove', handler: (ev: MouseEvent) => this.MouseMove.emit(_getEventArg(ev)) },\n            { name: 'mouseout', handler: (ev: MouseEvent) => this.MouseOut.emit(_getEventArg(ev)) },\n            { name: 'mouseover', handler: (ev: MouseEvent) => this.MouseOver.emit(_getEventArg(ev)) },\n            { name: 'mouseup', handler: (ev: MouseEvent) => this.MouseUp.emit(_getEventArg(ev)) },\n            { name: 'rightclick', handler: (ev: MouseEvent) => this.RightClick.emit(_getEventArg(ev)) },\n            { name: 'pathchanged', handler: (ev: IPolygonEvent) => this.PathChanged.emit(ev) }\n        ];\n        handlers.forEach((obj) => {\n            const os = this._polygonService.CreateEventObservable(obj.name, this).subscribe(obj.handler);\n            this._events.push(os);\n        });\n    }\n\n\n    /**\n     * Generates IPolygon option changeset from directive settings.\n     *\n     * @param changes - {@link SimpleChanges} identifying the changes that occured.\n     * @returns - {@link IPolygonOptions} containing the polygon options.\n     *\n     * @memberof MapPolygonDirective\n     */\n    private GeneratePolygonChangeSet(changes: SimpleChanges): IPolygonOptions {\n        const options: IPolygonOptions = { id: this._id };\n        let hasOptions: boolean = false;\n        if (changes['Clickable']) { options.clickable = this.Clickable; hasOptions = true; }\n        if (changes['Draggable']) { options.draggable = this.Draggable; hasOptions = true; }\n        if (changes['Editable']) { options.editable = this.Editable; hasOptions = true; }\n        if (changes['FillColor'] || changes['FillOpacity']) {\n            options.fillColor = this.FillColor;\n            options.fillOpacity = this.FillOpacity;\n            hasOptions = true;\n        }\n        if (changes['Geodesic']) { options.geodesic = this.Geodesic; hasOptions = true; }\n        if (changes['LabelMaxZoom']) { options.labelMaxZoom = this.LabelMaxZoom; hasOptions = true; }\n        if (changes['LabelMinZoom']) { options.labelMinZoom = this.LabelMinZoom; hasOptions = true; }\n        if (changes['ShowTooltip']) { options.showTooltip = this.ShowTooltip; hasOptions = true; }\n        if (changes['ShowLabel']) { options.showLabel = this.ShowLabel; hasOptions = true; }\n        if (changes['StrokeColor'] || changes['StrokeOpacity']) {\n            options.strokeColor = this.StrokeColor;\n            options.strokeOpacity = this.StrokeOpacity;\n            hasOptions = true;\n        }\n        if (changes['StrokeWeight']) { options.strokeWeight = this.StrokeWeight; hasOptions = true; }\n        if (changes['Title']) { options.title = this.Title; hasOptions = true; }\n        if (changes['Visible']) { options.visible = this.Visible; hasOptions = true; }\n        if (changes['zIndex']) { options.zIndex = this.zIndex; hasOptions = true; }\n        return hasOptions ? options : null;\n    }\n\n}\n","import {\n    Directive, Input, Output, OnDestroy, OnChanges, ViewContainerRef,\n    EventEmitter, ContentChild, AfterContentInit, SimpleChanges\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IPoint } from '../interfaces/ipoint';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\nimport { PolylineService } from '../services/polyline.service';\nimport { IPolylineEvent } from '../interfaces/ipolyline-event';\nimport { InfoBoxComponent } from './infobox';\n\nlet polylineId = 0;\n\n/**\n *\n * MapPolylineDirective renders a polyline inside a {@link MapComponent}.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent, MapPolylineDirective} from '...';\n *\n * @Component({\n *  selector: 'my-map,\n *  styles: [`\n *   .map-container { height: 300px; }\n * `],\n * template: `\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\n *      <x-map-polyline [Paths]=\"path\"></x-map-polyline>\n *   </x-map>\n * `\n * })\n * ```\n *\n *\n * @export\n */\n@Directive({\n    selector: 'x-map-polyline'\n})\nexport class MapPolylineDirective implements OnDestroy, OnChanges, AfterContentInit {\n\n    ///\n    /// Field declarations\n    ///\n    private _inCustomLayer = false;\n    private _id: number;\n    private _layerId: number;\n    private _addedToService = false;\n    private _events: Subscription[] = [];\n\n    ///\n    /// Any InfoBox that is a direct children of the polyline\n    ///\n    @ContentChild(InfoBoxComponent) protected _infoBox: InfoBoxComponent;\n\n\n    /**\n     * Gets or sets whether this Polyline handles mouse events.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public Clickable = true;\n\n    /**\n     * If set to true, the user can drag this shape over the map.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public Draggable = false;\n\n    /**\n     * If set to true, the user can edit this shape by dragging the control\n     * points shown at the vertices and on each segment.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public Editable = false;\n\n    /**\n     * When true, edges of the polyline are interpreted as geodesic and will\n     * follow the curvature of the Earth. When false, edges of the polyline are\n     * rendered as straight lines in screen space. Note that the shape of a\n     * geodesic polyline may appear to change when dragged, as the dimensions\n     * are maintained relative to the surface of the earth. Defaults to false.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public Geodesic = false;\n\n    /**\n     * Arbitary metadata to assign to the Polyline. This is useful for events\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public Metadata: Map<string, any> = new Map<string, any>();\n\n    /**\n     * The ordered sequence of coordinates that designates a polyline.\n     * Simple polylines may be defined using a single array of LatLngs. More\n     * complex polylines may specify an array of arrays.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public Path: Array<ILatLong> | Array<Array<ILatLong>> = [];\n\n    /**\n     * Whether to show the title of the polyline as the tooltip on the polygon.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public ShowTooltip: boolean = true;\n\n    /**\n     * The stroke color.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public StrokeColor: string;\n\n    /**\n     * The stroke opacity between 0.0 and 1.0\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public StrokeOpacity: number;\n\n    /**\n     * The stroke width in pixels.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public StrokeWeight: number;\n\n    /**\n     * The title of the polygon.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public Title: string;\n\n    /**\n     * Whether this polyline is visible on the map. Defaults to true.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public Visible: boolean;\n\n    /**\n     * The zIndex compared to other polys.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Input() public zIndex: number;\n\n    ///\n    /// Delegate definitions\n    ///\n\n    /**\n     * This event is fired when the DOM click event is fired on the Polyline.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() Click: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired when the DOM dblclick event is fired on the Polyline.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() DblClick: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is repeatedly fired while the user drags the polyline.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() Drag: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired when the user stops dragging the polyline.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() DragEnd: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired when the user starts dragging the polyline.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() DragStart: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired when the DOM mousedown event is fired on the Polyline.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() MouseDown: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired when the DOM mousemove event is fired on the Polyline.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() MouseMove: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired on Polyline mouseout.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() MouseOut: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired on Polyline mouseover.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() MouseOver: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the Polyline\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() MouseUp: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This even is fired when the Polyline is right-clicked on.\n     *\n     * @memberof MapPolylineDirective\n     */\n    @Output() RightClick: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Gets whether the polyline has been registered with the service.\n     * @readonly\n     * @memberof MapPolylineDirective\n     */\n    public get AddedToService(): boolean { return this._addedToService; }\n\n    /**\n     * Get the id of the polyline.\n     *\n     * @readonly\n     * @memberof MapPolylineDirective\n     */\n    public get Id(): number { return this._id; }\n\n    /**\n     * Gets the id of the polyline as a string.\n     *\n     * @readonly\n     * @memberof MapPolylineDirective\n     */\n    public get IdAsString(): string { return this._id.toString(); }\n\n    /**\n     * Gets whether the polyline is in a custom layer. See {@link MapLayer}.\n     *\n     * @readonly\n     * @memberof MapPolylineDirective\n     */\n    public get InCustomLayer(): boolean { return this._inCustomLayer; }\n\n    /**\n     * gets the id of the Layer the polyline belongs to.\n     *\n     * @readonly\n     * @memberof MapPolylineDirective\n     */\n    public get LayerId(): number { return this._layerId; }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of MapPolylineDirective.\n     * @param _polylineManager\n     *\n     * @memberof MapPolylineDirective\n     */\n    constructor(private _polylineService: PolylineService, private _containerRef: ViewContainerRef) {\n        this._id = polylineId++;\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Called after the content intialization of the directive is complete. Part of the ng Component life cycle.\n     *\n     * @memberof MapPolylineDirective\n     */\n    ngAfterContentInit(): void {\n        if (this._containerRef.element.nativeElement.parentElement) {\n            const parentName: string = this._containerRef.element.nativeElement.parentElement.tagName;\n            if (parentName.toLowerCase() === 'x-map-layer') {\n                this._inCustomLayer = true;\n                this._layerId = Number(this._containerRef.element.nativeElement.parentElement.attributes['layerId']);\n            }\n        }\n        if (!this._addedToService) {\n            this._polylineService.AddPolyline(this);\n            this._addedToService = true;\n            this.AddEventListeners();\n        }\n        return;\n    }\n\n    /**\n     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.\n     *\n     * @param changes - Changes that have occured.\n     *\n     * @memberof MapPolylineDirective\n     */\n    ngOnChanges(changes: SimpleChanges): any {\n        if (!this._addedToService) { return; }\n\n        const o: IPolylineOptions = this.GeneratePolylineChangeSet(changes);\n        if (o != null) {\n            this._polylineService.SetOptions(this, o);\n        }\n        if (changes['Path'] && !changes['Path'].isFirstChange()) {\n            this._polylineService.UpdatePolyline(this);\n        }\n    }\n\n    /**\n     * Called when the polyline is being destroyed. Part of the ng Component life cycle. Release resources.\n     *\n     *\n     * @memberof MapPolylineDirective\n     */\n    ngOnDestroy() {\n        this._polylineService.DeletePolyline(this);\n        this._events.forEach((s) => s.unsubscribe());\n            ///\n            /// remove event subscriptions\n            ///\n    }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Wires up the event receivers.\n     *\n     * @memberof MapPolylineDirective\n     */\n    private AddEventListeners() {\n        const _getEventArg: (e: MouseEvent) => IPolylineEvent = e => {\n            return {\n                Polyline: this,\n                Click: e\n            };\n        };\n        this._polylineService.CreateEventObservable('click', this).subscribe((ev: MouseEvent) => {\n            if (this._infoBox != null) {\n                this._infoBox.Open(this._polylineService.GetCoordinatesFromClick(ev));\n            }\n            this.Click.emit(_getEventArg(ev));\n        });\n        const handlers = [\n            { name: 'dblclick', handler: (ev: MouseEvent) => this.DblClick.emit(_getEventArg(ev)) },\n            { name: 'drag', handler: (ev: MouseEvent) => this.Drag.emit(_getEventArg(ev)) },\n            { name: 'dragend', handler: (ev: MouseEvent) => this.DragEnd.emit(_getEventArg(ev)) },\n            { name: 'dragstart', handler: (ev: MouseEvent) => this.DragStart.emit(_getEventArg(ev)) },\n            { name: 'mousedown', handler: (ev: MouseEvent) => this.MouseDown.emit(_getEventArg(ev)) },\n            { name: 'mousemove', handler: (ev: MouseEvent) => this.MouseMove.emit(_getEventArg(ev)) },\n            { name: 'mouseout', handler: (ev: MouseEvent) => this.MouseOut.emit(_getEventArg(ev)) },\n            { name: 'mouseover', handler: (ev: MouseEvent) => this.MouseOver.emit(_getEventArg(ev)) },\n            { name: 'mouseup', handler: (ev: MouseEvent) => this.MouseUp.emit(_getEventArg(ev)) },\n            { name: 'rightclick', handler: (ev: MouseEvent) => this.RightClick.emit(_getEventArg(ev)) },\n        ];\n        handlers.forEach((obj) => {\n            const os = this._polylineService.CreateEventObservable(obj.name, this).subscribe(obj.handler);\n            this._events.push(os);\n        });\n    }\n\n\n    /**\n     * Generates IPolyline option changeset from directive settings.\n     *\n     * @param changes - {@link SimpleChanges} identifying the changes that occured.\n     * @returns - {@link IPolylineOptions} containing the polyline options.\n     *\n     * @memberof MapPolylineDirective\n     */\n    private GeneratePolylineChangeSet(changes: SimpleChanges): IPolylineOptions {\n        const options: IPolylineOptions = { id: this._id };\n        let hasOptions: boolean = false;\n        if (changes['Clickable']) { options.clickable = this.Clickable; hasOptions = true; }\n        if (changes['Draggable']) { options.draggable = this.Draggable; hasOptions = true; }\n        if (changes['Editable']) { options.editable = this.Editable; hasOptions = true; }\n        if (changes['Geodesic']) { options.geodesic = this.Geodesic; hasOptions = true; }\n        if (changes['ShowTooltip']) { options.showTooltip = this.ShowTooltip; hasOptions = true; }\n        if (changes['StrokeColor']) { options.strokeColor = this.StrokeColor; hasOptions = true; }\n        if (changes['StrokeOpacity']) { options.strokeOpacity = this.StrokeOpacity; hasOptions = true; }\n        if (changes['StrokeWeight']) { options.strokeWeight = this.StrokeWeight; hasOptions = true; }\n        if (changes['Title']) { options.title = this.Title; hasOptions = true; }\n        if (changes['Visible']) { options.visible = this.Visible; hasOptions = true; }\n        if (changes['zIndex']) { options.zIndex = this.zIndex; hasOptions = true; }\n        return hasOptions ? options : null;\n    }\n\n}\n","import {\n    Directive, SimpleChange, Input, Output, OnDestroy, OnChanges,\n    EventEmitter, ContentChild, AfterContentInit, ViewContainerRef, NgZone\n} from '@angular/core';\nimport { IPoint } from '../interfaces/ipoint';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { IMarkerEvent } from '../interfaces/imarker-event';\nimport { IMarkerOptions } from '../interfaces/imarker-options';\nimport { ILayerOptions } from '../interfaces/ilayer-options';\nimport { IMarkerIconInfo } from '../interfaces/imarker-icon-info';\nimport { IClusterIconInfo } from '../interfaces/icluster-icon-info';\nimport { IClusterOptions } from '../interfaces/icluster-options';\nimport { MarkerService } from '../services/marker.service';\nimport { LayerService } from '../services/layer.service';\nimport { ClusterService } from '../services/cluster.service';\nimport { MapService } from '../services/map.service';\nimport { Layer } from '../models/layer';\nimport { Marker } from '../models/marker';\nimport { ClusterClickAction } from '../models/cluster-click-action';\nimport { ClusterPlacementMode } from '../models/cluster-placement-mode';\nimport { ClusterLayerDirective } from './cluster-layer';\n\n/**\n * internal counter to use as ids for marker.\n */\nlet layerId = 1000000;\n\n/**\n * MapMarkerLayerDirective performantly renders a large set of map marker inside a {@link MapComponent}.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent, MapMarkerDirective} from '...';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *   .map-container {\n *     height: 300px;\n *   }\n * `],\n * template: `\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\n *      <x-map-marker-layer [MarkerOptions]=\"_markers\"></x-map-marker-layer>\n *   </x-map>\n * `\n * })\n * ```\n *\n * @export\n */\n@Directive({\n    selector: 'x-map-marker-layer'\n})\nexport class MapMarkerLayerDirective implements OnDestroy, OnChanges, AfterContentInit {\n\n    ///\n    /// Field declarations\n    ///\n    private _id: number;\n    private _layerPromise: Promise<Layer>;\n    private _service: LayerService;\n    private _styles: Array<IClusterIconInfo>;\n    private _useDynamicSizeMarker = false;\n    private _dynamicMarkerBaseSize = 18;\n    private _dynamicMarkerRanges: Map<number, string> = new Map<number, string>([\n        [10, 'rgba(20, 180, 20, 0.5)'],\n        [100, 'rgba(255, 210, 40, 0.5)'],\n        [Number.MAX_SAFE_INTEGER , 'rgba(255, 40, 40, 0.5)']\n    ]);\n    private _iconCreationCallback: (m: Array<Marker>, i: IMarkerIconInfo) => string;\n    private _streaming: boolean = false;\n    private _markers: Array<IMarkerOptions> = new Array<IMarkerOptions>();\n    private _markersLast: Array<IMarkerOptions> = new Array<IMarkerOptions>();\n\n\n    /**\n     * Gets or sets the the Cluster Click Action {@link ClusterClickAction}.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input() public ClusterClickAction: ClusterClickAction =  ClusterClickAction.ZoomIntoCluster;\n\n    /**\n     * Gets or sets the IconInfo to be used to create a custom cluster marker. Supports font-based, SVG, graphics and more.\n     * See {@link IMarkerIconInfo}.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input() public ClusterIconInfo: IMarkerIconInfo;\n\n    /**\n     * Gets or sets the cluster placement mode. {@link ClusterPlacementMode}\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input()  public ClusterPlacementMode: ClusterPlacementMode = ClusterPlacementMode.MeanValue;\n\n    /**\n     * Gets or sets the callback invoked to create a custom cluster marker. Note that when {@link UseDynamicSizeMarkers} is enabled,\n     * you cannot set a custom marker callback.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input()\n        public get CustomMarkerCallback(): (m: Array<Marker>, i: IMarkerIconInfo) => string  { return this._iconCreationCallback; }\n        public set CustomMarkerCallback(val: (m: Array<Marker>, i: IMarkerIconInfo) => string) {\n            if (this._useDynamicSizeMarker) {\n                throw(\n                    new Error(`You cannot set a custom marker callback when UseDynamicSizeMarkers is set to true.\n                    Set UseDynamicSizeMakers to false.`)\n                );\n            }\n            this._iconCreationCallback = val;\n        }\n\n    /**\n     * Gets or sets the base size of dynamic markers in pixels. The actualy size of the dynamic marker is based on this.\n     * See {@link UseDynamicSizeMarkers}.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get DynamicMarkerBaseSize(): number  { return this._dynamicMarkerBaseSize; }\n        public set DynamicMarkerBaseSize(val: number) { this._dynamicMarkerBaseSize = val; }\n\n    /**\n     * Gets or sets the ranges to use to calculate breakpoints and colors for dynamic markers.\n     * The map contains key/value pairs, with the keys being\n     * the breakpoint sizes and the values the colors to be used for the dynamic marker in that range. See {@link UseDynamicSizeMarkers}.\n     *\n     * @memberof ClusterLayerDirective\n     */\n    @Input()\n        public get DynamicMarkerRanges(): Map<number, string>  { return this._dynamicMarkerRanges; }\n        public set DynamicMarkerRanges(val: Map<number, string>) { this._dynamicMarkerRanges = val; }\n\n    /**\n     * Determines whether the layer clusters. This property can only be set on creation of the layer.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input() public EnableClustering: boolean = false;\n\n    /**\n     * Gets or sets the grid size to be used for clustering.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input() public GridSize: number = 150;\n\n    /**\n     * Gets or sets the IconInfo to be used to create a custom marker images. Supports font-based, SVG, graphics and more.\n     * See {@link IMarkerIconInfo}.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input() public IconInfo: IMarkerIconInfo;\n\n    /**\n     * Gets or sets An offset applied to the positioning of the layer.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input() public LayerOffset: IPoint = null;\n\n    /**\n     *  IMarkerOptions array holding the marker info.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input()\n        public get MarkerOptions(): Array<IMarkerOptions> { return this._markers; }\n        public set MarkerOptions(val: Array<IMarkerOptions>) {\n            if (this._streaming) {\n                this._markersLast.push(...val.slice(0));\n                this._markers.push(...val);\n            }\n            else {\n                this._markers = val.slice(0);\n            }\n        }\n\n    /**\n     * Gets or sets the cluster styles\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input()\n        public get Styles(): Array<IClusterIconInfo> { return this._styles; }\n        public set Styles(val: Array<IClusterIconInfo>) { this._styles = val; }\n\n    /**\n     * Sets whether to treat changes in the MarkerOptions as streams of new markers. In thsi mode, changing the\n     * Array supplied in MarkerOptions will be incrementally drawn on the map as opposed to replace the markers on the map.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input()\n        public get TreatNewMarkerOptionsAsStream(): boolean { return this._streaming; }\n        public set TreatNewMarkerOptionsAsStream(val: boolean) { this._streaming = val; }\n\n    /**\n     * Gets or sets whether to use dynamic markers. Dynamic markers change in size and color depending on the number of\n     * pins in the cluster. If set to true, this will take precendence over any custom marker creation.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input()\n        public get UseDynamicSizeMarkers(): boolean { return this._useDynamicSizeMarker; }\n        public set UseDynamicSizeMarkers(val: boolean) {\n            this._useDynamicSizeMarker = val;\n            if (val) {\n                this._iconCreationCallback = (m: Array<Marker>, info: IMarkerIconInfo) => {\n                    return ClusterLayerDirective.CreateDynamicSizeMarker(\n                        m.length, info, this._dynamicMarkerBaseSize, this._dynamicMarkerRanges);\n                };\n            }\n        }\n\n    /**\n     * Sets the visibility of the marker layer\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input() public Visible: boolean;\n\n    /**\n     * Gets or sets the z-index of the layer. If not used, layers get stacked in the order created.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input() public ZIndex: number = 0;\n\n    /**\n     * Gets or sets whether the cluster should zoom in on click\n     *\n     * @readonly\n     * @memberof MapMarkerLayerDirective\n     */\n    @Input() public ZoomOnClick: boolean = true;\n\n\n    ///\n    /// Delegates\n    ///\n\n    /**\n     * This event emitter gets emitted when the dynamic icon for a marker is being created.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Output() public DynamicMarkerCreated: EventEmitter<IMarkerIconInfo> = new EventEmitter<IMarkerIconInfo>();\n\n    /**\n     * This event emitter gets emitted when the user clicks a marker in the layer.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Output() public MarkerClick: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n    /**\n     * This event is fired when the user stops dragging a marker.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    @Output() public DragEnd: EventEmitter<IMarkerEvent> = new EventEmitter<IMarkerEvent>();\n\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Gets the id of the marker layer.\n     *\n     * @readonly\n     * @memberof MapMarkerLayerDirective\n     */\n    public get Id(): number { return this._id; }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of MapMarkerLayerDirective.\n     * @param _markerService - Concreate implementation of a {@link MarkerService}.\n     * @param _layerService - Concreate implementation of a {@link LayerService}.\n     * @param _clusterService - Concreate implementation of a {@link ClusterService}.\n     * @param _mapService - Concreate implementation of a {@link MapService}.\n     * @param _zone - Concreate implementation of a {@link NgZone} service.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    constructor(\n        private _markerService: MarkerService,\n        private _layerService: LayerService,\n        private _clusterService: ClusterService,\n        private _mapService: MapService,\n        private _zone: NgZone) {\n        this._id = layerId++;\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Translates a geo location to a pixel location relative to the map viewport.\n     *\n     * @param [loc] - {@link ILatLong} containing the geo coordinates.\n     * @returns - A promise that when fullfilled contains an {@link IPoint} representing the pixel coordinates.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    public LocationToPixel(loc: ILatLong): Promise<IPoint> {\n        return this._markerService.LocationToPoint(loc);\n    }\n\n    /**\n     * Called after Component content initialization. Part of ng Component life cycle.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    public ngAfterContentInit() {\n        const layerOptions: ILayerOptions = {\n            id: this._id\n        };\n        this._zone.runOutsideAngular(() => {\n            const fakeLayerDirective: any = {\n                Id : this._id,\n                Visible: this.Visible\n            };\n            if (!this.EnableClustering) {\n                this._layerService.AddLayer(fakeLayerDirective);\n                this._layerPromise = this._layerService.GetNativeLayer(fakeLayerDirective);\n                this._service = this._layerService;\n            }\n            else {\n                fakeLayerDirective.LayerOffset = this.LayerOffset;\n                fakeLayerDirective.ZIndex = this.ZIndex;\n                fakeLayerDirective.ClusteringEnabled = this.EnableClustering;\n                fakeLayerDirective.ClusterPlacementMode = this.ClusterPlacementMode;\n                fakeLayerDirective.GridSize = this.GridSize;\n                fakeLayerDirective.ClusterClickAction = this.ClusterClickAction;\n                fakeLayerDirective.IconInfo = this.ClusterIconInfo;\n                fakeLayerDirective.CustomMarkerCallback = this.CustomMarkerCallback;\n                fakeLayerDirective.UseDynamicSizeMarkers = this.UseDynamicSizeMarkers;\n                this._clusterService.AddLayer(fakeLayerDirective);\n                this._layerPromise = this._clusterService.GetNativeLayer(fakeLayerDirective);\n                this._service = this._clusterService;\n            }\n            this._layerPromise.then(l => {\n                l.SetVisible(this.Visible);\n                if (this.MarkerOptions) {\n                    this._zone.runOutsideAngular(() => this.UpdateMarkers());\n                }\n            });\n        });\n    }\n\n    /**\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\n     *\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    public ngOnDestroy() {\n        this._layerPromise.then(l => {\n            l.Delete();\n        });\n    }\n\n    /**\n     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.\n     *\n     * @param changes - collection of changes.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    public ngOnChanges(changes: { [key: string]: SimpleChange }) {\n        let shouldSetOptions: boolean = false;\n        const o: IClusterOptions = {\n            id: this._id\n        };\n        if (changes['MarkerOptions']) {\n            this._zone.runOutsideAngular(() => {\n                this.UpdateMarkers();\n            });\n        }\n        if (changes['Visible'] && !changes['Visible'].firstChange) {\n            this._zone.runOutsideAngular(() => {\n                this._layerPromise.then(l => l.SetVisible(this.Visible));\n            });\n        }\n        if (changes['EnableClustering'] && !changes['EnableClustering'].firstChange) {\n            if ('StopClustering' in this._service) {\n                o.clusteringEnabled = this.EnableClustering;\n                shouldSetOptions = true;\n            }\n            else {\n                throw (new Error('You cannot change EnableClustering after the layer has been created.'));\n            }\n        }\n        if (changes['ClusterPlacementMode'] && !changes['ClusterPlacementMode'].firstChange && 'StopClustering' in this._service) {\n            o.placementMode = this.ClusterPlacementMode;\n            shouldSetOptions = true;\n        }\n        if (changes['GridSize'] && !changes['GridSize'].firstChange && 'StopClustering' in this._service) {\n            o.gridSize = this.GridSize;\n            shouldSetOptions = true;\n        }\n        if (changes['ClusterClickAction'] && !changes['ClusterClickAction'].firstChange && 'StopClustering' in this._service) {\n            o.zoomOnClick = this.ClusterClickAction === ClusterClickAction.ZoomIntoCluster;\n            shouldSetOptions = true;\n        }\n        if ((changes['ZIndex'] && !changes['ZIndex'].firstChange) ||\n            (changes['LayerOffset'] && !changes['LayerOffset'].firstChange) ||\n            (changes['IconInfo'] && !changes['IconInfo'].firstChange)\n        ) {\n            throw (new Error('You cannot change ZIndex or LayerOffset after the layer has been created.'));\n        }\n\n        if (shouldSetOptions) {\n            this._zone.runOutsideAngular(() => {\n                const fakeLayerDirective: any = {Id : this._id};\n                this._layerPromise.then(l => l.SetOptions(o));\n            });\n        }\n    }\n\n    /**\n     * Obtains a string representation of the Marker Id.\n     * @returns - string representation of the marker id.\n     * @memberof MapMarkerLayerDirective\n     */\n    public toString(): string { return 'MapMarkerLayer-' + this._id.toString(); }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Adds various event listeners for the marker.\n     *\n     * @param m - the marker for which to add the event.\n     *\n     * @memberof MapMarkerLayerDirective\n     */\n    private AddEventListeners(m: Marker): void {\n        m.AddListener('click', (e: MouseEvent) => this.MarkerClick.emit({\n                Marker: m,\n                Click: e,\n                Location: this._markerService.GetCoordinatesFromClick(e),\n                Pixels: this._markerService.GetPixelsFromClick(e)\n            }));\n        m.AddListener('dragend', (e: MouseEvent) => this.DragEnd.emit({\n                Marker: m,\n                Click: e,\n                Location: this._markerService.GetCoordinatesFromClick(e),\n                Pixels: this._markerService.GetPixelsFromClick(e)\n            }));\n    }\n\n    /**\n     * Sets or updates the markers based on the marker options. This will place the markers on the map\n     * and register the associated events.\n     *\n     * @memberof MapMarkerLayerDirective\n     * @method\n     */\n    private UpdateMarkers(): void {\n        if (this._layerPromise == null) { return; }\n        this._layerPromise.then(l => {\n            const markers: Array<IMarkerOptions> = this._streaming ? this._markersLast.splice(0) : this._markers;\n\n            // generate the promise for the markers\n            const mp: Promise<Array<Marker>> = this._service.CreateMarkers(markers, this.IconInfo);\n\n            // set markers once promises are fullfilled.\n            mp.then(m => {\n                m.forEach(marker => {\n                     this.AddEventListeners(marker);\n                });\n                this._streaming ? l.AddEntities(m) : l.SetEntities(m);\n            });\n        });\n    }\n\n}\n","import {\n    Directive, SimpleChange, Input, Output, OnDestroy, OnChanges,\n    EventEmitter, ContentChild, AfterContentInit, ViewContainerRef, NgZone,\n    SimpleChanges\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IPoint } from '../interfaces/ipoint';\nimport { ISize } from '../interfaces/isize';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { IPolygonEvent } from '../interfaces/ipolygon-event';\nimport { IPolygonOptions } from '../interfaces/ipolygon-options';\nimport { ILayerOptions } from '../interfaces/ilayer-options';\nimport { ILabelOptions } from '../interfaces/ilabel-options';\nimport { LayerService } from '../services/layer.service';\nimport { MapService } from '../services/map.service';\nimport { Layer } from '../models/layer';\nimport { Polygon } from '../models/polygon';\nimport { MapLabel } from '../models/map-label';\nimport { CanvasOverlay } from '../models/canvas-overlay';\n\n/**\n * internal counter to use as ids for polygons.\n */\nlet layerId = 1000000;\n\n/**\n * MapPolygonLayerDirective performantly renders a large set of polygons on a {@link MapComponent}.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent} from '...';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *   .map-container {\n *     height: 300px;\n *   }\n * `],\n * template: `\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\n *      <x-map-polygon-layer [PolygonOptions]=\"_polygons\"></x-map-polygon-layer>\n *   </x-map>\n * `\n * })\n * ```\n *\n * @export\n */\n@Directive({\n    selector: 'x-map-polygon-layer'\n})\nexport class MapPolygonLayerDirective implements OnDestroy, OnChanges, AfterContentInit {\n\n    ///\n    /// Field declarations\n    ///\n    private _id: number;\n    private _layerPromise: Promise<Layer>;\n    private _service: LayerService;\n    private _canvas: CanvasOverlay;\n    private _labels: Array<{loc: ILatLong, title: string}> = new Array<{loc: ILatLong, title: string}>();\n    private _tooltip: MapLabel;\n    private _tooltipSubscriptions: Array<Subscription> = new Array<Subscription>();\n    private _tooltipVisible: boolean = false;\n    private _defaultOptions: ILabelOptions = {\n        fontSize: 11,\n        fontFamily: 'sans-serif',\n        strokeWeight: 2,\n        strokeColor: '#000000',\n        fontColor: '#ffffff'\n    };\n    private _streaming: boolean = false;\n    private _polygons: Array<IPolygonOptions> = new Array<IPolygonOptions>();\n    private _polygonsLast: Array<IPolygonOptions> = new Array<IPolygonOptions>();\n\n    /**\n     * Set the maximum zoom at which the polygon labels are visible. Ignored if ShowLabel is false.\n     * @memberof MapPolygonLayerDirective\n     */\n    @Input() public LabelMaxZoom: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Set the minimum zoom at which the polygon labels are visible. Ignored if ShowLabel is false.\n     * @memberof MapPolygonLayerDirective\n     */\n    @Input() public LabelMinZoom: number = -1;\n\n    /**\n     * Sepcifies styleing options for on-map polygon labels.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Input() public LabelOptions: ILabelOptions;\n\n    /**\n     * Gets or sets An offset applied to the positioning of the layer.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Input() public LayerOffset: IPoint = null;\n\n    /**\n     * An array of polygon options representing the polygons in the layer.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Input()\n        public get PolygonOptions(): Array<IPolygonOptions> { return this._polygons; }\n        public set PolygonOptions(val: Array<IPolygonOptions>) {\n            if (this._streaming) {\n                this._polygonsLast.push(...val.slice(0));\n                this._polygons.push(...val);\n            }\n            else {\n                this._polygons = val.slice(0);\n            }\n        }\n\n    /**\n     * Whether to show the polygon titles as the labels on the polygons.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Input() public ShowLabels: boolean = false;\n\n    /**\n     * Whether to show the titles of the polygosn as the tooltips on the polygons.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Input() public ShowTooltips: boolean = true;\n\n    /**\n     * Sets whether to treat changes in the PolygonOptions as streams of new markers. In this mode, changing the\n     * Array supplied in PolygonOptions will be incrementally drawn on the map as opposed to replace the polygons on the map.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Input()\n        public get TreatNewPolygonOptionsAsStream(): boolean { return this._streaming; }\n        public set TreatNewPolygonOptionsAsStream(val: boolean) { this._streaming = val; }\n\n    /**\n     * Sets the visibility of the marker layer\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Input() public Visible: boolean;\n\n    /**\n     * Gets or sets the z-index of the layer. If not used, layers get stacked in the order created.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Input() public ZIndex: number = 0;\n\n    ///\n    /// Delegates\n    ///\n\n    /**\n     * This event emitter gets emitted when the user clicks a polygon in the layer.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Output() public PolygonClick: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired when the DOM dblclick event is fired on a polygon in the layer.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Output() PolygonDblClick: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired when the DOM mousemove event is fired on a polygon in the layer.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Output() PolygonMouseMove: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired on mouseout on a polygon in the layer.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Output() PolygonMouseOut: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n    /**\n     * This event is fired on mouseover on a polygon in a layer.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    @Output() PolygonMouseOver: EventEmitter<IPolygonEvent> = new EventEmitter<IPolygonEvent>();\n\n\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Gets the id of the marker layer.\n     *\n     * @readonly\n     * @memberof MapPolygonLayerDirective\n     */\n    public get Id(): number { return this._id; }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of MapPolygonLayerDirective.\n     * @param _layerService - Concreate implementation of a {@link LayerService}.\n     * @param _mapService - Concreate implementation of a {@link MapService}.\n     * @param _zone - Concreate implementation of a {@link NgZone} service.\n     * @memberof MapPolygonLayerDirective\n     */\n    constructor(\n        private _layerService: LayerService,\n        private _mapService: MapService,\n        private _zone: NgZone) {\n        this._id = layerId++;\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Called after Component content initialization. Part of ng Component life cycle.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    public ngAfterContentInit() {\n        const layerOptions: ILayerOptions = {\n            id: this._id\n        };\n        this._zone.runOutsideAngular(() => {\n            const fakeLayerDirective: any = {\n                Id : this._id,\n                Visible: this.Visible,\n                LayerOffset: this.LayerOffset,\n                ZIndex: this.ZIndex\n            };\n            this._layerService.AddLayer(fakeLayerDirective);\n            this._layerPromise = this._layerService.GetNativeLayer(fakeLayerDirective);\n\n            Promise.all([\n                this._layerPromise,\n                this._mapService.CreateCanvasOverlay(el => this.DrawLabels(el))\n            ]).then(values => {\n                values[0].SetVisible(this.Visible);\n                this._canvas = values[1];\n                this._canvas._canvasReady.then(b => {\n                    this._tooltip = this._canvas.GetToolTipOverlay();\n                    this.ManageTooltip(this.ShowTooltips);\n                });\n                if (this.PolygonOptions) {\n                    this._zone.runOutsideAngular(() => this.UpdatePolygons());\n                }\n            });\n            this._service = this._layerService;\n        });\n    }\n\n    /**\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    public ngOnDestroy() {\n        this._tooltipSubscriptions.forEach(s => s.unsubscribe());\n        this._layerPromise.then(l => {\n            l.Delete();\n        });\n        if (this._canvas) { this._canvas.Delete(); }\n    }\n\n    /**\n     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.\n     *\n     * @param changes - collection of changes.\n     * @memberof MapPolygonLayerDirective\n     */\n    public ngOnChanges(changes: { [key: string]: SimpleChange }) {\n        if (changes['PolygonOptions']) {\n            this._zone.runOutsideAngular(() => {\n                this.UpdatePolygons();\n            });\n        }\n        if (changes['Visible'] && !changes['Visible'].firstChange) {\n            this._layerPromise.then(l => l.SetVisible(this.Visible));\n        }\n        if ((changes['ZIndex'] && !changes['ZIndex'].firstChange) ||\n            (changes['LayerOffset'] && !changes['LayerOffset'].firstChange)\n        ) {\n            throw (new Error('You cannot change ZIndex or LayerOffset after the layer has been created.'));\n        }\n        if ((changes['ShowLabels'] && !changes['ShowLabels'].firstChange) ||\n            (changes['LabelMinZoom'] && !changes['LabelMinZoom'].firstChange) ||\n            (changes['LabelMaxZoom'] && !changes['LabelMaxZoom'].firstChange)\n        ) {\n            if (this._canvas) {\n                this._canvas.Redraw(true);\n            }\n        }\n        if (changes['ShowTooltips'] && this._tooltip) {\n            this.ManageTooltip(changes['ShowTooltips'].currentValue);\n        }\n    }\n\n    /**\n     * Obtains a string representation of the Marker Id.\n     * @returns - string representation of the marker id.\n     * @memberof MapPolygonLayerDirective\n     */\n    public toString(): string { return 'MapPolygonLayer-' + this._id.toString(); }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Adds various event listeners for the marker.\n     *\n     * @param p - the polygon for which to add the event.\n     *\n     * @memberof MapPolygonLayerDirective\n     */\n    private AddEventListeners(p: Polygon): void {\n        const handlers = [\n            { name: 'click', handler: (ev: MouseEvent) => this.PolygonClick.emit({Polygon: p, Click: ev}) },\n            { name: 'dblclick', handler: (ev: MouseEvent) => this.PolygonDblClick.emit({Polygon: p, Click: ev}) },\n            { name: 'mousemove', handler: (ev: MouseEvent) => this.PolygonMouseMove.emit({Polygon: p, Click: ev}) },\n            { name: 'mouseout', handler: (ev: MouseEvent) => this.PolygonMouseOut.emit({Polygon: p, Click: ev}) },\n            { name: 'mouseover', handler: (ev: MouseEvent) => this.PolygonMouseOver.emit({Polygon: p, Click: ev}) }\n        ];\n        handlers.forEach((obj) => p.AddListener(obj.name, obj.handler));\n    }\n\n    /**\n     * Draws the polygon labels. Called by the Canvas overlay.\n     *\n     * @param el - The canvas on which to draw the labels.\n     * @memberof MapPolygonLayerDirective\n     */\n    private DrawLabels(el: HTMLCanvasElement): void {\n        if (this.ShowLabels) {\n            this._mapService.GetZoom().then(z => {\n                if (this.LabelMinZoom <= z && this.LabelMaxZoom >= z) {\n                    const ctx: CanvasRenderingContext2D = el.getContext('2d');\n                    const labels = this._labels.map(x => x.title);\n                    this._mapService.LocationsToPoints(this._labels.map(x => x.loc)).then(locs => {\n                        const size: ISize = this._mapService.MapSize;\n                        for (let i = 0, len = locs.length; i < len; i++) {\n                            // Don't draw the point if it is not in view. This greatly improves performance when zoomed in.\n                            if (locs[i].x >= 0 && locs[i].y >= 0 && locs[i].x <= size.width && locs[i].y <= size.height) {\n                                this.DrawText(ctx, locs[i], labels[i]);\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * Draws the label text at the appropriate place on the canvas.\n     * @param ctx - Canvas drawing context.\n     * @param loc - Pixel location on the canvas where to center the text.\n     * @param text - Text to draw.\n     */\n    private DrawText(ctx: CanvasRenderingContext2D, loc: IPoint, text: string) {\n        let lo: ILabelOptions = this.LabelOptions;\n        if (lo == null && this._tooltip) { lo = this._tooltip.DefaultLabelStyle; }\n        if (lo == null) { lo = this._defaultOptions; }\n\n        ctx.strokeStyle = lo.strokeColor;\n        ctx.font = `${lo.fontSize}px ${lo.fontFamily}`;\n        ctx.textAlign = 'center';\n        const strokeWeight: number = lo.strokeWeight;\n        if (text && strokeWeight && strokeWeight > 0) {\n                ctx.lineWidth = strokeWeight;\n                ctx.strokeText(text, loc.x, loc.y);\n        }\n        ctx.fillStyle = lo.fontColor;\n        ctx.fillText(text, loc.x, loc.y);\n    }\n\n    /**\n     * Manages the tooltip and the attachment of the associated events.\n     *\n     * @param show - True to enable the tooltip, false to disable.\n     * @memberof MapPolygonLayerDirective\n     */\n    private ManageTooltip(show: boolean): void {\n        if (show && this._canvas) {\n            // add tooltip subscriptions\n            this._tooltip.Set('hidden', true);\n            this._tooltipVisible = false;\n            this._tooltipSubscriptions.push(this.PolygonMouseMove.asObservable().subscribe(e => {\n                if (this._tooltipVisible) {\n                    const loc: ILatLong = this._canvas.GetCoordinatesFromClick(e.Click);\n                    this._tooltip.Set('position', loc);\n                }\n            }));\n            this._tooltipSubscriptions.push(this.PolygonMouseOver.asObservable().subscribe(e => {\n                if (e.Polygon.Title && e.Polygon.Title.length > 0) {\n                    const loc: ILatLong = this._canvas.GetCoordinatesFromClick(e.Click);\n                    this._tooltip.Set('text', e.Polygon.Title);\n                    this._tooltip.Set('position', loc);\n                    if (!this._tooltipVisible) {\n                        this._tooltip.Set('hidden', false);\n                        this._tooltipVisible = true;\n                    }\n                }\n            }));\n            this._tooltipSubscriptions.push(this.PolygonMouseOut.asObservable().subscribe(e => {\n                if (this._tooltipVisible) {\n                    this._tooltip.Set('hidden', true);\n                    this._tooltipVisible = false;\n                }\n            }));\n        }\n        else {\n            // remove tooltip subscriptions\n            this._tooltipSubscriptions.forEach(s => s.unsubscribe());\n            this._tooltipSubscriptions.splice(0);\n            this._tooltip.Set('hidden', true);\n            this._tooltipVisible = false;\n        }\n    }\n\n    /**\n     * Sets or updates the polygons based on the polygon options. This will place the polygons on the map\n     * and register the associated events.\n     *\n     * @memberof MapPolygonLayerDirective\n     * @method\n     */\n    private UpdatePolygons(): void {\n        if (this._layerPromise == null) {\n            return;\n        }\n        this._layerPromise.then(l => {\n            const polygons: Array<IPolygonOptions> = this._streaming ? this._polygonsLast.splice(0) : this._polygons;\n            if (!this._streaming) { this._labels.splice(0); }\n\n            // generate the promise for the markers\n            const lp: Promise<Array<Polygon>> = this._service.CreatePolygons(l.GetOptions().id, polygons);\n\n            // set markers once promises are fullfilled.\n            lp.then(p => {\n                p.forEach(poly => {\n                    if (poly.Title != null && poly.Title.length > 0) { this._labels.push({loc: poly.Centroid, title: poly.Title}); }\n                    this.AddEventListeners(poly);\n                });\n                this._streaming ? l.AddEntities(p) : l.SetEntities(p);\n                if (this._canvas) { this._canvas.Redraw(!this._streaming); }\n            });\n        });\n    }\n\n}\n","import {\n    Directive, SimpleChange, Input, Output, OnDestroy, OnChanges,\n    EventEmitter, ContentChild, AfterContentInit, ViewContainerRef, NgZone,\n    SimpleChanges\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IPoint } from '../interfaces/ipoint';\nimport { ISize } from '../interfaces/isize';\nimport { ILatLong } from '../interfaces/ilatlong';\nimport { IPolylineEvent } from '../interfaces/ipolyline-event';\nimport { IPolylineOptions } from '../interfaces/ipolyline-options';\nimport { ILayerOptions } from '../interfaces/ilayer-options';\nimport { ILabelOptions } from '../interfaces/ilabel-options';\nimport { LayerService } from '../services/layer.service';\nimport { MapService } from '../services/map.service';\nimport { Layer } from '../models/layer';\nimport { Polyline } from '../models/polyline';\nimport { MapLabel } from '../models/map-label';\nimport { CanvasOverlay } from '../models/canvas-overlay';\n\n/**\n * internal counter to use as ids for polylines.\n */\nlet layerId = 1000000;\n\n/**\n * MapPolylineLayerDirective performantly renders a large set of polyline on a {@link MapComponent}.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {MapComponent} from '...';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *   .map-container {\n *     height: 300px;\n *   }\n * `],\n * template: `\n *   <x-map [Latitude]=\"lat\" [Longitude]=\"lng\" [Zoom]=\"zoom\">\n *      <x-map-polyline-layer [PolygonOptions]=\"_polyline\"></x-map-polyline-layer>\n *   </x-map>\n * `\n * })\n * ```\n *\n * @export\n */\n@Directive({\n    selector: 'x-map-polyline-layer'\n})\nexport class MapPolylineLayerDirective implements OnDestroy, OnChanges, AfterContentInit {\n\n    ///\n    /// Field declarations\n    ///\n    private _id: number;\n    private _layerPromise: Promise<Layer>;\n    private _service: LayerService;\n    private _canvas: CanvasOverlay;\n    private _labels: Array<{loc: ILatLong, title: string}> = new Array<{loc: ILatLong, title: string}>();\n    private _tooltip: MapLabel;\n    private _tooltipSubscriptions: Array<Subscription> = new Array<Subscription>();\n    private _tooltipVisible: boolean = false;\n    private _defaultOptions: ILabelOptions = {\n        fontSize: 11,\n        fontFamily: 'sans-serif',\n        strokeWeight: 2,\n        strokeColor: '#000000',\n        fontColor: '#ffffff'\n    };\n    private _streaming: boolean = false;\n    private _polylines: Array<IPolylineOptions> = new Array<IPolylineOptions>();\n    private _polylinesLast: Array<IPolylineOptions> = new Array<IPolylineOptions>();\n\n    /**\n     * Set the maximum zoom at which the polyline labels are visible. Ignored if ShowLabel is false.\n     * @memberof MapPolylineLayerDirective\n     */\n    @Input() public LabelMaxZoom: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Set the minimum zoom at which the polyline labels are visible. Ignored if ShowLabel is false.\n     * @memberof MapPolylineLayerDirective\n     */\n    @Input() public LabelMinZoom: number = -1;\n\n    /**\n     * Sepcifies styleing options for on-map polyline labels.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Input() public LabelOptions: ILabelOptions;\n\n    /**\n     * Gets or sets An offset applied to the positioning of the layer.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Input() public LayerOffset: IPoint = null;\n\n    /**\n     * An array of polyline options representing the polylines in the layer.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Input()\n        public get PolylineOptions(): Array<IPolylineOptions> { return this._polylines; }\n        public set PolylineOptions(val: Array<IPolylineOptions>) {\n            if (this._streaming) {\n                this._polylinesLast.push(...val.slice(0));\n                this._polylines.push(...val);\n            }\n            else {\n                this._polylines = val.slice(0);\n            }\n        }\n\n    /**\n     * Whether to show the polylines titles as the labels on the polylines.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Input() public ShowLabels: boolean = false;\n\n    /**\n     * Whether to show the titles of the polylines as the tooltips on the polylines.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Input() public ShowTooltips: boolean = true;\n\n    /**\n     * Sets whether to treat changes in the PolylineOptions as streams of new markers. In this mode, changing the\n     * Array supplied in PolylineOptions will be incrementally drawn on the map as opposed to replace the polylines on the map.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Input()\n        public get TreatNewPolylineOptionsAsStream(): boolean { return this._streaming; }\n        public set TreatNewPolylineOptionsAsStream(val: boolean) { this._streaming = val; }\n\n    /**\n     * Sets the visibility of the marker layer\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Input() public Visible: boolean;\n\n    /**\n     * Gets or sets the z-index of the layer. If not used, layers get stacked in the order created.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Input() public ZIndex: number = 0;\n\n    ///\n    /// Delegates\n    ///\n\n    /**\n     * This event emitter gets emitted when the user clicks a polyline in the layer.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Output() public PolylineClick: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired when the DOM dblclick event is fired on a polyline in the layer.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Output() PolylineDblClick: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired when the DOM mousemove event is fired on a polyline in the layer.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Output() PolylineMouseMove: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired on mouseout on a polyline in the layer.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Output() PolylineMouseOut: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n    /**\n     * This event is fired on mouseover on a polyline in a layer.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    @Output() PolylineMouseOver: EventEmitter<IPolylineEvent> = new EventEmitter<IPolylineEvent>();\n\n\n\n    ///\n    /// Property declarations\n    ///\n\n    /**\n     * Gets the id of the polyline layer.\n     *\n     * @readonly\n     * @memberof MapPolylineLayerDirective\n     */\n    public get Id(): number { return this._id; }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of MapPolylineLayerDirective.\n     * @param _layerService - Concreate implementation of a {@link LayerService}.\n     * @param _mapService - Concreate implementation of a {@link MapService}.\n     * @param _zone - Concreate implementation of a {@link NgZone} service.\n     * @memberof MapPolylineLayerDirective\n     */\n    constructor(\n        private _layerService: LayerService,\n        private _mapService: MapService,\n        private _zone: NgZone) {\n        this._id = layerId++;\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Called after Component content initialization. Part of ng Component life cycle.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    public ngAfterContentInit() {\n        const layerOptions: ILayerOptions = {\n            id: this._id\n        };\n        this._zone.runOutsideAngular(() => {\n            const fakeLayerDirective: any = {\n                Id : this._id,\n                Visible: this.Visible,\n                LayerOffset: this.LayerOffset,\n                ZIndex: this.ZIndex\n            };\n            this._layerService.AddLayer(fakeLayerDirective);\n            this._layerPromise = this._layerService.GetNativeLayer(fakeLayerDirective);\n\n            Promise.all([\n                    this._layerPromise,\n                    this._mapService.CreateCanvasOverlay(el => this.DrawLabels(el))\n                ]).then(values => {\n                    values[0].SetVisible(this.Visible);\n                    this._canvas = values[1];\n                    this._canvas._canvasReady.then(b => {\n                        this._tooltip = this._canvas.GetToolTipOverlay();\n                        this.ManageTooltip(this.ShowTooltips);\n                    });\n                    if (this.PolylineOptions) {\n                        this._zone.runOutsideAngular(() => this.UpdatePolylines());\n                    }\n                });\n            this._service = this._layerService;\n        });\n    }\n\n    /**\n     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    public ngOnDestroy() {\n        this._tooltipSubscriptions.forEach(s => s.unsubscribe());\n        this._layerPromise.then(l => {\n            l.Delete();\n        });\n        if (this._canvas) { this._canvas.Delete(); }\n    }\n\n    /**\n     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.\n     *\n     * @param changes - collection of changes.\n     * @memberof MapPolylineLayerDirective\n     */\n    public ngOnChanges(changes: { [key: string]: SimpleChange }) {\n        if (changes['PolylineOptions']) {\n            this._zone.runOutsideAngular(() => {\n                this.UpdatePolylines();\n            });\n        }\n        if (changes['Visible'] && !changes['Visible'].firstChange) {\n            this._layerPromise.then(l => l.SetVisible(this.Visible));\n        }\n        if ((changes['ZIndex'] && !changes['ZIndex'].firstChange) ||\n            (changes['LayerOffset'] && !changes['LayerOffset'].firstChange)\n        ) {\n            throw (new Error('You cannot change ZIndex or LayerOffset after the layer has been created.'));\n        }\n        if ((changes['ShowLabels'] && !changes['ShowLabels'].firstChange) ||\n            (changes['LabelMinZoom'] && !changes['LabelMinZoom'].firstChange) ||\n            (changes['LabelMaxZoom'] && !changes['LabelMaxZoom'].firstChange)\n        ) {\n            if (this._canvas) {\n                this._canvas.Redraw(true);\n            }\n        }\n        if (changes['ShowTooltips'] && this._tooltip) {\n            this.ManageTooltip(changes['ShowTooltips'].currentValue);\n        }\n    }\n\n    /**\n     * Obtains a string representation of the Layer Id.\n     * @returns - string representation of the layer id.\n     * @memberof MapPolylineLayerDirective\n     */\n    public toString(): string { return 'MapPolylineLayer-' + this._id.toString(); }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Adds various event listeners for the polylines.\n     *\n     * @param p - the polyline for which to add the event.\n     *\n     * @memberof MapPolylineLayerDirective\n     */\n    private AddEventListeners(p: Polyline): void {\n        const handlers = [\n            { name: 'click', handler: (ev: MouseEvent) => this.PolylineClick.emit({Polyline: p, Click: ev}) },\n            { name: 'dblclick', handler: (ev: MouseEvent) => this.PolylineDblClick.emit({Polyline: p, Click: ev}) },\n            { name: 'mousemove', handler: (ev: MouseEvent) => this.PolylineMouseMove.emit({Polyline: p, Click: ev}) },\n            { name: 'mouseout', handler: (ev: MouseEvent) => this.PolylineMouseOut.emit({Polyline: p, Click: ev}) },\n            { name: 'mouseover', handler: (ev: MouseEvent) => this.PolylineMouseOver.emit({Polyline: p, Click: ev}) }\n        ];\n        handlers.forEach((obj) => p.AddListener(obj.name, obj.handler));\n    }\n\n    /**\n     * Draws the polyline labels. Called by the Canvas overlay.\n     *\n     * @param el - The canvas on which to draw the labels.\n     * @memberof MapPolylineLayerDirective\n     */\n    private DrawLabels(el: HTMLCanvasElement): void {\n        if (this.ShowLabels) {\n            this._mapService.GetZoom().then(z => {\n                if (this.LabelMinZoom <= z && this.LabelMaxZoom >= z) {\n                    const ctx: CanvasRenderingContext2D = el.getContext('2d');\n                    const labels = this._labels.map(x => x.title);\n                    this._mapService.LocationsToPoints(this._labels.map(x => x.loc)).then(locs => {\n                        const size: ISize = this._mapService.MapSize;\n                        for (let i = 0, len = locs.length; i < len; i++) {\n                            // Don't draw the point if it is not in view. This greatly improves performance when zoomed in.\n                            if (locs[i].x >= 0 && locs[i].y >= 0 && locs[i].x <= size.width && locs[i].y <= size.height) {\n                                this.DrawText(ctx, locs[i], labels[i]);\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * Draws the label text at the appropriate place on the canvas.\n     * @param ctx - Canvas drawing context.\n     * @param loc - Pixel location on the canvas where to center the text.\n     * @param text - Text to draw.\n     */\n    private DrawText(ctx: CanvasRenderingContext2D, loc: IPoint, text: string) {\n        let lo: ILabelOptions = this.LabelOptions;\n        if (lo == null && this._tooltip) { lo = this._tooltip.DefaultLabelStyle; }\n        if (lo == null) { lo = this._defaultOptions; }\n\n        ctx.strokeStyle = lo.strokeColor;\n        ctx.font = `${lo.fontSize}px ${lo.fontFamily}`;\n        ctx.textAlign = 'center';\n        const strokeWeight: number = lo.strokeWeight;\n        if (text && strokeWeight && strokeWeight > 0) {\n                ctx.lineWidth = strokeWeight;\n                ctx.strokeText(text, loc.x, loc.y);\n        }\n        ctx.fillStyle = lo.fontColor;\n        ctx.fillText(text, loc.x, loc.y);\n    }\n\n    /**\n     * Manages the tooltip and the attachment of the associated events.\n     *\n     * @param show - True to enable the tooltip, false to disable.\n     * @memberof MapPolygonLayerDirective\n     */\n    private ManageTooltip(show: boolean): void {\n        if (show && this._canvas) {\n            // add tooltip subscriptions\n            this._tooltip.Set('hidden', true);\n            this._tooltipVisible = false;\n            this._tooltipSubscriptions.push(this.PolylineMouseMove.asObservable().subscribe(e => {\n                if (this._tooltipVisible) {\n                    const loc: ILatLong = this._canvas.GetCoordinatesFromClick(e.Click);\n                    this._tooltip.Set('position', loc);\n                }\n            }));\n            this._tooltipSubscriptions.push(this.PolylineMouseOver.asObservable().subscribe(e => {\n                if (e.Polyline.Title && e.Polyline.Title.length > 0) {\n                    const loc: ILatLong = this._canvas.GetCoordinatesFromClick(e.Click);\n                    this._tooltip.Set('text', e.Polyline.Title);\n                    this._tooltip.Set('position', loc);\n                    if (!this._tooltipVisible) {\n                        this._tooltip.Set('hidden', false);\n                        this._tooltipVisible = true;\n                    }\n                }\n            }));\n            this._tooltipSubscriptions.push(this.PolylineMouseOut.asObservable().subscribe(e => {\n                if (this._tooltipVisible) {\n                    this._tooltip.Set('hidden', true);\n                    this._tooltipVisible = false;\n                }\n            }));\n        }\n        else {\n            // remove tooltip subscriptions\n            this._tooltipSubscriptions.forEach(s => s.unsubscribe());\n            this._tooltipSubscriptions.splice(0);\n            this._tooltip.Set('hidden', true);\n            this._tooltipVisible = false;\n        }\n    }\n\n    /**\n     * Sets or updates the polyliness based on the polyline options. This will place the polylines on the map\n     * and register the associated events.\n     *\n     * @memberof MapPolylineLayerDirective\n     * @method\n     */\n    private UpdatePolylines(): void {\n        if (this._layerPromise == null) {\n            return;\n        }\n        this._layerPromise.then(l => {\n            const polylines: Array<IPolylineOptions> = this._streaming ? this._polylinesLast.splice(0) : this._polylines;\n            if (!this._streaming) { this._labels.splice(0); }\n\n            // generate the promise for the polylines\n            const lp: Promise<Array<Polyline|Array<Polyline>>> = this._service.CreatePolylines(l.GetOptions().id, polylines);\n\n            // set polylines once promises are fullfilled.\n            lp.then(p => {\n                const y: Array<Polyline> = new Array<Polyline>();\n                p.forEach(poly => {\n                    if (Array.isArray(poly)) {\n                        let title: string = '';\n                        const centroids: Array<ILatLong> = new Array<ILatLong>();\n                        poly.forEach(x => {\n                            y.push(x);\n                            this.AddEventListeners(x);\n                            centroids.push(x.Centroid);\n                            if (x.Title != null && x.Title.length > 0 && title.length === 0) { title = x.Title; }\n                        });\n                        this._labels.push({loc: Polyline.GetPolylineCentroid(centroids), title: title});\n                    }\n                    else {\n                        y.push(poly);\n                        if (poly.Title != null && poly.Title.length > 0) { this._labels.push({loc: poly.Centroid, title: poly.Title}); }\n                        this.AddEventListeners(poly);\n                    }\n                });\n                this._streaming ? l.AddEntities(y) : l.SetEntities(y);\n                if (this._canvas) { this._canvas.Redraw(!this._streaming); }\n            });\n        });\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Abstract implementation. USed for defintion only and as a base to implement your\n * own provider.\n *\n * @export\n * @abstract\n */\n@Injectable()\nexport abstract class MapAPILoader {\n\n    /**\n     * Loads the necessary resources for a given map architecture.\n     *\n     * @abstract\n     * @returns - Promise fullfilled when the resources have been loaded.\n     *\n     * @memberof MapAPILoader\n     */\n    abstract Load(): Promise<void>;\n\n}\n\n/**\n * Document Reference service to assist with abstracting the availability of document. Needed for AOT and\n * Server Side rendering\n *\n * @export\n */\n@Injectable()\nexport class DocumentRef {\n\n    /**\n     * Gets whether a document implementation is available. Generally will be true in the browser and false otherwise, unless there\n     * there is a browser-less implementation in the current non-browser environment.\n     *\n     * @readonly\n     * @memberof DocumentRef\n     */\n    public get IsAvailable(): boolean {\n        return !(typeof (document) === 'undefined');\n    }\n\n    /**\n     * Returns the document object of the current environment.\n     *\n     * @returns - The document object.\n     *\n     * @memberof DocumentRef\n     */\n    public GetNativeDocument(): any {\n        if (typeof (document) === 'undefined') {\n            return null;\n        }\n        return document;\n    }\n}\n\n/**\n * Window Reference service to assist with abstracting the availability of window. Needed for AOT and\n * Server Side rendering\n *\n * @export\n */\n@Injectable()\nexport class WindowRef {\n\n    /**\n     * Gets whether a window implementation is available. Generally will be true in the browser and false otherwise, unless there\n     * there is a browser-less implementation in the current non-browser environment.\n     *\n     * @readonly\n     * @memberof WindowRef\n     */\n    public get IsAvailable(): boolean {\n        return !(typeof (window) === 'undefined');\n    }\n\n    /**\n     * Returns the window object of the current environment.\n     *\n     * @returns - The window object.\n     *\n     * @memberof WindowRef\n     */\n    public GetNativeWindow(): any {\n        if (typeof (window) === 'undefined') {\n            return null;\n        }\n        return window;\n    }\n}\n\n","import { Injectable, Optional } from '@angular/core';\nimport { MapAPILoader, WindowRef, DocumentRef } from '../mapapiloader';\n\n/**\n * Protocol enumeration\n *\n * @export\n * @enum {number}\n */\nexport enum ScriptProtocol {\n    HTTP,\n    HTTPS,\n    AUTO\n}\n\n/**\n * Bing Maps V8 specific loader configuration to be used with the {@link BingMapAPILoader}\n *\n * @export\n */\n@Injectable()\nexport class BingMapAPILoaderConfig  {\n\n    ///\n    /// API key for bing maps\n    ///\n    apiKey = '';\n\n    ///\n    /// Host and Path used for the `<script>` tag.\n    ///\n    hostAndPath = 'www.bing.com/api/maps/mapcontrol';\n\n    ///\n    /// Protocol used for the `<script>` tag.\n    ///\n    protocol: ScriptProtocol = ScriptProtocol.HTTPS;\n\n    ///\n    /// The branch to be used. Leave empty for production. Use experimental\n    ///\n    branch = '';\n}\n\n/**\n * Default loader configuration.\n */\nconst DEFAULT_CONFIGURATION = new BingMapAPILoaderConfig();\n\n/**\n * Bing Maps V8 implementation for the {@link MapAPILoader} service.\n *\n * @export\n */\n@Injectable()\nexport class BingMapAPILoader extends MapAPILoader {\n\n    ///\n    /// Field defintitions.\n    ///\n    private _scriptLoadingPromise: Promise<void>;\n\n    ///\n    /// Property declarations.\n    ///\n\n    /**\n     * Gets the loader configuration.\n     *\n     * @readonly\n     * @memberof BingMapAPILoader\n     */\n    public get Config(): BingMapAPILoaderConfig { return this._config; }\n\n    /**\n     * Creates an instance of BingMapAPILoader.\n     * @param _config  - The loader configuration.\n     * @param _windowRef - An instance of {@link WindowRef}. Necessary because Bing Map V8 interacts with the window object.\n     * @param _documentRef - An instance of {@link DocumentRef}.\n     * Necessary because Bing Map V8 interacts with the document object.\n     *\n     * @memberof BingMapAPILoader\n     */\n    constructor( @Optional() private _config: BingMapAPILoaderConfig, private _windowRef: WindowRef, private _documentRef: DocumentRef) {\n        super();\n        if (this._config === null || this._config === undefined) {\n            this._config = DEFAULT_CONFIGURATION;\n        }\n    }\n\n    ///\n    /// Public methods and MapAPILoader implementation.\n    ///\n\n    /**\n     * Loads the necessary resources for Bing Maps V8.\n     *\n     * @memberof BingMapAPILoader\n     */\n    public Load(): Promise<void> {\n        if (this._scriptLoadingPromise) {\n            return this._scriptLoadingPromise;\n        }\n\n        const script = this._documentRef.GetNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        const callbackName = `angular2bingmaps${new Date().getMilliseconds()}`;\n        script.src = this.GetScriptSrc(callbackName);\n\n        this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\n            (<any>this._windowRef.GetNativeWindow())[callbackName] = () => {\n                resolve();\n            };\n            script.onerror = (error: Event) => { reject(error); };\n        });\n        this._documentRef.GetNativeDocument().head.appendChild(script);\n        return this._scriptLoadingPromise;\n    }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Gets the Bing Map V8 scripts url for injections into the header.\n     *\n     * @param callbackName - Name of the function to be called when the Bing Maps V8 scripts are loaded.\n     * @returns - The url to be used to load the Bing Map scripts.\n     *\n     * @memberof BingMapAPILoader\n     */\n    private GetScriptSrc(callbackName: string): string {\n        const protocolType: ScriptProtocol = (this._config && this._config.protocol) || DEFAULT_CONFIGURATION.protocol;\n        let protocol: string;\n\n        switch (protocolType) {\n            case ScriptProtocol.AUTO:\n                protocol = '';\n                break;\n            case ScriptProtocol.HTTP:\n                protocol = 'http:';\n                break;\n            case ScriptProtocol.HTTPS:\n                protocol = 'https:';\n                break;\n        }\n\n        const hostAndPath: string = this._config.hostAndPath || DEFAULT_CONFIGURATION.hostAndPath;\n        const queryParams: { [key: string]: string } = {\n            callback: callbackName\n        };\n        if (this._config.branch !== '') {\n            queryParams['branch'] = this._config.branch;\n        }\n        const params: string = Object.keys(queryParams)\n            .map((k: string, i: number) => {\n                let param = (i === 0) ? '?' : '&';\n                return param += `${k}=${queryParams[k]}`;\n            })\n            .join('');\n        return `${protocol}//${hostAndPath}${params}`;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { InfoWindow } from '../../models/info-window';\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { InfoBoxActionDirective } from '../../components/infobox-action';\nimport { InfoBoxService } from '../infobox.service';\nimport { MapService } from '../../services/map.service';\nimport { InfoBoxComponent } from '../../components/infobox';\nimport { BingMapService } from './bing-map.service';\nimport { BingInfoWindow } from '../../models/bing/bing-info-window';\nimport { BingMapEventsLookup } from '../../models/bing/bing-events-lookup';\n\n/**\n * Concrete implementation of the {@link InfoBoxService} contract for the Bing Maps V8 architecture.\n *\n * @export\n */\n@Injectable()\nexport class BingInfoBoxService implements InfoBoxService {\n    ///\n    /// Field declarations\n    ///\n    private _boxes: Map<InfoBoxComponent, Promise<InfoWindow>> = new Map<InfoBoxComponent, Promise<InfoWindow>>();\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of BingInfoBoxService.\n     * @param _mapService - Concrete {@link MapService} implementation for Bing Maps V8. An instance of {@link BingMapService}.\n     * @param _zone - An instance of NgZone to provide zone aware promises.\n     *\n     * @memberof BingInfoBoxService\n     */\n    constructor(private _mapService: MapService, private _zone: NgZone) { }\n\n    /**\n     * Adds an info window to the map or layer.\n     *\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     *\n     * @memberof BingInfoBoxService\n     */\n    public AddInfoWindow(info: InfoBoxComponent): void {\n        const options: IInfoWindowOptions = {};\n        if (typeof info.Latitude === 'number' && typeof info.Longitude === 'number') {\n            options.position = {\n                latitude: info.Latitude,\n                longitude: info.Longitude\n            };\n        }\n        if (typeof info.InfoWindowActions !== 'undefined' && info.InfoWindowActions.length > 0) {\n            options.actions = [];\n            info.InfoWindowActions.forEach((action: InfoBoxActionDirective) => {\n                options.actions.push({\n                    label: action.Label,\n                    eventHandler: () => { action.ActionClicked.emit(null); }\n                });\n            });\n        }\n        if (info.HtmlContent !== '') {\n            options.htmlContent = info.HtmlContent;\n        }\n        else {\n            options.title = info.Title;\n            options.description = info.Description;\n        }\n        if (info.xOffset || info.yOffset) {\n            if (options.pixelOffset == null) { options.pixelOffset = { x: 0, y: 0 }; }\n            if (info.xOffset) { options.pixelOffset.x = info.xOffset; }\n            if (info.yOffset) { options.pixelOffset.y = info.yOffset; }\n        }\n\n        options.visible = info.Visible;\n        const infoPromise = this._mapService.CreateInfoWindow(options);\n        this._boxes.set(info, infoPromise);\n    }\n\n    /**\n     * Closes an InfoBoxComponent that is open.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     * @returns - A promise that is fullfilled when the infobox has been closed.\n     *\n     * @memberof InfoBoxService\n     */\n    public Close(info: InfoBoxComponent): Promise<void> {\n        return this._boxes.get(info).then((w) => w.Close());\n    }\n\n    /**\n     * Registers an event delegate for an info window.\n     *\n     * @param eventName - The name of the event to register (e.g. 'click')\n     * @param infoComponent - The {@link InfoBoxComponent} for which to register the event.\n     * @returns - Observable emiting an instance of T each time the event occurs.\n     *\n     * @memberof GoogleInfoBoxService\n     */\n    public CreateEventObservable<T>(eventName: string, infoComponent: InfoBoxComponent): Observable<T> {\n        const eventNameTranslated = BingMapEventsLookup[eventName];\n        return Observable.create((observer: Observer<T>) => {\n            this._boxes.get(infoComponent).then((b: InfoWindow) => {\n                b.AddListener(eventNameTranslated, (e: T) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n\n    /**\n     * Deletes an infobox.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     * @returns - A promise that is fullfilled when the infobox has been deleted.\n     *\n     * @memberof InfoBoxService\n     */\n    public DeleteInfoWindow(info: InfoBoxComponent): Promise<void> {\n        const w = this._boxes.get(info);\n        if (w == null) {\n            return Promise.resolve();\n        }\n        return w.then((i: InfoWindow) => {\n            return this._zone.run(() => {\n                i.Close();\n                this._boxes.delete(info);\n            });\n        });\n    }\n\n    /**\n     * Opens an infobox that is closed.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     * @returns - A promise that is fullfilled when the infobox has been opened.\n     *\n     * @memberof InfoBoxService\n     */\n    public Open(info: InfoBoxComponent, loc?: ILatLong): Promise<void> {\n        if (info.CloseInfoBoxesOnOpen || info.Modal) {\n            // close all open info boxes.\n            this._boxes.forEach((v: Promise<InfoWindow>, i: InfoBoxComponent) => {\n                if (info.Id !== i.Id) {\n                    v.then(w => {\n                        if (w.IsOpen) {\n                            w.Close();\n                            i.Close();\n                        }\n                    });\n                }\n            });\n        }\n        return this._boxes.get(info).then((w) => {\n            const options: IInfoWindowOptions = {};\n            if (info.HtmlContent !== '') {\n                options.htmlContent = info.HtmlContent;\n            }\n            else {\n                options.title = info.Title;\n                options.description = info.Description;\n            }\n            w.SetOptions(options);\n\n            if (info.Latitude && info.Longitude) {\n                w.SetPosition({ latitude: info.Latitude, longitude: info.Longitude });\n            }\n            else if (loc) {\n                ///\n                /// this situation is specifically used for cluster layers that use spidering.\n                ///\n                w.SetPosition(loc);\n            }\n            else if (info.HostMarker) {\n                w.SetPosition({ latitude: info.HostMarker.Latitude, longitude: info.HostMarker.Longitude });\n            }\n            w.Open();\n        });\n    }\n\n    /**\n     * Sets the infobox options.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     * @param options - {@link IInfoWindowOptions} object containing the options to set. Options provided are\n     * merged with the existing options of the underlying infobox.\n     * @returns - A promise that is fullfilled when the infobox options have been updated.\n     *\n     * @memberof InfoBoxService\n     */\n    public SetOptions(info: InfoBoxComponent, options: IInfoWindowOptions): Promise<void> {\n        return this._boxes.get(info).then((i: InfoWindow) => i.SetOptions(options));\n    }\n\n    /**\n     * Set the position of the infobox based on the properties set on the InfoBox component.\n     *\n     * @abstract\n     * @param info - {@link InfoBoxComponent} component object representing the infobox.\n     * @returns - A promise that is fullfilled when the infobox position has been updated.\n     *\n     * @memberof InfoBoxService\n     */\n    public SetPosition(info: InfoBoxComponent): Promise<void> {\n        return this._boxes.get(info).then((i: InfoWindow) => i.SetPosition({\n            latitude: info.Latitude,\n            longitude: info.Longitude\n        }));\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer, Subject } from 'rxjs';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\nimport { IPoint } from '../../interfaces/ipoint';\nimport { MapMarkerDirective } from '../../components/map-marker';\nimport { MarkerService } from '../../services/marker.service';\nimport { MapService } from '../../services/map.service';\nimport { LayerService } from '../../services/layer.service';\nimport { ClusterService } from '../../services/cluster.service';\nimport { Marker } from '../../models/marker';\nimport { BingMapService } from './bing-map.service';\nimport { BingConversions } from './bing-conversions';\n\n/**\n * Concrete implementation of the MarkerService abstract class for Bing Maps V8.\n *\n * @export\n */\n@Injectable()\nexport class BingMarkerService implements MarkerService {\n\n    ///\n    /// Field declarations\n    ///\n    private _markers: Map<MapMarkerDirective, Promise<Marker>> = new Map<MapMarkerDirective, Promise<Marker>>();\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of BingMarkerService.\n     * @param _mapService - {@link MapService} instance. The concrete {@link BingMapService} implementation is expected.\n     * @param _layerService - {@link LayerService} instance.\n     * The concrete {@link BingLayerService} implementation is expected.\n     * @param _clusterService - {@link ClusterService} instance.\n     * The concrete {@link BingClusterService} implementation is expected.\n     * @param _zone - NgZone instance to support zone aware promises.\n     *\n     * @memberof BingMarkerService\n     */\n    constructor(private _mapService: MapService,\n                private _layerService: LayerService,\n                private _clusterService: ClusterService,\n                private _zone: NgZone) {\n    }\n\n    ///\n    /// Public members and MarkerService implementation\n    ///\n\n    /**\n     * Adds a marker. Depending on the marker context, the marker will either by added to the map or a correcsponding layer.\n     *\n     * @param marker - The {@link MapMarkerDirective} to be added.\n     *\n     * @memberof BingMarkerService\n     */\n    public AddMarker(marker: MapMarkerDirective): void {\n        const o: IMarkerOptions = {\n            position: { latitude: marker.Latitude, longitude: marker.Longitude },\n            title: marker.Title,\n            label: marker.Label,\n            draggable: marker.Draggable,\n            icon: marker.IconUrl,\n            iconInfo: marker.IconInfo,\n            isFirst: marker.IsFirstInSet,\n            isLast: marker.IsLastInSet\n        };\n        if (marker.Width) { o.width = marker.Width; }\n        if (marker.Height) { o.height = marker.Height; }\n        if (marker.Anchor) { o.anchor = marker.Anchor; }\n        if (marker.Metadata) { o.metadata = marker.Metadata; }\n\n        // create marker via promise.\n        let markerPromise: Promise<Marker> = null;\n        if (marker.InClusterLayer) {\n            markerPromise = this._clusterService.CreateMarker(marker.LayerId, o);\n        }\n        else if (marker.InCustomLayer) {\n            markerPromise = this._layerService.CreateMarker(marker.LayerId, o);\n        }\n        else {\n            markerPromise = this._mapService.CreateMarker(o);\n        }\n\n        this._markers.set(marker, markerPromise);\n        if (marker.IconInfo) {\n            markerPromise.then((m: Marker) => {\n                // update iconInfo to provide hook to do post icon creation activities and\n                // also re-anchor the marker\n                marker.DynamicMarkerCreated.emit(o.iconInfo);\n                const p: IPoint = {\n                    x: (o.iconInfo.size && o.iconInfo.markerOffsetRatio) ? (o.iconInfo.size.width * o.iconInfo.markerOffsetRatio.x) : 0,\n                    y: (o.iconInfo.size && o.iconInfo.markerOffsetRatio) ? (o.iconInfo.size.height * o.iconInfo.markerOffsetRatio.y) : 0,\n                };\n                m.SetAnchor(p);\n            });\n        }\n    }\n\n    /**\n     * Registers an event delegate for a marker.\n     *\n     * @param eventName - The name of the event to register (e.g. 'click')\n     * @param marker - The {@link MapMarker} for which to register the event.\n     * @returns - Observable emiting an instance of T each time the event occurs.\n     *\n     * @memberof BingMarkerService\n     */\n    public CreateEventObservable<T>(eventName: string, marker: MapMarkerDirective): Observable<T> {\n        const b: Subject<T> = new Subject<T>();\n        if (eventName === 'mousemove') {\n            return b.asObservable();\n        }\n        if (eventName === 'rightclick') {\n            return b.asObservable();\n        }\n        ///\n        /// mousemove and rightclick are not supported by bing polygons.\n        ///\n\n\n        return Observable.create((observer: Observer<T>) => {\n            this._markers.get(marker).then((m: Marker) => {\n                m.AddListener(eventName, (e: T) => this._zone.run(() =>\n                    observer.next(e)));\n            });\n        });\n    }\n\n    /**\n     * Deletes a marker.\n     *\n     * @param marker - {@link MapMarker} to be deleted.\n     * @returns - A promise fullfilled once the marker has been deleted.\n     *\n     * @memberof BingMarkerService\n     */\n    public DeleteMarker(marker: MapMarkerDirective): Promise<void> {\n        const m = this._markers.get(marker);\n        let p: Promise<void> = Promise.resolve();\n        if (m != null) {\n            p = m.then((ma: Marker) => {\n                if (marker.InClusterLayer) {\n                    this._clusterService.GetNativeLayer(marker.LayerId).then(l => { l.RemoveEntity(ma); });\n                }\n                if (marker.InCustomLayer) {\n                    this._layerService.GetNativeLayer(marker.LayerId).then(l => { l.RemoveEntity(ma); });\n                }\n                return this._zone.run(() => {\n                    ma.DeleteMarker();\n                    this._markers.delete(marker);\n                });\n            });\n        }\n        return p;\n    }\n\n    /**\n     * Obtains geo coordinates for the marker on the click location\n     *\n     * @param e - The mouse event.\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\n     *\n     * @memberof BingMarkerService\n     */\n    public GetCoordinatesFromClick(e: MouseEvent | any): ILatLong {\n        if (!e) {\n            return null;\n        }\n        if (!e.primitive) {\n            return null;\n        }\n        if (!(e.primitive instanceof Microsoft.Maps.Pushpin)) {\n            return null;\n        }\n        const p: Microsoft.Maps.Pushpin = e.primitive;\n        const loc: Microsoft.Maps.Location = p.getLocation();\n        return { latitude: loc.latitude, longitude: loc.longitude };\n    }\n\n    /**\n     * Obtains the marker model for the marker allowing access to native implementation functionatiliy.\n     *\n     * @param marker - The {@link MapMarker} for which to obtain the marker model.\n     * @returns - A promise that when fullfilled contains the {@link Marker} implementation of the underlying platform.\n     *\n     * @memberof BingMarkerService\n     */\n    public GetNativeMarker(marker: MapMarkerDirective): Promise<Marker> {\n        return this._markers.get(marker);\n    }\n\n    /**\n     * Obtains the marker pixel location for the marker on the click location\n     *\n     * @param e - The mouse event.\n     * @returns - {@link ILatLong} containing the pixels of the marker on the map canvas.\n     *\n     * @memberof BingMarkerService\n     */\n    public GetPixelsFromClick(e: MouseEvent | any): IPoint {\n        const loc: ILatLong = this.GetCoordinatesFromClick(e);\n        if (loc == null) {\n            return null;\n        }\n        const l: Microsoft.Maps.Location = BingConversions.TranslateLocation(loc);\n        const p: Microsoft.Maps.Point = <Microsoft.Maps.Point>(<BingMapService>\n            this._mapService).MapInstance.tryLocationToPixel(l, Microsoft.Maps.PixelReference.control);\n        if (p == null) { return null; }\n        return { x: p.x, y: p.y };\n    }\n\n    /**\n     * Converts a geo location to a pixel location relative to the map canvas.\n     *\n     * @param target - Either a {@link MapMarker} or a {@link ILatLong} for the basis of translation.\n     * @returns - A promise that when fullfilled contains a {@link IPoint}\n     * with the pixel coordinates of the MapMarker or ILatLong relative to the map canvas.\n     *\n     * @memberof BingMarkerService\n     */\n    public LocationToPoint(target: MapMarkerDirective | ILatLong): Promise<IPoint> {\n        if (target == null) {\n            return Promise.resolve(null);\n        }\n        if (target instanceof MapMarkerDirective) {\n            return this._markers.get(target).then((m: Marker) => {\n                const l: ILatLong = m.Location;\n                const p: Promise<IPoint> = this._mapService.LocationToPoint(l);\n                return p;\n            });\n        }\n        return this._mapService.LocationToPoint(target);\n    }\n\n    /**\n     * Updates the anchor position for the marker.\n     *\n     * @param - The {@link MapMarker} object for which to upate the anchor.\n     * Anchor information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the anchor position has been updated.\n     *\n     * @memberof BingMarkerService\n     */\n    public UpdateAnchor(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => {\n            m.SetAnchor(marker.Anchor);\n        });\n    }\n\n    /**\n     * Updates whether the marker is draggable.\n     *\n     * @param - The {@link MapMarker} object for which to upate dragability.\n     * Dragability information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the marker has been updated.\n     *\n     * @memberof BingMarkerService\n     */\n    public UpdateDraggable(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => m.SetDraggable(marker.Draggable));\n    }\n\n    /**\n     * Updates the Icon on the marker.\n     *\n     * @param - The {@link MapMarker} object for which to upate the icon.\n     * Icon information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the icon information has been updated.\n     *\n     * @memberof BingMarkerService\n     */\n    public UpdateIcon(marker: MapMarkerDirective): Promise<void> {\n        const payload = (m: Marker, icon: string, iconInfo: IMarkerIconInfo) => {\n            if (icon && icon !== '') {\n                m.SetIcon(icon);\n                marker.DynamicMarkerCreated.emit(iconInfo);\n            }\n        };\n        return this._markers.get(marker).then((m: Marker) => {\n            if (marker.IconInfo) {\n                const s = Marker.CreateMarker(marker.IconInfo);\n                if (typeof(s) === 'string') { return(payload(m, s, marker.IconInfo)); }\n                else {\n                    return s.then(x => {\n                        return(payload(m, x.icon, x.iconInfo));\n                    });\n                }\n            }\n            else {\n                return(m.SetIcon(marker.IconUrl));\n            }\n        });\n    }\n\n    /**\n     * Updates the label on the marker.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate the label.\n     * Label information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the label has been updated.\n     *\n     * @memberof BingMarkerService\n     */\n    public UpdateLabel(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => { m.SetLabel(marker.Label); });\n    }\n\n    /**\n     * Updates the geo coordinates for the marker.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate the coordinates.\n     * Coordinate information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the position has been updated.\n     *\n     * @memberof BingMarkerService\n     */\n    public UpdateMarkerPosition(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then(\n            (m: Marker) => m.SetPosition({\n                latitude: marker.Latitude,\n                longitude: marker.Longitude\n            }));\n    }\n\n    /**\n     * Updates the title on the marker.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate the title.\n     * Title information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the title has been updated.\n     *\n     * @memberof BingMarkerService\n     */\n    public UpdateTitle(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => m.SetTitle(marker.Title));\n    }\n\n    /**\n     * Updates the visibility on the marker.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate the visiblity.\n     * Visibility information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the visibility has been updated.\n     *\n     * @memberof BingMarkerService\n     */\n    public UpdateVisible(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => m.SetVisible(marker.Visible));\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observer, Observable } from 'rxjs';\n\nimport { MapService } from '../map.service';\nimport { MapAPILoader } from '../mapapiloader';\nimport { BingMapAPILoader, BingMapAPILoaderConfig } from './bing-map.api-loader.service';\nimport { BingConversions } from './bing-conversions';\nimport { Marker } from '../../models/marker';\nimport { Polygon } from '../../models/polygon';\nimport { Polyline } from '../../models/polyline';\nimport { MarkerTypeId } from '../../models/marker-type-id';\nimport { InfoWindow } from '../../models/info-window';\nimport { BingMarker } from '../../models/bing/bing-marker';\nimport { Layer } from '../../models/layer';\nimport { BingLayer } from '../../models/bing/bing-layer';\nimport { BingClusterLayer } from '../../models/bing/bing-cluster-layer';\nimport { BingInfoWindow } from '../../models/bing/bing-info-window';\nimport { BingPolygon } from '../../models/bing/bing-polygon';\nimport { BingPolyline } from '../../models/bing/bing-polyline';\nimport { MixinMapLabelWithOverlayView } from '../../models/bing/bing-label';\nimport { MixinCanvasOverlay } from '../../models/bing/bing-canvas-overlay';\nimport { BingCanvasOverlay } from '../../models/bing/bing-canvas-overlay';\nimport { CanvasOverlay } from '../../models/canvas-overlay';\nimport { ILayerOptions } from '../../interfaces/ilayer-options';\nimport { IClusterOptions } from '../../interfaces/icluster-options';\nimport { IMapOptions } from '../../interfaces/imap-options';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { IPoint } from '../../interfaces/ipoint';\nimport { ISize } from '../../interfaces/isize';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { IBox } from '../../interfaces/ibox';\n\nimport { BingMapEventsLookup } from '../../models/bing/bing-events-lookup';\n\n/**\n * Concrete implementation of the MapService abstract implementing a Bin Map V8 provider\n *\n * @export\n */\n@Injectable()\nexport class BingMapService implements MapService {\n    ///\n    /// Field Declarations\n    ///\n\n    private _map: Promise<Microsoft.Maps.Map>;\n    private _mapInstance: Microsoft.Maps.Map;\n    private _mapResolver: (value?: Microsoft.Maps.Map) => void;\n    private _config: BingMapAPILoaderConfig;\n    private _modules: Map<string, Object> = new Map<string, Object>();\n\n    ///\n    /// Property Definitions\n    ///\n\n    /**\n     * Gets an array of loaded Bong modules.\n     *\n     * @readonly\n     * @memberof BingMapService\n     */\n    public get LoadedModules(): Map<string, Object> { return this._modules; }\n\n    /**\n     * Gets the Bing Map control instance underlying the implementation\n     *\n     * @readonly\n     * @memberof BingMapService\n     */\n    public get MapInstance(): Microsoft.Maps.Map { return this._mapInstance; }\n\n    /**\n     * Gets a Promise for a Bing Map control instance underlying the implementation. Use this instead of {@link MapInstance} if you\n     * are not sure if and when the instance will be created.\n     * @readonly\n     * @memberof BingMapService\n     */\n    public get MapPromise(): Promise<Microsoft.Maps.Map> { return this._map; }\n\n    /**\n     * Gets the maps physical size.\n     *\n     * @readonly\n     * @abstract\n     * @memberof BingMapService\n     */\n    public get MapSize(): ISize {\n        if (this.MapInstance) {\n            const s: ISize = { width: this.MapInstance.getWidth(), height: this.MapInstance.getHeight() };\n            return s;\n        }\n        return null;\n    }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of BingMapService.\n     * @param _loader MapAPILoader instance implemented for Bing Maps. This instance will generally be injected.\n     * @param _zone NgZone object to enable zone aware promises. This will generally be injected.\n     *\n     * @memberof BingMapService\n     */\n    constructor(private _loader: MapAPILoader, private _zone: NgZone) {\n        this._map = new Promise<Microsoft.Maps.Map>((resolve: () => void) => { this._mapResolver = resolve; });\n        this._config = (<BingMapAPILoader>this._loader).Config;\n    }\n\n    ///\n    /// Public methods and MapService interface implementation\n    ///\n\n    /**\n     * Creates a canvas overlay layer to perform custom drawing over the map with out\n     * some of the overhead associated with going through the Map objects.\n     * @param drawCallback A callback function that is triggered when the canvas is ready to be\n     * rendered for the current map view.\n     * @returns - Promise of a {@link CanvasOverlay} object.\n     * @memberof BingMapService\n     */\n    public CreateCanvasOverlay(drawCallback: (canvas: HTMLCanvasElement) => void): Promise<CanvasOverlay> {\n        return this._map.then((map: Microsoft.Maps.Map) => {\n            const overlay: BingCanvasOverlay = new BingCanvasOverlay(drawCallback);\n            map.layers.insert(overlay);\n            return overlay;\n        });\n    }\n\n    /**\n     * Creates a Bing map cluster layer within the map context\n     *\n     * @param options - Options for the layer. See {@link IClusterOptions}.\n     * @returns - Promise of a {@link Layer} object, which models the underlying Microsoft.Maps.ClusterLayer object.\n     *\n     * @memberof BingMapService\n     */\n    public CreateClusterLayer(options: IClusterOptions): Promise<Layer> {\n        return this._map.then((map: Microsoft.Maps.Map) => {\n            const p: Promise<Layer> = new Promise<Layer>(resolve => {\n                this.LoadModule('Microsoft.Maps.Clustering', () => {\n                    const o: Microsoft.Maps.IClusterLayerOptions = BingConversions.TranslateClusterOptions(options);\n                    const layer: Microsoft.Maps.ClusterLayer = new Microsoft.Maps.ClusterLayer(new Array<Microsoft.Maps.Pushpin>(), o);\n                    let bl: BingClusterLayer;\n                    map.layers.insert(layer);\n                    bl = new BingClusterLayer(layer, this);\n                    bl.SetOptions(options);\n                    resolve(bl);\n                });\n            });\n            return p;\n        });\n    }\n\n    /**\n     * Creates an information window for a map position\n     *\n     * @param [options] - Infowindow options. See {@link IInfoWindowOptions}\n     * @returns - Promise of a {@link InfoWindow} object, which models the underlying Microsoft.Maps.Infobox object.\n     *\n     * @memberof BingMapService\n     */\n    public CreateInfoWindow(options?: IInfoWindowOptions): Promise<InfoWindow> {\n        return this._map.then((map: Microsoft.Maps.Map) => {\n            let loc: Microsoft.Maps.Location;\n            if (options.position == null) {\n                loc = map.getCenter();\n            } else {\n                loc = new Microsoft.Maps.Location(options.position.latitude, options.position.longitude);\n            }\n            const infoBox: Microsoft.Maps.Infobox = new Microsoft.Maps.Infobox(loc, BingConversions.TranslateInfoBoxOptions(options));\n            infoBox.setMap(map);\n            return new BingInfoWindow(infoBox);\n        });\n    }\n\n    /**\n     * Creates a map layer within the map context\n     *\n     * @param options - Options for the layer. See {@link ILayerOptions}\n     * @returns - Promise of a {@link Layer} object, which models the underlying Microsoft.Maps.Layer object.\n     *\n     * @memberof BingMapService\n     */\n    public CreateLayer(options: ILayerOptions): Promise<Layer> {\n        return this._map.then((map: Microsoft.Maps.Map) => {\n            const layer: Microsoft.Maps.Layer = new Microsoft.Maps.Layer(options.id.toString());\n            map.layers.insert(layer);\n            return new BingLayer(layer, this);\n        });\n    }\n\n    /**\n     * Creates a map instance\n     *\n     * @param el - HTML element to host the map.\n     * @param mapOptions - Map options\n     * @returns - Promise fullfilled once the map has been created.\n     *\n     * @memberof BingMapService\n     */\n    public CreateMap(el: HTMLElement, mapOptions: IMapOptions): Promise<void> {\n        return this._loader.Load().then(() => {\n            // apply mixins\n            MixinMapLabelWithOverlayView();\n            MixinCanvasOverlay();\n\n            // map startup...\n            if (this._mapInstance != null) {\n                this.DisposeMap();\n            }\n            const o: Microsoft.Maps.IMapLoadOptions = BingConversions.TranslateLoadOptions(mapOptions);\n            if (!o.credentials) {\n                o.credentials = this._config.apiKey;\n            }\n            const map = new Microsoft.Maps.Map(el, o);\n            this._mapInstance = map;\n            this._mapResolver(map);\n        });\n    }\n\n    /**\n     * Creates a Bing map marker within the map context\n     *\n     * @param [options=<IMarkerOptions>{}] - Options for the marker. See {@link IMarkerOptions}.\n     * @returns - Promise of a {@link Marker} object, which models the underlying Microsoft.Maps.PushPin object.\n     *\n     * @memberof BingMapService\n     */\n    public CreateMarker(options: IMarkerOptions = <IMarkerOptions>{}): Promise<Marker> {\n        const payload = (icon: string, map: Microsoft.Maps.Map): BingMarker => {\n            const loc: Microsoft.Maps.Location = BingConversions.TranslateLocation(options.position);\n            const o: Microsoft.Maps.IPushpinOptions = BingConversions.TranslateMarkerOptions(options);\n            if (icon && icon !== '') { o.icon = icon; }\n            const pushpin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(loc, o);\n            const marker: BingMarker = new BingMarker(pushpin, map, null);\n            if (options.metadata) { options.metadata.forEach((v, k) => marker.Metadata.set(k, v)); }\n            map.entities.push(pushpin);\n            return marker;\n        };\n        return this._map.then((map: Microsoft.Maps.Map) => {\n            if (options.iconInfo && options.iconInfo.markerType) {\n                const s = Marker.CreateMarker(options.iconInfo);\n                if (typeof (s) === 'string') { return (payload(s, map)); }\n                else {\n                    return s.then(x => {\n                        return (payload(x.icon, map));\n                    });\n                }\n            }\n            else {\n                return (payload(null, map));\n            }\n        });\n    }\n\n    /**\n     * Creates a polygon within the Bing Maps V8 map context\n     *\n     * @abstract\n     * @param options - Options for the polygon. See {@link IPolygonOptions}.\n     * @returns - Promise of a {@link Polygon} object, which models the underlying native polygon.\n     *\n     * @memberof MapService\n     */\n    public CreatePolygon(options: IPolygonOptions): Promise<Polygon> {\n        return this._map.then((map: Microsoft.Maps.Map) => {\n            const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(options.paths);\n            const o: Microsoft.Maps.IPolygonOptions = BingConversions.TranslatePolygonOptions(options);\n            const poly: Microsoft.Maps.Polygon = new Microsoft.Maps.Polygon(locs, o);\n            map.entities.push(poly);\n\n            const p = new BingPolygon(poly, this, null);\n            if (options.metadata) { options.metadata.forEach((v, k) => p.Metadata.set(k, v)); }\n            if (options.title && options.title !== '') { p.Title = options.title; }\n            if (options.showLabel != null) { p.ShowLabel = options.showLabel; }\n            if (options.showTooltip != null) { p.ShowTooltip = options.showTooltip; }\n            if (options.labelMaxZoom != null) { p.LabelMaxZoom = options.labelMaxZoom; }\n            if (options.labelMinZoom != null) { p.LabelMinZoom = options.labelMinZoom; }\n            if (options.editable) { p.SetEditable(options.editable); }\n            return p;\n        });\n    }\n\n    /**\n     * Creates a polyline within the Bing Maps V8 map context\n     *\n     * @abstract\n     * @param options - Options for the polyline. See {@link IPolylineOptions}.\n     * @returns - Promise of a {@link Polyline} object (or an array thereof for complex paths),\n     * which models the underlying native polygon.\n     *\n     * @memberof MapService\n     */\n    public CreatePolyline(options: IPolylineOptions): Promise<Polyline | Array<Polyline>> {\n        let polyline: Microsoft.Maps.Polyline;\n        return this._map.then((map: Microsoft.Maps.Map) => {\n            const o: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolylineOptions(options);\n            const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(options.path);\n            if (options.path && options.path.length > 0 && !Array.isArray(options.path[0])) {\n                polyline = new Microsoft.Maps.Polyline(locs[0], o);\n                map.entities.push(polyline);\n\n                const pl = new BingPolyline(polyline, map, null);\n                if (options.metadata) { options.metadata.forEach((v, k) => pl.Metadata.set(k, v)); }\n                if (options.title && options.title !== '') { pl.Title = options.title; }\n                if (options.showTooltip != null) { pl.ShowTooltip = options.showTooltip; }\n                return pl;\n            }\n            else {\n                const lines: Array<Polyline> = new Array<Polyline>();\n                locs.forEach(p => {\n                    polyline = new Microsoft.Maps.Polyline(p, o);\n                    map.entities.push(polyline);\n\n                    const pl = new BingPolyline(polyline, map, null);\n                    if (options.metadata) { options.metadata.forEach((v, k) => pl.Metadata.set(k, v)); }\n                    if (options.title && options.title !== '') { pl.Title = options.title; }\n                    if (options.showTooltip != null) { pl.ShowTooltip = options.showTooltip; }\n                    lines.push(pl);\n                });\n                return lines;\n            }\n        });\n    }\n\n    /**\n     * Deletes a layer from the map.\n     *\n     * @param layer - Layer to delete. See {@link Layer}. This method expects the Bing specific Layer model implementation.\n     * @returns - Promise fullfilled when the layer has been removed.\n     *\n     * @memberof BingMapService\n     */\n    public DeleteLayer(layer: Layer): Promise<void> {\n        return this._map.then((map: Microsoft.Maps.Map) => {\n            map.layers.remove(layer.NativePrimitve);\n        });\n    }\n\n    /**\n     * Dispaose the map and associated resoures.\n     *\n     * @memberof BingMapService\n     */\n    public DisposeMap(): void {\n        if (this._map == null && this._mapInstance == null) {\n            return;\n        }\n        if (this._mapInstance != null) {\n            this._mapInstance.dispose();\n            this._mapInstance = null;\n            this._map = new Promise<Microsoft.Maps.Map>((resolve: () => void) => { this._mapResolver = resolve; });\n        }\n    }\n\n    /**\n     * Gets the geo coordinates of the map center\n     *\n     * @returns - A promise that when fullfilled contains the goe location of the center. See {@link ILatLong}.\n     *\n     * @memberof BingMapService\n     */\n    public GetCenter(): Promise<ILatLong> {\n        return this._map.then((map: Microsoft.Maps.Map) => {\n            const center = map.getCenter();\n            return <ILatLong>{\n                latitude: center.latitude,\n                longitude: center.longitude\n            };\n        });\n    }\n\n    /**\n     * Gets the geo coordinates of the map bounding box\n     *\n     * @returns - A promise that when fullfilled contains the goe location of the bounding box. See {@link IBox}.\n     *\n     * @memberof BingMapService\n     */\n    public GetBounds(): Promise<IBox> {\n        return this._map.then((map: Microsoft.Maps.Map) => {\n            const box = map.getBounds();\n            return <IBox>{\n                maxLatitude: box.getNorth(),\n                maxLongitude: box.crossesInternationalDateLine() ? box.getWest() : box.getEast(),\n                minLatitude: box.getSouth(),\n                minLongitude: box.crossesInternationalDateLine() ? box.getEast() : box.getWest(),\n                center: { latitude: box.center.latitude, longitude: box.center.longitude },\n                padding: 0\n            };\n        });\n    }\n\n    /**\n     * Gets a shared or private instance of the map drawing tools.\n     *\n     * @param [useSharedInstance=true] - Set to false to create a private instance.\n     * @returns - Promise that when resolved containst an instance of the drawing tools.\n     * @memberof BingMapService\n     */\n    public GetDrawingTools (useSharedInstance: boolean = true): Promise<Microsoft.Maps.DrawingTools> {\n        return new Promise<Microsoft.Maps.DrawingTools>((resolve, reject) => {\n            this.LoadModuleInstance('Microsoft.Maps.DrawingTools', useSharedInstance).then((o: Microsoft.Maps.DrawingTools) => {\n                resolve(o);\n            });\n        });\n    }\n\n    /**\n     * Gets the current zoom level of the map.\n     *\n     * @returns - A promise that when fullfilled contains the zoom level.\n     *\n     * @memberof BingMapService\n     */\n    public GetZoom(): Promise<number> {\n        return this._map.then((map: Microsoft.Maps.Map) => map.getZoom());\n    }\n\n    /**\n     * Loads a module into the Map.\n     *\n     * @param moduleName - The module to load.\n     * @param callback - Callback to call once loading is complete.\n     * @method\n     * @memberof BingMapService\n     */\n    public LoadModule(moduleName: string, callback: () => void) {\n        if (this._modules.has(moduleName)) {\n            callback();\n        }\n        else {\n            Microsoft.Maps.loadModule(moduleName, () => {\n                this._modules.set(moduleName, null);\n                callback();\n            });\n        }\n    }\n\n    /**\n     * Loads a module into the Map and delivers and instance of the module payload.\n     *\n     * @param moduleName - The module to load.\n     * @param useSharedInstance- Use a shared instance if true, create a new instance if false.\n     * @method\n     * @memberof BingMapService\n     */\n    public LoadModuleInstance(moduleName: string, useSharedInstance: boolean = true): Promise<Object> {\n        const s: string = moduleName.substr(moduleName.lastIndexOf('.') + 1);\n        if (this._modules.has(moduleName)) {\n            let o: any = null;\n            if (!useSharedInstance)  {\n                o = new (<any>Microsoft.Maps)[s](this._mapInstance);\n            }\n            else if (this._modules.get(moduleName) != null) {\n                o = this._modules.get(moduleName);\n            }\n            else {\n                o = new (<any>Microsoft.Maps)[s](this._mapInstance);\n                this._modules.set(moduleName, o);\n            }\n            return Promise.resolve(o);\n        }\n        else {\n            return new Promise<Object>((resolve, reject) => {\n                try {\n                Microsoft.Maps.loadModule(moduleName, () => {\n                    const o = new (<any>Microsoft.Maps)[s](this._mapInstance);\n                    if (useSharedInstance) {\n                        this._modules.set(moduleName, o);\n                    }\n                    else {\n                        this._modules.set(moduleName, null);\n                    }\n                    resolve(o);\n                });\n                } catch (e) {\n                    reject('Could not load module or create instance.');\n                }\n            });\n        }\n    }\n\n    /**\n     * Provides a conversion of geo coordinates to pixels on the map control.\n     *\n     * @param loc - The geo coordinates to translate.\n     * @returns - Promise of an {@link IPoint} interface representing the pixels. This promise resolves to null\n     * if the goe coordinates are not in the view port.\n     *\n     * @memberof BingMapService\n     */\n    public LocationToPoint(loc: ILatLong): Promise<IPoint> {\n        return this._map.then((m: Microsoft.Maps.Map) => {\n            const l: Microsoft.Maps.Location = BingConversions.TranslateLocation(loc);\n            const p: Microsoft.Maps.Point = <Microsoft.Maps.Point>m.tryLocationToPixel(l, Microsoft.Maps.PixelReference.control);\n            if (p != null) {\n                return { x: p.x, y: p.y };\n            }\n            return null;\n        });\n    }\n\n    /**\n     * Provides a conversion of geo coordinates to pixels on the map control.\n     *\n     * @param loc - The geo coordinates to translate.\n     * @returns - Promise of an {@link IPoint} interface array representing the pixels.\n     *\n     * @memberof BingMapService\n     */\n    public LocationsToPoints(locs: Array<ILatLong>): Promise<Array<IPoint>> {\n        return this._map.then((m: Microsoft.Maps.Map) => {\n            const l = locs.map(loc => BingConversions.TranslateLocation(loc));\n            const p: Array<Microsoft.Maps.Point> = <Array<Microsoft.Maps.Point>>m.tryLocationToPixel(l,\n                Microsoft.Maps.PixelReference.control);\n            return p ? p : new Array<IPoint>();\n        });\n    }\n\n    /**\n     * Centers the map on a geo location.\n     *\n     * @param latLng - GeoCoordinates around which to center the map. See {@link ILatLong}\n     * @returns - Promise that is fullfilled when the center operations has been completed.\n     *\n     * @memberof BingMapService\n     */\n    public SetCenter(latLng: ILatLong): Promise<void> {\n        return this._map.then((map: Microsoft.Maps.Map) => map.setView({\n            center: BingConversions.TranslateLocation(latLng)\n        }));\n    }\n\n    /**\n     * Sets the generic map options.\n     *\n     * @param options - Options to set.\n     *\n     * @memberof BingMapService\n     */\n    public SetMapOptions(options: IMapOptions) {\n        this._map.then((m: Microsoft.Maps.Map) => {\n            const o: Microsoft.Maps.IMapOptions = BingConversions.TranslateOptions(options);\n            m.setOptions(o);\n        });\n    }\n\n    /**\n     * Sets the view options of the map.\n     *\n     * @param options - Options to set.\n     *\n     * @memberof BingMapService\n     */\n    public SetViewOptions(options: IMapOptions) {\n        this._map.then((m: Microsoft.Maps.Map) => {\n            const o: Microsoft.Maps.IViewOptions = BingConversions.TranslateViewOptions(options);\n            m.setView(o);\n        });\n    }\n\n    /**\n     * Sets the zoom level of the map.\n     *\n     * @param zoom - Zoom level to set.\n     * @returns - A Promise that is fullfilled once the zoom operation is complete.\n     *\n     * @memberof BingMapService\n     */\n    public SetZoom(zoom: number): Promise<void> {\n        return this._map.then((map: Microsoft.Maps.Map) => map.setView({\n            zoom: zoom\n        }));\n    }\n\n    /**\n     * Creates an event subscription\n     *\n     * @param eventName - The name of the event (e.g. 'click')\n     * @returns - An observable of tpye E that fires when the event occurs.\n     *\n     * @memberof BingMapService\n     */\n    public SubscribeToMapEvent<E>(eventName: string): Observable<E> {\n        const eventNameTranslated = BingMapEventsLookup[eventName];\n        return Observable.create((observer: Observer<E>) => {\n            this._map.then((m: Microsoft.Maps.Map) => {\n                Microsoft.Maps.Events.addHandler(m, eventNameTranslated, (e: any) => {\n                    this._zone.run(() => observer.next(e));\n                });\n            });\n        });\n    }\n\n    /**\n     * Triggers the given event name on the map instance.\n     *\n     * @param eventName - Event to trigger.\n     * @returns - A promise that is fullfilled once the event is triggered.\n     *\n     * @memberof BingMapService\n     */\n    public TriggerMapEvent(eventName: string): Promise<void> {\n        return this._map.then((m) => Microsoft.Maps.Events.invoke(m, eventName, null));\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\nimport { Marker } from '../../models/marker';\nimport { BingMarker } from '../../models/bing/bing-marker';\nimport { Layer } from '../../models/layer';\nimport { MarkerTypeId } from '../../models/marker-type-id';\nimport { MapService } from '../map.service';\nimport { MapLayerDirective } from '../../components/map-layer';\nimport { LayerService } from '../layer.service';\nimport { BingMapService } from './bing-map.service';\nimport { BingConversions } from './bing-conversions';\n\n/**\n * This abstract partially implements the contract for the {@link LayerService}\n * and {@link ClusterService} for the Bing Maps V8 archtiecture. It serves\n * as the base class for basic layer ({@link BingLayerService}) and cluster layer ({@link BingClusterLayer}).\n *\n * @export\n * @abstract\n */\nexport abstract class BingLayerBase {\n\n    ///\n    /// Field declarations\n    ///\n\n    protected _layers: Map<number, Promise<Layer>> = new Map<number, Promise<Layer>>();\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of BingLayerBase.\n     * @param _mapService - Concrete {@link MapService} implementation for Bing Maps V8. An instance of {@link BingMapService}.\n     *\n     * @memberof BingLayerBase\n     */\n    constructor(protected _mapService: MapService, protected _zone: NgZone) { }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Adds a layer to the map.\n     *\n     * @abstract\n     * @param layer - MapLayerDirective component object.\n     * Generally, MapLayerDirective will be injected with an instance of the\n     * LayerService and then self register on initialization.\n     *\n     * @memberof BingLayerBase\n     */\n    public abstract AddLayer(layer: MapLayerDirective): void;\n\n    /**\n     * Creates a marker in the layer.\n     *\n     * @param layer - The Id of the layer in which to create the marker.\n     * @param options - {@link IMarkerOptions} object containing the marker properties.\n     * @returns - A promise that when fullfilled contains the {@link Marker} model for the created marker.\n     *\n     * @memberof BingLayerBase\n     */\n    public CreateMarker(layer: number, options: IMarkerOptions): Promise<Marker> {\n        const payload = (icon: string, l: Layer): BingMarker => {\n            const loc: Microsoft.Maps.Location = BingConversions.TranslateLocation(options.position);\n            const o: Microsoft.Maps.IPushpinOptions = BingConversions.TranslateMarkerOptions(options);\n            if (icon && icon !== '') { o.icon = icon; }\n            const pushpin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(loc, o);\n            const marker: BingMarker = new BingMarker(pushpin, null, l.NativePrimitve);\n            marker.IsFirst = options.isFirst;\n            marker.IsLast = options.isLast;\n            if (options.metadata) { options.metadata.forEach((v, k) => marker.Metadata.set(k, v)); }\n            l.AddEntity(marker);\n            return marker;\n        };\n        const p: Promise<Layer> = this.GetLayerById(layer);\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\n        return p.then((l: Layer) => {\n            if (options.iconInfo && options.iconInfo.markerType) {\n                const s = Marker.CreateMarker(options.iconInfo);\n                if (typeof(s) === 'string') { return(payload(s, l)); }\n                else {\n                    return s.then(x => {\n                        return(payload(x.icon, l));\n                    });\n                }\n            }\n            else {\n                return (payload(null, l));\n            }\n        });\n    }\n\n    /**\n     * Creates an array of unbound markers. Use this method to create arrays of markers to be used in bulk\n     * operations.\n     *\n     * @param options - Marker options defining the markers.\n     * @param markerIcon - Optional information to generate custom markers. This will be applied to all markers.\n     * @returns - A promise that when fullfilled contains the an arrays of the Marker models.\n     *\n     * @memberof BingLayerBase\n     */\n    public CreateMarkers(options: Array<IMarkerOptions>, markerIcon?: IMarkerIconInfo): Promise<Array<Marker>> {\n        const payload = (icon: string, op: Array<IMarkerOptions>): Array<BingMarker> => {\n            const markers: Array<BingMarker> = op.map(mo => {\n                let s: string;\n                const o: Microsoft.Maps.IPushpinOptions = BingConversions.TranslateMarkerOptions(mo);\n                if (icon && icon !== '' ) { s = icon; }\n                else if (o.icon) {\n                    s = o.icon;\n                }\n                if (o.icon) { delete o.icon; }\n                const loc: Microsoft.Maps.Location = BingConversions.TranslateLocation(mo.position);\n                const pushpin: Microsoft.Maps.Pushpin = new Microsoft.Maps.Pushpin(loc, o);\n                const img = Marker.GetImageForMarker(s);\n                if (img != null) { (<any>pushpin).image = img; }\n\n                const marker: BingMarker = new BingMarker(pushpin, null, null);\n                marker.IsFirst = mo.isFirst;\n                marker.IsLast = mo.isLast;\n                if (mo.metadata) { mo.metadata.forEach((v, k) => marker.Metadata.set(k, v)); }\n                return marker;\n            });\n            return markers;\n        };\n        const p: Promise<Array<Marker>> = new Promise<Array<Marker>>((resolve, reject) => {\n            if (markerIcon && markerIcon.markerType) {\n                const s = Marker.CreateMarker(markerIcon);\n                if (typeof(s) === 'string') { resolve(payload(s, options)); }\n                else {\n                    return s.then(x => {\n                        resolve(payload(x.icon, options));\n                    });\n                }\n            }\n            else {\n                resolve(payload(null, options));\n            }\n        });\n        return p;\n    }\n\n    /**\n     * Deletes the layer\n     *\n     * @param layer - MapLayerDirective component object for which to retrieve the layer.\n     * @returns - A promise that is fullfilled when the layer has been removed.\n     *\n     * @memberof BingLayerBase\n     */\n    public DeleteLayer(layer: MapLayerDirective): Promise<void> {\n        const l = this._layers.get(layer.Id);\n        if (l == null) {\n            return Promise.resolve();\n        }\n        return l.then((l1: Layer) => {\n            return this._zone.run(() => {\n                l1.Delete();\n                this._layers.delete(layer.Id);\n            });\n        });\n    }\n\n    /**\n     * Returns the Layer model represented by this layer.\n     *\n     * @param layer - MapLayerDirective component object or Layer Id for which to retrieve the layer model.\n     * @returns - A promise that when resolved contains the Layer model.\n     *\n     * @memberof BingLayerBase\n     */\n    public GetNativeLayer(layer: MapLayerDirective|number): Promise<Layer> {\n        let p: Promise<Layer> = null;\n        if (typeof(layer) === 'number') {\n            p = this._layers.get(layer);\n        }\n        else {\n            p = this._layers.get((<MapLayerDirective>layer).Id);\n        }\n        return p;\n    }\n\n    ///\n    /// Protected methods\n    ///\n\n    /**\n     * Gets the layer based on its id.\n     *\n     * @protected\n     * @param id - Layer Id.\n     * @returns - A promise that when fullfilled contains the {@link Layer} model for the layer.\n     *\n     * @memberof BingLayerBase\n     */\n    protected GetLayerById(id: number): Promise<Layer> {\n        let p: Promise<Layer>;\n        this._layers.forEach((l: Promise<Layer>, k: number) => { if (k === id) { p = l; } });\n        return p;\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\nimport { Marker } from '../../models/marker';\nimport { Polygon } from '../../models/polygon';\nimport { Polyline } from '../../models/polyline';\nimport { BingMarker } from '../../models/bing/bing-marker';\nimport { BingPolygon } from '../../models/bing/bing-polygon';\nimport { BingPolyline } from '../../models/bing/bing-polyline';\nimport { Layer } from '../../models/layer';\nimport { MarkerTypeId } from '../../models/marker-type-id';\nimport { MapService } from '../map.service';\nimport { MapLayerDirective } from '../../components/map-layer';\nimport { LayerService } from '../layer.service';\nimport { BingMapService } from './bing-map.service';\nimport { BingLayerBase } from './bing-layer-base';\nimport { BingConversions } from './bing-conversions';\n\n/**\n * Implements the {@link LayerService} contract for a  Bing Maps V8 specific implementation.\n *\n * @export\n */\n@Injectable()\nexport class BingLayerService extends BingLayerBase implements LayerService {\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of BingLayerService.\n     * @param _mapService - Instance of the Bing Maps Service. Will generally be injected.\n     * @param _zone - NgZone instance to provide zone aware promises.\n     *\n     * @memberof BingLayerService\n     */\n    constructor(_mapService: MapService, _zone: NgZone) {\n        super(_mapService, _zone);\n    }\n\n    /**\n     * Adds a layer to the map.\n     *\n     * @abstract\n     * @param layer - MapLayerDirective component object.\n     * Generally, MapLayerDirective will be injected with an instance of the\n     * LayerService and then self register on initialization.\n     *\n     * @memberof BingLayerService\n     */\n    public AddLayer(layer: MapLayerDirective): void {\n        const layerPromise = this._mapService.CreateLayer({ id: layer.Id });\n        this._layers.set(layer.Id, layerPromise);\n        layerPromise.then(l => l.SetVisible(layer.Visible));\n    }\n\n\n    /**\n     * Adds a polygon to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the polygon.\n     * @param options - Polygon options defining the polygon.\n     * @returns - A promise that when fullfilled contains the an instance of the Polygon model.\n     *\n     * @memberof BingLayerService\n     */\n    public CreatePolygon(layer: number, options: IPolygonOptions): Promise<Polygon> {\n        const p: Promise<Layer> = this.GetLayerById(layer);\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\n        return p.then((l: Layer) => {\n            const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(options.paths);\n            const o: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolygonOptions(options);\n            const poly: Microsoft.Maps.Polygon = new Microsoft.Maps.Polygon(locs, o);\n            const polygon: Polygon = new BingPolygon(poly, <BingMapService>this._mapService, l.NativePrimitve);\n\n            if (options.metadata) { options.metadata.forEach((v, k) => polygon.Metadata.set(k, v)); }\n            if (options.title && options.title !== '') {polygon.Title = options.title; }\n            if (options.showLabel != null) { polygon.ShowLabel = options.showLabel; }\n            if (options.showTooltip != null) { polygon.ShowTooltip = options.showTooltip; }\n            if (options.labelMaxZoom != null) { polygon.LabelMaxZoom = options.labelMaxZoom; }\n            if (options.labelMinZoom != null) { polygon.LabelMinZoom = options.labelMinZoom; }\n            l.AddEntity(polygon);\n            return polygon;\n        });\n    }\n\n    /**\n     * Creates an array of unbound polygons. Use this method to create arrays of polygons to be used in bulk\n     * operations.\n     *\n     * @param layer - The id of the layer to which to add the polygon.\n     * @param options - Polygon options defining the polygons.\n     * @returns - A promise that when fullfilled contains the an arrays of the Polygon models.\n     *\n     * @memberof BingLayerService\n     */\n    public CreatePolygons(layer: number, options: Array<IPolygonOptions>): Promise<Array<Polygon>> {\n        const p: Promise<Layer> = this.GetLayerById(layer);\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\n        return p.then((l: Layer) => {\n            const polygons: Promise<Array<Polygon>> = new Promise<Array<Polygon>>((resolve, reject) => {\n                const polys: Array<BingPolygon> = options.map(o => {\n                    const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(o.paths);\n                    const op: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolygonOptions(o);\n                    const poly: Microsoft.Maps.Polygon = new Microsoft.Maps.Polygon(locs, op);\n                    const polygon: BingPolygon = new BingPolygon(poly, <BingMapService>this._mapService, l.NativePrimitve);\n                    if (o.title && o.title !== '') { polygon.Title = o.title; }\n                    if (o.metadata) { o.metadata.forEach((v, k) => polygon.Metadata.set(k, v)); }\n                    return polygon;\n                });\n                resolve(polys);\n            });\n            return polygons;\n        });\n    }\n\n    /**\n     * Adds a polyline to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the line.\n     * @param options - Polyline options defining the line.\n     * @returns - A promise that when fullfilled contains the an instance of the Polyline (or an array\n     * of polygons for complex paths) model.\n     *\n     * @memberof BingLayerService\n     */\n    public CreatePolyline(layer: number, options: IPolylineOptions): Promise<Polyline|Array<Polyline>> {\n        const p: Promise<Layer> = this.GetLayerById(layer);\n        let polyline: Microsoft.Maps.Polyline;\n        let line: Polyline;\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\n        return p.then((l: Layer) => {\n            const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(options.path);\n            const o: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolylineOptions(options);\n            if (options.path && options.path.length > 0 && !Array.isArray(options.path[0])) {\n                polyline = new Microsoft.Maps.Polyline(locs[0], o);\n                line = new BingPolyline(polyline, this._mapService.MapInstance, l.NativePrimitve);\n                l.AddEntity(line);\n\n                if (options.metadata) { options.metadata.forEach((v, k) => line.Metadata.set(k, v)); }\n                if (options.title && options.title !== '') {line.Title = options.title; }\n                if (options.showTooltip != null) { line.ShowTooltip = options.showTooltip; }\n                return line;\n            }\n            else {\n                const lines: Array<Polyline> = new Array<Polyline>();\n                locs.forEach(x => {\n                    polyline = new Microsoft.Maps.Polyline(x, o);\n                    line = new BingPolyline(polyline, this._mapService.MapInstance, l.NativePrimitve);\n                    l.AddEntity(line);\n\n                    if (options.metadata) { options.metadata.forEach((v, k) => line.Metadata.set(k, v)); }\n                    if (options.title && options.title !== '') {line.Title = options.title; }\n                    if (options.showTooltip != null) { line.ShowTooltip = options.showTooltip; }\n                    lines.push(line);\n                });\n                return lines;\n            }\n        });\n    }\n\n    /**\n     * Creates an array of unbound polylines. Use this method to create arrays of polylines to be used in bulk\n     * operations.\n     *\n     * @param layer - The id of the layer to which to add the polylines.\n     * @param options - Polyline options defining the polylines.\n     * @returns - A promise that when fullfilled contains the an arrays of the Polyline models.\n     *\n     * @memberof BingLayerService\n     */\n    public CreatePolylines(layer: number, options: Array<IPolylineOptions>): Promise<Array<Polyline|Array<Polyline>>> {\n        const p: Promise<Layer> = this.GetLayerById(layer);\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\n        return p.then((l: Layer) => {\n            const polylines: Promise<Array<Polyline|Array<Polyline>>> = new Promise<Array<Polyline|Array<Polyline>>>((resolve, reject) => {\n                const polys: Array<Polyline|Array<Polyline>> = options.map(o => {\n                    const locs: Array<Array<Microsoft.Maps.Location>> = BingConversions.TranslatePaths(o.path);\n                    const op: Microsoft.Maps.IPolylineOptions = BingConversions.TranslatePolylineOptions(o);\n                    if (locs && locs.length > 0 && !Array.isArray(locs[0])) {\n                        const poly: Microsoft.Maps.Polyline = new Microsoft.Maps.Polyline(locs[0], op);\n                        const polyline: BingPolyline = new BingPolyline(poly, this._mapService.MapInstance, l.NativePrimitve);\n                        if (o.title && o.title !== '') { polyline.Title = o.title; }\n                        if (o.metadata) { o.metadata.forEach((v, k) => polyline.Metadata.set(k, v)); }\n                        return polyline;\n                    }\n                    else {\n                        const lines: Array<Polyline> = new Array<Polyline>();\n                        locs.forEach(x => {\n                            const poly = new Microsoft.Maps.Polyline(x, op);\n                            const polyline: BingPolyline = new BingPolyline(poly, this._mapService.MapInstance, l.NativePrimitve);\n                            if (o.metadata) { o.metadata.forEach((v, k) => polyline.Metadata.set(k, v)); }\n                            if (o.title && o.title !== '') {polyline.Title = o.title; }\n                            lines.push(polyline);\n                        });\n                        return lines;\n                    }\n                });\n                resolve(polys);\n            });\n            return polylines;\n        });\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { IClusterOptions } from '../../interfaces/icluster-options';\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\nimport { Marker } from '../../models/marker';\nimport { Polygon } from '../../models/polygon';\nimport { Polyline } from '../../models/polyline';\nimport { BingMarker } from '../../models/bing/bing-marker';\nimport { BingClusterLayer } from '../../models/bing/bing-cluster-layer';\nimport { Layer } from '../../models/layer';\nimport { MarkerTypeId } from '../../models/marker-type-id';\nimport { ClusterClickAction } from '../../models/cluster-click-action';\nimport { MapService } from '../map.service';\nimport { ClusterLayerDirective } from '../../components/cluster-layer';\nimport { ClusterService } from '../cluster.service';\nimport { BingLayerBase } from './bing-layer-base';\nimport { BingMapService } from './bing-map.service';\nimport { BingConversions } from './bing-conversions';\n\n/**\n * Implements the {@link ClusterService} contract for a  Bing Maps V8 specific implementation.\n *\n * @export\n */\n@Injectable()\nexport class BingClusterService extends BingLayerBase implements ClusterService {\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of BingClusterService.\n     * @param _mapService - Concrete {@link MapService} implementation for Bing Maps V8. An instance of {@link BingMapService}.\n     * @param _zone - NgZone instance to provide zone aware promises.\n     *\n     * @memberof BingClusterService\n     */\n    constructor(_mapService: MapService, _zone: NgZone) {\n        super(_mapService, _zone);\n    }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Adds a layer to the map.\n     *\n     * @abstract\n     * @param layer - ClusterLayerDirective component object.\n     * Generally, MapLayer will be injected with an instance of the\n     * LayerService and then self register on initialization.\n     *\n     * @memberof BingClusterService\n     */\n    public AddLayer(layer: ClusterLayerDirective): void {\n        const options: IClusterOptions = {\n            id: layer.Id,\n            visible: layer.Visible,\n            clusteringEnabled: layer.ClusteringEnabled,\n            placementMode: layer.ClusterPlacementMode\n        };\n        if (layer.GridSize) { options.gridSize = layer.GridSize; }\n        if (layer.LayerOffset) { options.layerOffset = layer.LayerOffset; }\n        if (layer.ZIndex) { options.zIndex = layer.ZIndex; }\n        if (layer.IconInfo) {\n            options.clusteredPinCallback = (pin: Microsoft.Maps.ClusterPushpin) => { this.CreateClusterPushPin(pin, layer); };\n        }\n        if (layer.CustomMarkerCallback) {\n            options.clusteredPinCallback = (pin: Microsoft.Maps.ClusterPushpin) => { this.CreateCustomClusterPushPin(pin, layer); };\n        }\n        if (layer.SpiderClusterOptions) { options.spiderClusterOptions = layer.SpiderClusterOptions; }\n\n        const layerPromise: Promise<Layer> = this._mapService.CreateClusterLayer(options);\n        (<BingMapService>this._mapService).MapPromise.then(m => {\n            Microsoft.Maps.Events.addHandler(m, 'viewchangeend', (e) => {\n                if (layer.ClusteringEnabled && m.getZoom() === 19) {\n                    layerPromise.then((l: BingClusterLayer) => {\n                        l.SetOptions({ id: layer.Id, clusteringEnabled: false });\n                    });\n                }\n                if (layer.ClusteringEnabled && m.getZoom() < 19) {\n                    layerPromise.then((l: BingClusterLayer) => {\n                        if (!l.GetOptions().clusteringEnabled) {\n                            l.SetOptions({ id: layer.Id, clusteringEnabled: true });\n                        }\n                    });\n                }\n            });\n        });\n        this._layers.set(layer.Id, layerPromise);\n    }\n\n    /**\n     * Adds a polygon to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the polygon.\n     * @param options - Polygon options defining the polygon.\n     * @returns - A promise that when fullfilled contains the an instance of the Polygon model.\n     *\n     * @memberof BingClusterService\n     */\n    public CreatePolygon(layer: number, options: IPolygonOptions): Promise<Polygon> {\n        throw (new Error('Polygons are not supported in clustering layers. You can only use markers.'));\n    }\n\n    /**\n     * Creates an array of unbound polygons. Use this method to create arrays of polygons to be used in bulk\n     * operations.\n     *\n     * @param layer - The id of the layer to which to add the polygon.\n     * @param options - Polygon options defining the polygons.\n     * @returns - A promise that when fullfilled contains the an arrays of the Polygon models.\n     *\n     * @memberof BingClusterService\n     */\n    public CreatePolygons(layer: number, options: Array<IPolygonOptions>): Promise<Array<Polygon>> {\n        throw (new Error('Polygons are not supported in clustering layers. You can only use markers.'));\n    }\n\n    /**\n     * Adds a polyline to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the line.\n     * @param options - Polyline options defining the line.\n     * @returns - A promise that when fullfilled contains the an instance of the Polyline (or an array\n     * of polygons for complex paths) model.\n     *\n     * @memberof BingClusterService\n     */\n    public CreatePolyline(layer: number, options: IPolylineOptions): Promise<Polyline|Array<Polyline>> {\n        throw (new Error('Polylines are not supported in clustering layers. You can only use markers.'));\n    }\n\n    /**\n     * Creates an array of unbound polylines. Use this method to create arrays of polylines to be used in bulk\n     * operations.\n     *\n     * @param layer - The id of the layer to which to add the polylines.\n     * @param options - Polyline options defining the polylines.\n     * @returns - A promise that when fullfilled contains the an arrays of the Polyline models.\n     *\n     * @memberof BingClusterService\n     */\n    public CreatePolylines(layer: number, options: Array<IPolylineOptions>): Promise<Array<Polyline|Array<Polyline>>> {\n        throw (new Error('Polylines are not supported in clustering layers. You can only use markers.'));\n    }\n\n    /**\n     * Start to actually cluster the entities in a cluster layer. This method should be called after the initial set of entities\n     * have been added to the cluster. This method is used for performance reasons as adding an entitiy will recalculate all clusters.\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\n     * complete to recalculate the clusters.\n     *\n     * @param layer - ClusterLayerDirective component object for which to retrieve the layer.\n     *\n     * @memberof BingClusterService\n     */\n    public StartClustering(layer: ClusterLayerDirective): Promise<void> {\n        const l = this._layers.get(layer.Id);\n        if (l == null) {\n            return Promise.resolve();\n        }\n        return l.then((l1: BingClusterLayer) => {\n            return this._zone.run(() => {\n                l1.StartClustering();\n            });\n        });\n    }\n\n    /**\n     * Stop to actually cluster the entities in a cluster layer.\n     * This method is used for performance reasons as adding an entitiy will recalculate all clusters.\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\n     * complete to recalculate the clusters.\n     *\n     * @param layer - ClusterLayerDirective component object for which to retrieve the layer.\n     *\n     * @memberof BingClusterService\n     */\n    public StopClustering(layer: ClusterLayerDirective): Promise<void> {\n        const l = this._layers.get(layer.Id);\n        if (l == null) {\n            return Promise.resolve();\n        }\n        return l.then((l1: BingClusterLayer) => {\n            return this._zone.run(() => {\n                l1.StopClustering();\n            });\n        });\n    }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Creates the default cluster pushpin as a callback from BingMaps when clustering occurs. The {@link ClusterLayerDirective} model\n     * can provide an IconInfo property that would govern the apparenace of the pin. This method will assign the same pin to all\n     * clusters in the layer.\n     *\n     * @param cluster - The cluster for which to create the pushpin.\n     * @param layer - The {@link ClusterLayerDirective} component representing the layer.\n     *\n     * @memberof BingClusterService\n     */\n    private CreateClusterPushPin(cluster: Microsoft.Maps.ClusterPushpin, layer: ClusterLayerDirective): void {\n        this._layers.get(layer.Id).then((l: BingClusterLayer) => {\n            if (layer.IconInfo) {\n                const o: Microsoft.Maps.IPushpinOptions = {};\n                const payload: (ico: string, info: IMarkerIconInfo) => void = (ico, info) => {\n                        o.icon = ico;\n                        o.anchor = new Microsoft.Maps.Point(\n                            (info.size && info.markerOffsetRatio) ? (info.size.width * info.markerOffsetRatio.x) : 0,\n                            (info.size && info.markerOffsetRatio) ? (info.size.height * info.markerOffsetRatio.y) : 0\n                        );\n                        cluster.setOptions(o);\n                };\n                const icon: string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> = Marker.CreateMarker(layer.IconInfo);\n                if (typeof(icon) === 'string') {\n                    payload(icon, layer.IconInfo);\n                }\n                else {\n                    icon.then(x => {\n                        payload(x.icon, x.iconInfo);\n                    });\n                }\n            }\n            if (layer.ClusterClickAction === ClusterClickAction.ZoomIntoCluster) {\n                Microsoft.Maps.Events.addHandler(cluster, 'click', (e: Microsoft.Maps.IMouseEventArgs) => this.ZoomIntoCluster(e));\n            }\n            if (layer.ClusterClickAction === ClusterClickAction.Spider) {\n                Microsoft.Maps.Events.addHandler(cluster, 'dblclick', (e: Microsoft.Maps.IMouseEventArgs) => this.ZoomIntoCluster(e));\n                l.InitializeSpiderClusterSupport();\n            }\n        });\n    }\n\n    /**\n     * Provides a hook for consumers to provide a custom function to create cluster bins for a cluster. This is particuarily useful\n     * in situation where the pin should differ to represent information about the pins in the cluster.\n     *\n     * @param cluster - The cluster for which to create the pushpin.\n     * @param layer - The {@link ClusterLayerDirective} component\n     * representing the layer. Set the {@link ClusterLayerDirective.CustomMarkerCallback}\n     * property to define the callback generating the pin.\n     *\n     * @memberof BingClusterService\n     */\n    private CreateCustomClusterPushPin(cluster: Microsoft.Maps.ClusterPushpin, layer: ClusterLayerDirective): void {\n        this._layers.get(layer.Id).then((l: BingClusterLayer) => {\n            // assemble markers for callback\n            const m: Array<Marker> = new Array<Marker>();\n            cluster.containedPushpins.forEach(p => {\n                const marker: Marker = l.GetMarkerFromBingMarker(p);\n                if (marker) { m.push(marker); }\n            });\n            const iconInfo: IMarkerIconInfo = { markerType: MarkerTypeId.None };\n            const o: Microsoft.Maps.IPushpinOptions = {};\n            o.icon = layer.CustomMarkerCallback(m, iconInfo);\n            if (o.icon !== '') {\n                o.anchor = new Microsoft.Maps.Point(\n                    (iconInfo.size && iconInfo.markerOffsetRatio) ? (iconInfo.size.width * iconInfo.markerOffsetRatio.x) : 0,\n                    (iconInfo.size && iconInfo.markerOffsetRatio) ? (iconInfo.size.height * iconInfo.markerOffsetRatio.y) : 0\n                );\n                if (iconInfo.textOffset) { o.textOffset = new Microsoft.Maps.Point(iconInfo.textOffset.x, iconInfo.textOffset.y); }\n                cluster.setOptions(o);\n            }\n            if (layer.ClusterClickAction === ClusterClickAction.ZoomIntoCluster) {\n                Microsoft.Maps.Events.addHandler(cluster, 'click', (e: Microsoft.Maps.IMouseEventArgs) => this.ZoomIntoCluster(e));\n            }\n            if (layer.ClusterClickAction === ClusterClickAction.Spider) {\n                Microsoft.Maps.Events.addHandler(cluster, 'dblclick', (e: Microsoft.Maps.IMouseEventArgs) => this.ZoomIntoCluster(e));\n                l.InitializeSpiderClusterSupport();\n            }\n        });\n    }\n\n    /**\n     * Zooms into the cluster on click so that the members of the cluster comfortable fit into the zommed area.\n     *\n     * @param e - Mouse Event.\n     *\n     * @memberof BingClusterService\n     */\n    private ZoomIntoCluster(e: Microsoft.Maps.IMouseEventArgs): void {\n        const pin: Microsoft.Maps.ClusterPushpin = <Microsoft.Maps.ClusterPushpin>e.target;\n        if (pin && pin.containedPushpins) {\n            let bounds: Microsoft.Maps.LocationRect;\n            const locs: Array<Microsoft.Maps.Location> = new Array<Microsoft.Maps.Location>();\n            pin.containedPushpins.forEach(p => locs.push(p.getLocation()));\n            bounds = Microsoft.Maps.LocationRect.fromLocations(locs);\n\n            // Zoom into the bounding box of the cluster.\n            // Add a padding to compensate for the pixel area of the pushpins.\n            (<BingMapService>this._mapService).MapPromise.then((m: Microsoft.Maps.Map) => {\n                m.setView({ bounds: bounds, padding: 75 });\n            });\n        }\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer, Subject } from 'rxjs';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { Polygon } from '../../models/polygon';\nimport { MapPolygonDirective } from '../../components/map-polygon';\nimport { PolygonService } from '../polygon.service';\nimport { MapService } from '../map.service';\nimport { LayerService } from '../layer.service';\n\n/**\n * Concrete implementation of the Polygon Service abstract class for Bing Maps V8.\n *\n * @export\n */\n@Injectable()\nexport class BingPolygonService implements PolygonService {\n\n    ///\n    /// Field declarations\n    ///\n    private _polygons: Map<MapPolygonDirective, Promise<Polygon>> = new Map<MapPolygonDirective, Promise<Polygon>>();\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of BingPolygonService.\n     * @param _mapService - {@link MapService} instance. The concrete {@link BingMapService} implementation is expected.\n     * @param _layerService - {@link BingLayerService} instance.\n     * The concrete {@link BingLayerService} implementation is expected.\n     * @param _zone - NgZone instance to support zone aware promises.\n     *\n     * @memberof BingPolygonService\n     */\n    constructor(private _mapService: MapService,\n        private _layerService: LayerService,\n        private _zone: NgZone) {\n    }\n\n    /**\n     * Adds a polygon to a map. Depending on the polygon context, the polygon will either by added to the map or a\n     * correcsponding layer.\n     *\n     * @param polygon - The {@link MapPolygonDirective} to be added.\n     *\n     * @memberof BingPolygonService\n     */\n    public AddPolygon(polygon: MapPolygonDirective): void {\n        const o: IPolygonOptions = {\n            id: polygon.Id,\n            clickable: polygon.Clickable,\n            draggable: polygon.Draggable,\n            editable: polygon.Editable,\n            fillColor: polygon.FillColor,\n            fillOpacity: polygon.FillOpacity,\n            geodesic: polygon.Geodesic,\n            labelMaxZoom: polygon.LabelMaxZoom,\n            labelMinZoom: polygon.LabelMinZoom,\n            paths: polygon.Paths,\n            showLabel: polygon.ShowLabel,\n            showTooltip: polygon.ShowTooltip,\n            strokeColor: polygon.StrokeColor,\n            strokeOpacity: polygon.StrokeOpacity,\n            strokeWeight: polygon.StrokeWeight,\n            title: polygon.Title,\n            visible: polygon.Visible,\n            zIndex: polygon.zIndex,\n        };\n        let polygonPromise: Promise<Polygon>;\n        if (polygon.InCustomLayer) {\n            polygonPromise = this._layerService.CreatePolygon(polygon.LayerId, o);\n        }\n        else {\n            polygonPromise = this._mapService.CreatePolygon(o);\n        }\n        this._polygons.set(polygon, polygonPromise);\n    }\n\n    /**\n      * Registers an event delegate for a polygon.\n      *\n      * @param eventName - The name of the event to register (e.g. 'click')\n      * @param polygon - The {@link MapPolygonDirective} for which to register the event.\n      * @returns - Observable emiting an instance of T each time the event occurs.\n      *\n      * @memberof BingPolygonService\n      */\n    public CreateEventObservable<T>(eventName: string, polygon: MapPolygonDirective): Observable<T> {\n        const b: Subject<T> = new Subject<T>();\n        if (eventName === 'mousemove') {\n            return b.asObservable();\n        }\n        if (eventName === 'rightclick') {\n            return b.asObservable();\n        }\n        ///\n        /// mousemove and rightclick are not supported by bing polygons.\n        ///\n\n        return Observable.create((observer: Observer<T>) => {\n            this._polygons.get(polygon).then((p: Polygon) => {\n                p.AddListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n\n    /**\n      * Deletes a polygon.\n      *\n      * @param polygon - {@link MapPolygonDirective} to be deleted.\n      * @returns - A promise fullfilled once the polygon has been deleted.\n      *\n      * @memberof BingPolygonService\n      */\n    public DeletePolygon(polygon: MapPolygonDirective): Promise<void> {\n        const m = this._polygons.get(polygon);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l: Polygon) => {\n            return this._zone.run(() => {\n                l.Delete();\n                this._polygons.delete(polygon);\n            });\n        });\n\n    }\n\n    /**\n     * Obtains geo coordinates for the polygon on the click location\n     *\n     * @abstract\n     * @param e - The mouse event. Expected to implement {@link Microsoft.Maps.IMouseEventArgs}.\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\n     *\n     * @memberof BingPolygonService\n     */\n    public GetCoordinatesFromClick(e: MouseEvent | any): ILatLong {\n        const x: Microsoft.Maps.IMouseEventArgs = <Microsoft.Maps.IMouseEventArgs>e;\n        return { latitude: x.location.latitude, longitude: x.location.longitude };\n    }\n\n    /**\n     * Obtains the polygon model for the polygon allowing access to native implementation functionatiliy.\n     *\n     * @param polygon - The {@link MapPolygonDirective} for which to obtain the polygon model.\n     * @returns - A promise that when fullfilled contains the {@link Polygon} implementation of the underlying platform.\n     *\n     * @memberof BingPolygonService\n     */\n    public GetNativePolygon(polygon: MapPolygonDirective): Promise<Polygon> {\n        return this._polygons.get(polygon);\n    }\n\n    /**\n     * Set the polygon options.\n     *\n     * @param polygon - {@link MapPolygonDirective} to be updated.\n     * @param options - {@link IPolygonOptions} object containing the options. Options will be merged with the\n     * options already on the underlying object.\n     * @returns - A promise fullfilled once the polygon options have been set.\n     *\n     * @memberof BingPolygonService\n     */\n    public SetOptions(polygon: MapPolygonDirective, options: IPolygonOptions): Promise<void> {\n        return this._polygons.get(polygon).then((l: Polygon) => { l.SetOptions(options); });\n    }\n\n    /**\n     * Updates the Polygon path\n     *\n     * @param polygon - {@link MapPolygonDirective} to be updated.\n     * @returns - A promise fullfilled once the polygon has been updated.\n     *\n     * @memberof BingPolygonService\n     */\n    public UpdatePolygon(polygon: MapPolygonDirective): Promise<void> {\n        const m = this._polygons.get(polygon);\n        if (m == null || polygon.Paths == null || !Array.isArray(polygon.Paths) || polygon.Paths.length === 0) {\n            return Promise.resolve();\n        }\n        return m.then((l: Polygon) =>  {\n            if (Array.isArray(polygon.Paths[0])) {\n                l.SetPaths(polygon.Paths);\n            }\n            else {\n                l.SetPath(<Array<ILatLong>>polygon.Paths);\n            }\n        });\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer, Subject } from 'rxjs';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { Polyline } from '../../models/polyline';\nimport { MapPolylineDirective } from '../../components/map-polyline';\nimport { PolylineService } from '../polyline.service';\nimport { MapService } from '../map.service';\nimport { LayerService } from '../layer.service';\n\n/**\n * Concrete implementation of the Polyline Service abstract class for Bing Maps V8.\n *\n * @export\n */\n@Injectable()\nexport class BingPolylineService implements PolylineService {\n\n    ///\n    /// Field declarations\n    ///\n    private _polylines: Map<MapPolylineDirective, Promise<Polyline|Array<Polyline>>> =\n    new Map<MapPolylineDirective, Promise<Polyline|Array<Polyline>>>();\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of BingPolylineService.\n     * @param _mapService - {@link MapService} instance. The concrete {@link BingMapService} implementation is expected.\n     * @param _layerService - {@link LayerService} instance.\n     * The concrete {@link BingLayerService} implementation is expected.\n     * @param _zone - NgZone instance to support zone aware promises.\n     *\n     * @memberof BingPolylineService\n     */\n    constructor(private _mapService: MapService,\n        private _layerService: LayerService,\n        private _zone: NgZone) {\n    }\n\n    ///\n    /// Public members and MarkerService implementation\n    ///\n\n    /**\n     * Adds a polyline to a map. Depending on the polyline context, the polyline will either by added to the map or a\n     * corresponding layer.\n     *\n     * @param polyline - The {@link MapPolylineDirective} to be added.\n     *\n     * @memberof BingPolylineService\n     */\n    public AddPolyline(polyline: MapPolylineDirective): void {\n        const o: IPolylineOptions = {\n            id: polyline.Id,\n            clickable: polyline.Clickable,\n            draggable: polyline.Draggable,\n            editable: polyline.Editable,\n            geodesic: polyline.Geodesic,\n            path: polyline.Path,\n            showTooltip: polyline.ShowTooltip,\n            strokeColor: polyline.StrokeColor,\n            strokeOpacity: polyline.StrokeOpacity,\n            strokeWeight: polyline.StrokeWeight,\n            title: polyline.Title,\n            visible: polyline.Visible,\n            zIndex: polyline.zIndex,\n        };\n        let polylinePromise: Promise<Polyline|Array<Polyline>>;\n        if (polyline.InCustomLayer) {\n            polylinePromise = this._layerService.CreatePolyline(polyline.LayerId, o);\n        } else {\n            polylinePromise = this._mapService.CreatePolyline(o);\n        }\n        this._polylines.set(polyline, polylinePromise);\n    }\n\n    /**\n      * Registers an event delegate for a line.\n      *\n      * @param eventName - The name of the event to register (e.g. 'click')\n      * @param polyline - The {@link MapPolylineDirective} for which to register the event.\n      * @returns - Observable emiting an instance of T each time the event occurs.\n      *\n      * @memberof BingPolylineService\n      */\n    public CreateEventObservable<T>(eventName: string, polyline: MapPolylineDirective): Observable<T> {\n        const b: Subject<T> = new Subject<T>();\n        if (eventName === 'mousemove') {\n            return b.asObservable();\n        }\n        if (eventName === 'rightclick') {\n            return b.asObservable();\n        }\n        ///\n        /// mousemove and rightclick are not supported by bing polygons.\n        ///\n        return Observable.create((observer: Observer<T>) => {\n            this._polylines.get(polyline).then(p => {\n                const x: Array<Polyline> = Array.isArray(p) ? p : [p];\n                x.forEach(line => line.AddListener(eventName, (e: T) => this._zone.run(() => observer.next(e))));\n            });\n        });\n    }\n\n    /**\n      * Deletes a polyline.\n      *\n      * @param polyline - {@link MapPolylineDirective} to be deleted.\n      * @returns - A promise fullfilled once the polyline has been deleted.\n      *\n      * @memberof BingPolylineService\n      */\n    public DeletePolyline(polyline: MapPolylineDirective): Promise<void> {\n        const m = this._polylines.get(polyline);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l: Polyline) => {\n            return this._zone.run(() => {\n                const x: Array<Polyline> = Array.isArray(l) ? l : [l];\n                x.forEach(line =>  line.Delete());\n                this._polylines.delete(polyline);\n            });\n        });\n\n    }\n\n    /**\n     * Obtains geo coordinates for the marker on the click location\n     *\n     * @abstract\n     * @param e - The mouse event.\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\n     *\n     * @memberof BingPolylineService\n     */\n    public GetCoordinatesFromClick(e: Microsoft.Maps.IMouseEventArgs): ILatLong {\n        if (!e) { return null; }\n        if (!e.location) { return null; }\n        return { latitude: e.location.latitude, longitude: e.location.longitude };\n    }\n\n    /**\n     * Obtains the marker model for the marker allowing access to native implementation functionatiliy.\n     *\n     * @param polyline - The {@link MapPolylineDirective} for which to obtain the polyline model.\n     * @returns - A promise that when fullfilled contains the {@link Polyline}\n     * implementation of the underlying platform. For complex paths, returns an array of polylines.\n     *\n     * @memberof BingPolylineService\n     */\n    public GetNativePolyline(polyline: MapPolylineDirective): Promise<Polyline|Array<Polyline>> {\n        return this._polylines.get(polyline);\n    }\n\n    /**\n     * Set the polyline options.\n     *\n     * @param polyline - {@link MapPolylineDirective} to be updated.\n     * @param options - {@link IPolylineOptions} object containing the options. Options will be merged with the\n     * options already on the underlying object.\n     * @returns - A promise fullfilled once the polyline options have been set.\n     *\n     * @memberof BingPolylineService\n     */\n    public SetOptions(polyline: MapPolylineDirective, options: IPolylineOptions): Promise<void> {\n        return this._polylines.get(polyline).then(l => {\n            const x: Array<Polyline> = Array.isArray(l) ? l : [l];\n            x.forEach(line => line.SetOptions(options));\n        });\n    }\n\n    /**\n     * Updates the Polyline path\n     *\n     * @param polyline - {@link MapPolylineDirective} to be updated.\n     * @returns - A promise fullfilled once the polyline has been updated.\n     *\n     * @memberof BingPolylineService\n     */\n    public UpdatePolyline(polyline: MapPolylineDirective): Promise<void> {\n        const m = this._polylines.get(polyline);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then(l => this._zone.run(() => {\n            const x: Array<Polyline> = Array.isArray(l) ? l : [l];\n            const p: Array<Array<ILatLong>> =\n                polyline.Path.length > 0 && Array.isArray(polyline.Path[0]) ? <Array<Array<ILatLong>>>polyline.Path :\n                <Array<Array<ILatLong>>>[polyline.Path];\n             x.forEach((line, index) => {\n                 if (p.length > index) { line.SetPath(p[index]); }\n            });\n            if (Array.isArray(l) && l.length > p.length) {\n                l.splice(p.length - 1).forEach(line => line.Delete());\n            }\n        }));\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { MapServiceFactory } from '../mapservicefactory';\nimport { MapService } from '../map.service';\nimport { MapAPILoader, WindowRef, DocumentRef } from '../mapapiloader';\nimport { MarkerService } from '../marker.service';\nimport { InfoBoxService } from '../infobox.service';\nimport { LayerService } from '../layer.service';\nimport { ClusterService } from '../cluster.service';\nimport { PolygonService } from '../polygon.service';\nimport { PolylineService } from '../polyline.service';\nimport { BingMapAPILoader, BingMapAPILoaderConfig } from './bing-map.api-loader.service';\nimport { BingInfoBoxService } from './bing-infobox.service';\nimport { BingMarkerService } from './bing-marker.service';\nimport { BingMapService } from './bing-map.service';\nimport { BingLayerService } from './bing-layer.service';\nimport { BingClusterService } from './bing-cluster.service';\nimport { BingPolygonService } from './bing-polygon.service';\nimport { BingPolylineService } from './bing-polyline.service';\n\n/**\n * Implements a factory to create thre necessary Bing Maps V8 specific service instances.\n *\n * @export\n */\n@Injectable()\nexport class BingMapServiceFactory implements MapServiceFactory {\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of BingMapServiceFactory.\n     * @param _loader - {@link MapAPILoader} implementation for the Bing Map V8 provider.\n     * @param _zone - NgZone object to implement zone aware promises.\n     *\n     * @memberof BingMapServiceFactory\n     */\n    constructor(private _loader: MapAPILoader, private _zone: NgZone) { }\n\n    ///\n    /// Public methods and MapServiceFactory implementation.\n    ///\n\n    /**\n     * Creates the map service for the Bing Maps V8 implementation.\n     *\n     * @returns - {@link MapService}. A concreted instance of the {@link BingMapService}.\n     *\n     * @memberof BingMapServiceFactory\n     */\n    public Create(): MapService {\n        return new BingMapService(this._loader, this._zone);\n    }\n\n    /**\n     * Creates the cluster service for the Bing Maps V8 implementation.\n     *\n     * @param map - {@link MapService}. A concreted instance of the {@link BingMapService}.\n     * @returns - {@link ClusterService}. A concreted instance of the {@link BingClusterService}.\n     *\n     * @memberof BingMapServiceFactory\n     */\n    public CreateClusterService(_mapService: BingMapService): ClusterService {\n        return new BingClusterService(_mapService, this._zone);\n    }\n\n    /**\n     * Creates thh info box service for the Bing Maps V8 implementation.\n     *\n     * @param map - {@link MapService}. A concreted instance of the {@link BingMapService}.\n     * @returns - {@link InfoBoxService}. A concreted instance of the {@link BingInfoBoxService}.\n     *\n     * @memberof BingMapServiceFactory\n     */\n    public CreateInfoBoxService(_mapService: BingMapService): InfoBoxService {\n        return new BingInfoBoxService(_mapService, this._zone);\n    }\n\n    /**\n     * Creates the layer service for the Bing Maps V8 implementation.\n     *\n     * @param map - {@link MapService}. A concreted instance of the {@link BingMapService}.\n     * @returns - {@link LayerService}. A concreted instance of the {@link BingLayerService}.\n     *\n     * @memberof BingMapServiceFactory\n     */\n    public CreateLayerService(_mapService: BingMapService): LayerService {\n        return new BingLayerService(_mapService, this._zone);\n    }\n\n    /**\n     * Creates the marker service for the Bing Maps V8 implementation.\n     *\n     * @param map - {@link MapService}. A concreted instance of the {@link BingMapService}.\n     * @param layers - {@link LayerService}. A concreted instance of the {@link BingLayerService}.\n     * @param clusters  - {@link ClusterService}. A concreted instance of the {@link BingClusterService}.\n     * @returns - {@link MarkerService}. A concreted instance of the {@link BingMarkerService}.\n     *\n     * @memberof BingMapServiceFactory\n     */\n    public CreateMarkerService(_mapService: BingMapService,\n        _layerService: BingLayerService, _clusterService: BingClusterService): MarkerService {\n        return new BingMarkerService(_mapService, _layerService, _clusterService, this._zone);\n    }\n\n    /**\n     * Creates the polygon service for the Bing Maps V8 implementation.\n     *\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\n     * @returns - {@link PolygonService} implementation for the underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    public CreatePolygonService(map: MapService, layers: LayerService): PolygonService {\n        return new BingPolygonService(map, layers, this._zone);\n    }\n\n    /**\n     * Creates the polyline service for the Bing Maps V8 implementation.\n     *\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\n     * @returns - {@link PolylineService} implementation for the underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    public CreatePolylineService(map: MapService, layers: LayerService): PolylineService {\n        return new BingPolylineService(map, layers, this._zone);\n    }\n\n}\n\n/**\n * Creates a new instance of a plaform specific MapServiceFactory.\n *\n * @export\n * @param apiLoader - An {@link MapAPILoader} instance. This is expected to the a {@link BingMapAPILoader}.\n * @param zone - An NgZone instance to provide zone aware promises.\n *\n * @returns -  A {@link MapServiceFactory} instance.\n */\nexport function BingMapServiceFactoryFactory(apiLoader: MapAPILoader, zone: NgZone): MapServiceFactory {\n    return new BingMapServiceFactory(apiLoader, zone);\n}\n\n/**\n * Creates a new instance of a plaform specific MapLoaderFactory.\n *\n * @export\n * @returns - A {@link MapAPILoader} instance.\n */\nexport function BingMapLoaderFactory(): MapAPILoader {\n    return new BingMapAPILoader(new BingMapAPILoaderConfig(), new WindowRef(), new DocumentRef());\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\nimport { Marker } from '../../models/marker';\nimport { Layer } from '../../models/layer';\nimport { MarkerTypeId } from '../../models/marker-type-id';\nimport { MapService } from '../map.service';\nimport { MapLayerDirective } from '../../components/map-layer';\nimport { LayerService } from '../layer.service';\nimport { GoogleMapService } from './google-map.service';\nimport { GoogleConversions } from './google-conversions';\nimport { GoogleMarker } from '../../models/google/google-marker';\nimport * as GoogleMapTypes from './google-map-types';\n\ndeclare var google: any;\n\n/**\n * This abstract partially implements the contract for the {@link LayerService}\n * and {@link ClusterService} for the Google Maps archtiecture. It serves\n * as the base class for basic layer ({@link GoogleLayerService}) and cluster layer ({@link GoogleClusterLayer}).\n *\n * @export\n * @abstract\n */\nexport abstract class GoogleLayerBase {\n\n    ///\n    /// Field declarations\n    ///\n    protected abstract _layers: Map<number, Promise<Layer>>;\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of GoogleLayerBase.\n     * @param _mapService - Concrete {@link MapService} implementation for Google Maps.\n     * An instance of {@link GoogleMapService}.\n     * @param _zone - NgZone instance to provide zone aware promises.\n     *\n     * @memberof GoogleLayerBase\n     */\n    constructor(protected _mapService: MapService, protected _zone: NgZone) { }\n\n    ///\n    /// Public methods\n    ///\n\n    /**\n     * Adds a layer to the map.\n     *\n     * @abstract\n     * @param layer - MapLayerDirective component object.\n     * Generally, MapLayerDirective will be injected with an instance of the\n     * LayerService and then self register on initialization.\n     *\n     * @memberof GoogleLayerBase\n     */\n    public abstract AddLayer(layer: MapLayerDirective): void;\n\n    /**\n     * Deletes the layer\n     *\n     * @param layer - MapLayerDirective component object for which to retrieve the layer.\n     * @returns - A promise that is fullfilled when the layer has been removed.\n     *\n     * @memberof GoogleLayerBase\n     */\n    public DeleteLayer(layer: MapLayerDirective): Promise<void> {\n        const l = this._layers.get(layer.Id);\n        if (l == null) {\n            return Promise.resolve();\n        }\n        return l.then((l1: Layer) => {\n            return this._zone.run(() => {\n                l1.Delete();\n                this._layers.delete(layer.Id);\n            });\n        });\n    }\n\n    /**\n     * Returns the Layer model represented by this layer.\n     *\n     * @param layer - MapLayerDirective component object or layer id for which to retrieve the layer model.\n     * @returns - A promise that when resolved contains the Layer model.\n     *\n     * @memberof GoogleLayerBase\n     */\n    public GetNativeLayer(layer: MapLayerDirective|number): Promise<Layer> {\n        let p: Promise<Layer> = null;\n        if (typeof(layer) === 'number') {\n            p = this._layers.get(layer);\n        }\n        else {\n            p = this._layers.get((<MapLayerDirective>layer).Id);\n        }\n        return p;\n    }\n\n    /**\n     * Creates a marker in the layer.\n     *\n     * @param layer - The Id of the layer in which to create the marker.\n     * @param options - {@link IMarkerOptions} object containing the marker properties.\n     * @returns - A promise that when fullfilled contains the {@link Marker} model for the created marker.\n     *\n     * @memberof GoogleLayerBase\n     */\n    public CreateMarker(layer: number, options: IMarkerOptions): Promise<Marker> {\n        const mp: Promise<GoogleMapTypes.GoogleMap> = this._mapService.MapPromise;\n        const lp: Promise<Layer> = this._layers.get(layer);\n\n        return Promise.all([mp, lp]).then(([map, l]) => {\n            const payload = (x: GoogleMapTypes.MarkerOptions): GoogleMarker => {\n                const marker = new google.maps.Marker(x);\n                if (options.metadata) { options.metadata.forEach((val: any, key: string) => marker.Metadata.set(key, val)); }\n                marker.setMap(map);\n                const m = new GoogleMarker(marker);\n                m.IsFirst = options.isFirst;\n                m.IsLast = options.isLast;\n                if (options.metadata) { options.metadata.forEach((val: any, key: string) => m.Metadata.set(key, val)); }\n                l.AddEntity(m);\n                return m;\n            };\n            const o: GoogleMapTypes.MarkerOptions = GoogleConversions.TranslateMarkerOptions(options);\n            if (options.iconInfo && options.iconInfo.markerType) {\n                const s = Marker.CreateMarker(options.iconInfo);\n                if (typeof(s) === 'string') {\n                    o.icon = s;\n                    return payload(o);\n                }\n                else {\n                    return s.then(x => {\n                        o.icon = x.icon;\n                        return payload(o);\n                    });\n                }\n            }\n            else {\n                return payload(o);\n            }\n        });\n    }\n\n    /**\n     * Creates an array of unbound markers. Use this method to create arrays of markers to be used in bulk\n     * operations.\n     *\n     * @param options - Marker options defining the markers.\n     * @param markerIcon - Optional information to generate custom markers. This will be applied to all markers.\n     * @returns - A promise that when fullfilled contains the an arrays of the Marker models.\n     *\n     * @memberof GoogleLayerBase\n     */\n    public CreateMarkers(options: Array<IMarkerOptions>, markerIcon?: IMarkerIconInfo): Promise<Array<Marker>> {\n        const payload = (icon: string): Array<GoogleMarker> => {\n            const markers: Array<GoogleMarker> = options.map(mo => {\n                const o: GoogleMapTypes.MarkerOptions = GoogleConversions.TranslateMarkerOptions(mo);\n                if (icon && icon !== '') { o.icon = icon; }\n                const pushpin = new google.maps.Marker(o);\n                const marker: GoogleMarker = new GoogleMarker(pushpin);\n                marker.IsFirst = mo.isFirst;\n                marker.IsLast = mo.isLast;\n                if (mo.metadata) { mo.metadata.forEach((val: any, key: string) => marker.Metadata.set(key, val)); }\n                return marker;\n            });\n            return markers;\n        };\n        const p: Promise<Array<Marker>> = new Promise<Array<Marker>>((resolve, reject) => {\n            if (markerIcon && markerIcon.markerType) {\n                const s = Marker.CreateMarker(markerIcon);\n                if (typeof(s) === 'string') { resolve(payload(s)); }\n                else {\n                    return s.then(x => {\n                        resolve(payload(x.icon));\n                    });\n                }\n            }\n            else {\n                resolve (payload(null));\n            }\n        });\n        return p;\n    }\n\n    ///\n    /// Protected methods\n    ///\n\n    /**\n     * Gets the layer based on its id.\n     *\n     * @protected\n     * @param id - Layer Id.\n     * @returns - A promise that when fullfilled contains the {@link Layer} model for the layer.\n     *\n     * @memberof GoogleLayerBase\n     */\n    protected GetLayerById(id: number): Promise<Layer> {\n        let p: Promise<Layer>;\n        this._layers.forEach((l: Promise<Layer>, k: number) => { if (k === id) { p = l; } });\n        return p;\n    }\n\n}\n","﻿import { IClusterIconInfo } from '../../interfaces/icluster-icon-info';\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\nimport { MarkerService } from '../marker.service';\nimport { IClusterOptions } from '../../interfaces/icluster-options';\nimport { Injectable, NgZone } from '@angular/core';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { Marker } from '../../models/marker';\nimport { Layer } from '../../models/layer';\nimport { MarkerTypeId } from '../../models/marker-type-id';\nimport { ClusterClickAction } from '../../models/cluster-click-action';\nimport { ClusterLayerDirective } from '../../components/cluster-layer';\nimport { ClusterService } from '../cluster.service';\nimport { MapService } from '../map.service';\nimport { GoogleLayerBase } from './google-layer-base';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { Polygon } from '../../models/polygon';\nimport { Polyline } from '../../models/polyline';\nimport * as GoogleMapTypes from './google-map-types';\n\n@Injectable()\nexport class GoogleClusterService extends GoogleLayerBase implements ClusterService {\n\n    ///\n    /// Field declarations\n    ///\n    protected _layers: Map<number, Promise<Layer>> = new Map<number, Promise<Layer>>();\n    protected _layerStyles: Map<number, Array<GoogleMapTypes.ClusterStyle>> = new Map<number, Array<GoogleMapTypes.ClusterStyle>>();\n\n    ///\n    /// Static methods\n    ///\n\n    /**\n     * Creates the cluster icon from the styles\n     *\n     * @param styles\n     * @returns - Promise that when resolved contains an Array of IClusterIconInfo objects\n     * containing the hydrated cluster icons.\n     * @memberof GoogleClusterService\n     */\n    public static CreateClusterIcons(styles: Array<IClusterIconInfo>): Promise<Array<IClusterIconInfo>> {\n        const i: Promise<Array<IClusterIconInfo>> = new Promise<Array<IClusterIconInfo>>((resolve, reject) => {\n            const pa = new Array<Promise<{icon: string, iconInfo: IMarkerIconInfo}>>();\n            styles.forEach((style, index) => {\n                if (style.iconInfo) {\n                    const s: string|Promise<{icon: string, iconInfo: IMarkerIconInfo}> = Marker.CreateMarker(style.iconInfo);\n                    if (typeof(s) === 'string') {\n                        style.url = s;\n                        if (style.width == null) {\n                            style.width = style.iconInfo.size.width;\n                            style.height = style.iconInfo.size.height;\n                        }\n                        if (style.iconInfo.markerOffsetRatio && style.iconInfo.size && style.anchor == null) {\n                            const o: IMarkerIconInfo = style.iconInfo;\n                            style.anchor = [\n                                o.size.width * o.markerOffsetRatio.x,\n                                o.size.height * o.markerOffsetRatio.y\n                            ];\n                        }\n                        delete style.iconInfo;\n                    }\n                    else {\n                        s.then(x => {\n                            style.url = x.icon;\n                            if (style.width == null) {\n                                style.width = x.iconInfo.size.width;\n                                style.height = x.iconInfo.size.height;\n                            }\n                            if (x.iconInfo.markerOffsetRatio && x.iconInfo.size && style.anchor == null) {\n                                const o: IMarkerIconInfo = x.iconInfo;\n                                style.anchor = [\n                                    o.size.width * o.markerOffsetRatio.x,\n                                    o.size.height * o.markerOffsetRatio.y\n                                ];\n                            }\n                            delete style.iconInfo;\n                        });\n                        pa.push(s);\n                    }\n                }\n            });\n            if (pa.length === 0) { resolve(styles); }\n            else {\n                Promise.all(pa).then(() => {\n                    resolve(styles);\n                });\n            }\n        });\n        return i;\n    }\n\n    ///\n    /// Constructors\n    ///\n\n    /**\n     * Creates an instance of GoogleClusterService.\n     * @param _mapService\n     * @param _zone\n     * @memberof GoogleClusterService\n     */\n    constructor(_mapService: MapService, _zone: NgZone) {\n        super(_mapService, _zone);\n    }\n\n    /**\n     * Adds the cluster layer to the map\n     *\n     * @param layer\n     * @memberof GoogleClusterService\n     */\n    public AddLayer(layer: ClusterLayerDirective): void {\n        const options: IClusterOptions = {\n            id: layer.Id,\n            visible: layer.Visible,\n            clusteringEnabled: layer.ClusteringEnabled,\n            zoomOnClick: layer.ClusterClickAction === ClusterClickAction.ZoomIntoCluster\n        };\n        if (layer.GridSize) { options.gridSize = layer.GridSize; }\n        if (layer.MinimumClusterSize) { options.minimumClusterSize = layer.MinimumClusterSize; }\n        if (layer.Styles) { options.styles = layer.Styles; }\n        if (layer.UseDynamicSizeMarkers) {\n            options.styles = null;\n            // do not to attempt to setup styles here as the dynamic call back will generate them.\n        }\n        else {\n            options.styles = [{\n                height: 30,\n                width: 35,\n                textColor: 'white',\n                textSize: 11,\n                backgroundPosition: 'center',\n                iconInfo: {\n                    markerType: MarkerTypeId.FontMarker,\n                    fontName: 'FontAwesome',\n                    fontSize: 30,\n                    color: 'green',\n                    text: '\\uF111'\n                }\n            }];\n        }\n        const dynamicClusterCallback = (markers: Array<GoogleMapTypes.Marker>, numStyles: number,\n            clusterer: GoogleMapTypes.MarkerClusterer) => {\n            // dynamically ensure that the necessary style for this cluster icon exists and\n            // the clusterer is already hooked up to the styles array via pointer, so we only\n            // need to update the style. Since the clusterer re-renders a cluster icon is the\n            // the marker count changes, we will only need to retain the current icon as opposed\n            // to all cluster icon.\n            const styles: Array<GoogleMapTypes.ClusterStyle> = this._layerStyles.get(layer.Id);\n            const iconInfo: IMarkerIconInfo = {\n                markerType: MarkerTypeId.None\n            };\n            const icon: string = layer.CustomMarkerCallback(<any>markers, iconInfo);\n            styles[0] = {\n                url: `\\\"data:image/svg+xml;utf8,${icon}\\\"`,\n                height: iconInfo.size.height,\n                width: iconInfo.size.width,\n                textColor: 'white',\n                textSize: 11,\n                backgroundPosition: 'center',\n            };\n            return {\n                text: markers.length.toString(),\n                index: 1\n            };\n        };\n        const resetStyles = (clusterer: GoogleMapTypes.MarkerClusterer) => {\n            if (this._layerStyles.has(layer.Id)) { this._layerStyles.get(layer.Id).splice(0); }\n            else {\n                const styles: Array<GoogleMapTypes.ClusterStyle> = new Array<GoogleMapTypes.ClusterStyle>();\n                styles.push({});\n                this._layerStyles.set(layer.Id, styles);\n                clusterer.setStyles(styles);\n                    // this is important for dynamic styles as the pointer to this array gets passed\n                    // around key objects in the clusterer. Therefore, it must be initialized here in order for\n                    // updates to the styles to be visible.\n                    // also, we need to add at least one style to prevent the default styles from being picked up.\n            }\n        };\n\n        const layerPromise = this._mapService.CreateClusterLayer(options);\n        this._layers.set(layer.Id, layerPromise);\n        layerPromise.then(l => {\n            const clusterer: GoogleMapTypes.MarkerClusterer = <GoogleMapTypes.MarkerClusterer>l.NativePrimitve;\n            if (options.styles) {\n                const s  = GoogleClusterService.CreateClusterIcons(options.styles);\n                s.then(x => {\n                    clusterer.setStyles(<Array<GoogleMapTypes.ClusterStyle>>x);\n                });\n            }\n            else {\n                resetStyles(clusterer);\n                this._mapService.MapPromise.then((m: GoogleMapTypes.GoogleMap) => {\n                    m.addListener('zoom_changed', () => {\n                        resetStyles(clusterer);\n                    });\n                });\n                clusterer.setCalculator((m, n) => {\n                    return dynamicClusterCallback(m, n, clusterer);\n                });\n            }\n        });\n    }\n\n    /**\n     * Create a marker in the cluster\n     *\n     * @param layer\n     * @param options\n     * @memberof GoogleClusterService\n     */\n    public CreateMarker(layer: number, options: IMarkerOptions): Promise<Marker> {\n        const p: Promise<Layer> = this.GetLayerById(layer);\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\n\n        return p.then((l: Layer) => {\n            return this._mapService.CreateMarker(options)\n                .then((marker: Marker) => {\n                    marker.IsFirst = options.isFirst;\n                    marker.IsLast = options.isLast;\n                    l.AddEntity(marker);\n                    return marker;\n                });\n        });\n    }\n\n    /**\n     * Starts the clustering\n     *\n     * @param layer\n     * @memberof GoogleClusterService\n     */\n    public StartClustering(layer: ClusterLayerDirective): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Stops the clustering\n     *\n     * @param layer\n     * @memberof GoogleClusterService\n     */\n    public StopClustering(layer: ClusterLayerDirective): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Adds a polygon to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the polygon.\n     * @param options - Polygon options defining the polygon.\n     * @returns - A promise that when fullfilled contains the an instance of the Polygon model.\n     *\n     * @memberof GoogleClusterService\n     */\n    public CreatePolygon(layer: number, options: IPolygonOptions): Promise<Polygon> {\n        throw (new Error('Polygons are not supported in clustering layers. You can only use markers.'));\n    }\n\n    /**\n     * Creates an array of unbound polygons. Use this method to create arrays of polygons to be used in bulk\n     * operations.\n     *\n     * @param layer - The id of the layer to which to add the polygon.\n     * @param options - Polygon options defining the polygons.\n     * @returns - A promise that when fullfilled contains the an arrays of the Polygon models.\n     *\n     * @memberof GoogleClusterService\n     */\n    public CreatePolygons(layer: number, options: Array<IPolygonOptions>): Promise<Array<Polygon>> {\n        throw (new Error('Polygons are not supported in clustering layers. You can only use markers.'));\n    }\n\n    /**\n     * Adds a polyline to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the line.\n     * @param options - Polyline options defining the line.\n     * @returns - A promise that when fullfilled contains the an instance of the Polyline (or an\n     * array of polygons for complex paths) model.\n     *\n     * @memberof GoogleClusterService\n     */\n    public CreatePolyline(layer: number, options: IPolylineOptions): Promise<Polyline|Array<Polyline>> {\n        throw (new Error('Polylines are not supported in clustering layers. You can only use markers.'));\n    }\n\n    /**\n     * Creates an array of unbound polylines. Use this method to create arrays of polylines to be used in bulk\n     * operations.\n     *\n     * @param layer - The id of the layer to which to add the polylines.\n     * @param options - Polyline options defining the polylines.\n     * @returns - A promise that when fullfilled contains the an arrays of the Polyline models.\n     *\n     * @memberof GoogleClusterService\n     */\n    public CreatePolylines(layer: number, options: Array<IPolylineOptions>): Promise<Array<Polyline|Array<Polyline>>> {\n        throw (new Error('Polylines are not supported in clustering layers. You can only use markers.'));\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { InfoBoxComponent } from '../../components/infobox';\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { InfoBoxService } from '../infobox.service';\nimport { MarkerService } from '../marker.service';\nimport { MapService } from '../map.service';\nimport { InfoWindow } from '../../models/info-window';\nimport { GoogleInfoWindow } from '../../models/google/google-info-window';\nimport { GoogleMarker } from '../../models/google/google-marker';\nimport { GoogleMapEventsLookup } from '../../models/google/google-events-lookup';\n\n@Injectable()\nexport class GoogleInfoBoxService extends InfoBoxService {\n\n    ///\n    /// Field declarations\n    ///\n\n    private _boxes: Map<InfoBoxComponent, Promise<InfoWindow>> = new Map<InfoBoxComponent, Promise<GoogleInfoWindow>>();\n\n    ///\n    /// Constructors\n    ///\n\n    /**\n     * Creates an instance of GoogleInfoBoxService.\n     * @param _mapService\n     * @param _markerService\n     * @param _zone\n     *\n     * @memberof GoogleInfoBoxService\n     */\n    constructor(private _mapService: MapService,\n        private _markerService: MarkerService,\n        private _zone: NgZone) {\n        super();\n    }\n\n    /**\n     * Creates a new instance of an info window\n     *\n     * @param info\n     *\n     * @memberof GoogleInfoBoxService\n     */\n    public AddInfoWindow(info: InfoBoxComponent): void {\n        const options: IInfoWindowOptions = {};\n        if (info.HtmlContent !== '') {\n            options.htmlContent = info.HtmlContent;\n        }\n        else {\n            options.title = info.Title;\n            options.description = info.Description;\n        }\n        if (info.xOffset || info.yOffset) {\n            if (options.pixelOffset == null) { options.pixelOffset = { x: 0, y: 0 }; }\n            if (info.xOffset) { options.pixelOffset.x = info.xOffset; }\n            if (info.yOffset) { options.pixelOffset.y = info.yOffset; }\n        }\n        options.disableAutoPan = info.DisableAutoPan;\n        options.visible = info.Visible;\n\n        if (typeof info.Latitude === 'number' && typeof info.Longitude === 'number') {\n            options.position = { latitude: info.Latitude, longitude: info.Longitude };\n        }\n        const infoWindowPromise = this._mapService.CreateInfoWindow(options);\n        this._boxes.set(info, infoWindowPromise);\n    }\n\n    /**\n     * Closes the info window\n     *\n     * @param info\n     * @returns -  A promise that is resolved when the info box is closed.\n     *\n     * @memberof GoogleInfoBoxService\n     */\n    public Close(info: InfoBoxComponent): Promise<void> {\n        return this._boxes.get(info).then(w => {\n            w.Close();\n        });\n    }\n\n    /**\n     * Registers an event delegate for an info window.\n     *\n     * @param eventName - The name of the event to register (e.g. 'click')\n     * @param infoComponent - The {@link InfoBoxComponent} for which to register the event.\n     * @returns - Observable emiting an instance of T each time the event occurs.\n     *\n     * @memberof GoogleInfoBoxService\n     */\n    public CreateEventObservable<T>(eventName: string, infoComponent: InfoBoxComponent): Observable<T> {\n        const googleEventName: string = GoogleMapEventsLookup[eventName];\n        return Observable.create((observer: Observer<T>) => {\n            this._boxes.get(infoComponent).then((b: InfoWindow) => {\n                b.AddListener(googleEventName, (e: T) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n\n    /**\n     * Deletes the info window\n     *\n     * @param info\n     *\n     * @memberof GoogleInfoBoxService\n     */\n    public DeleteInfoWindow(info: InfoBoxComponent): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Opens the info window. Window opens on a marker, if supplied, or a specific location if given\n     *\n     * @param info\n     * @param [loc]\n     *\n     * @memberof GoogleInfoBoxService\n     */\n    public Open(info: InfoBoxComponent, loc?: ILatLong): Promise<void> {\n        if (info.CloseInfoBoxesOnOpen || info.Modal) {\n            // close all open info boxes\n            this._boxes.forEach((box: Promise<InfoWindow>, i: InfoBoxComponent) => {\n                if (info.Id !== i.Id) {\n                    box.then((w) => {\n                        if (w.IsOpen) {\n                            w.Close();\n                            i.Close();\n                        }\n                    });\n                }\n            });\n        }\n        return this._boxes.get(info).then((w: GoogleInfoWindow) => {\n            const options: IInfoWindowOptions = {};\n            if (info.HtmlContent !== '') {\n                options.htmlContent = info.HtmlContent;\n            }\n            else {\n                options.title = info.Title;\n                options.description = info.Description;\n            }\n            w.SetOptions(options);\n            if (info.HostMarker != null) {\n                return this._markerService.GetNativeMarker(info.HostMarker).then((marker) => {\n                    return this._mapService.MapPromise.then((map) => (<GoogleInfoWindow>w).Open((<GoogleMarker>marker).NativePrimitve));\n                });\n            }\n            return this._mapService.MapPromise.then((map) => {\n                if (loc) { w.SetPosition(loc); }\n                w.Open();\n            });\n        });\n    }\n\n    /**\n     * Sets the info window options\n     *\n     * @param info\n     * @param options\n     *\n     * @memberof GoogleInfoBoxService\n     */\n    public SetOptions(info: InfoBoxComponent, options: IInfoWindowOptions): Promise<void> {\n        return this._boxes.get(info).then((w: GoogleInfoWindow) => {\n            w.SetOptions(options);\n        });\n    }\n\n    /**\n     * Sets the info window position\n     *\n     * @param info\n     * @param latlng\n     *\n     * @memberof GoogleInfoBoxService\n     */\n    public SetPosition(info: InfoBoxComponent, latlng: ILatLong): Promise<void> {\n        this._boxes.get(info).then((w) => {\n            w.SetPosition(latlng);\n        });\n        return Promise.resolve();\n    }\n\n}\n","import { eachSeries, nextTick } from 'async';\nimport { GoogleMarker } from './google-marker';\nimport { ILayerOptions } from '../../interfaces/ilayer-options';\nimport { MapService } from '../../services/map.service';\nimport { Layer } from '../layer';\nimport { Marker } from '../marker';\nimport { InfoWindow } from '../info-window';\nimport { Polygon } from '../polygon';\nimport { Polyline } from '../polyline';\nimport { ClusterPlacementMode } from '../cluster-placement-mode';\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\n\n/**\n * Concrete implementation of a layer for the Google Map Provider.\n *\n * @export\n */\nexport class GoogleLayer implements Layer {\n\n    ///\n    /// Field declarations\n    ///\n    private _entities: Array<Marker|InfoWindow|Polygon|Polyline> = new Array<Marker|InfoWindow|Polygon|Polyline>();\n    private _visible: boolean = true;\n\n    ///\n    /// Property definitions\n    ///\n\n    /**\n     * Get the native primitive underneath the abstraction layer. Google does not have the concept of a custom layer,\n     * so we are returning the Map as the native object because it hosts all the markers.\n     *\n     * @returns GoogleMapTypes.GoogleMap.\n     *\n     * @memberof GoogleLayer\n     */\n    public get NativePrimitve(): GoogleMapTypes.GoogleMap {\n        return this._layer;\n    }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates a new instance of the GoogleMarkerClusterer class.\n     *\n     * @param _layer GoogleMapTypes.MarkerClusterer. Native Google Maps Marker Clusterer supporting the cluster layer.\n     * @param _maps MapService. MapService implementation to leverage for the layer.\n     *\n     * @memberof GoogleLayer\n     */\n    constructor(private _layer: GoogleMapTypes.GoogleMap, private _maps: MapService, private _id: number) { }\n\n\n    ///\n    /// Public methods, Layer interface implementation\n    ///\n\n    /**\n     * Adds an event listener for the layer.\n     *\n     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native\n     * layer supports.\n     * @param fn function. Handler to call when the event occurs.\n     *\n     * @memberof GoogleLayer\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        throw (new Error('Events are not supported on Google Layers. You can still add events to individual markers.'));\n    }\n\n    /**\n     * Adds an entity to the layer. Use this method with caution as it will\n     * trigger a recaluation of the clusters (and associated markers if approprite) for\n     * each invocation. If you use this method to add many markers to the cluster, use\n     *\n     * @param entity Marker|InfoWindow|Polygon|Polyline. Entity to add to the layer.\n     *\n     * @memberof GoogleLAyer\n     */\n    public AddEntity(entity: Marker | InfoWindow | Polygon | Polyline): void {\n        if (entity.NativePrimitve) {\n            this._entities.push(entity);\n            entity.NativePrimitve.setVisible(this._visible);\n            entity.NativePrimitve.setMap(this.NativePrimitve);\n        }\n    }\n\n    /**\n     * Adds a number of entities to the layer. Entities in this context should be model abstractions of concered map functionality (such\n     * as marker, infowindow, polyline, polygon, etc..)\n     *\n     * @param entities Array<Marker|InfoWindow|Polygon|Polyline>. Entities to add to the layer.\n     *\n     * @memberof GoogleLAyer\n     */\n    public AddEntities(entities: Array<Marker|InfoWindow|Polygon|Polyline>): void {\n        if (entities != null && Array.isArray(entities) && entities.length !== 0 ) {\n            this._entities.push(...entities);\n            eachSeries([...entities], (e, next) => {\n                e.NativePrimitve.setVisible(this._visible);\n                e.NativePrimitve.setMap(this.NativePrimitve);\n                nextTick(() => next());\n            });\n        }\n    }\n\n    /**\n     * Deletes the layer anbd the markers in it.\n     *\n     * @memberof GoogleLayer\n     */\n    public Delete(): void {\n        eachSeries(this._entities.splice(0), (e, next) => {\n            e.NativePrimitve.setMap(null);\n            nextTick(() => next());\n        });\n    }\n\n    /**\n     * Returns the options governing the behavior of the layer.\n     *\n     * @returns ILayerOptions. The layer options.\n     *\n     * @memberof GoogleLayer\n     */\n    public GetOptions(): ILayerOptions {\n        const options: ILayerOptions = {\n            id: this._id\n        };\n        return options;\n    }\n\n    /**\n     * Returns the visibility state of the layer.\n     *\n     * @returns Boolean. True is the layer is visible, false otherwise.\n     *\n     * @memberof GoogleLayer\n     */\n    public GetVisible(): boolean {\n        return this._visible;\n    }\n\n    /**\n     * Removes an entity from the layer.\n     *\n     * @param entity Marker|InfoWindow|Polygon|Polyline Entity to be removed from the layer.\n     *\n     * @memberof GoogleLayer\n     */\n    public RemoveEntity(entity: Marker | InfoWindow | Polygon | Polyline): void {\n        if (entity.NativePrimitve) {\n            const j: number = this._entities.indexOf(entity);\n            if (j > -1) { this._entities.splice(j, 1); }\n            entity.NativePrimitve.setMap(null);\n        }\n    }\n\n    /**\n     * Sets the entities for the cluster layer.\n     *\n     * @param entities Array<Marker>|Array<InfoWindow>|Array<Polygon>|Array<Polyline> containing\n     * the entities to add to the cluster. This replaces any existing entities.\n     *\n     * @memberof GoogleLayer\n     */\n    public SetEntities(entities: Array<Marker> | Array<InfoWindow> | Array<Polygon> | Array<Polyline>): void {\n        this.Delete();\n        this.AddEntities(entities);\n    }\n\n    /**\n     * Sets the options for the cluster layer.\n     *\n     * @param options ILayerOptions containing the options enumeration controlling the layer behavior. The supplied options\n     * are merged with the default/existing options.\n     *\n     * @memberof GoogleLayer\n     */\n    public SetOptions(options: ILayerOptions): void {\n        this._id = options.id;\n    }\n\n    /**\n     * Toggles the cluster layer visibility.\n     *\n     * @param visible Boolean true to make the layer visible, false to hide the layer.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public SetVisible(visible: boolean): void {\n        eachSeries([...this._entities], (e, next) => {\n            e.NativePrimitve.setVisible(visible);\n            nextTick(() => next());\n        });\n        this._visible = visible;\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { Marker } from '../../models/marker';\nimport { Polygon } from '../../models/polygon';\nimport { Polyline } from '../../models/polyline';\nimport { Layer } from '../../models/layer';\nimport { GoogleLayer } from '../../models/google/google-layer';\nimport { GooglePolygon } from '../../models/google/google-polygon';\nimport { GooglePolyline } from '../../models/google/google-polyline';\nimport { MapLayerDirective } from '../../components/map-layer';\nimport { LayerService } from '../layer.service';\nimport { GoogleLayerBase } from './google-layer-base';\nimport { MapService } from '../map.service';\nimport { GoogleConversions } from './google-conversions';\nimport * as GoogleMapTypes from './google-map-types';\n\ndeclare var google: any;\n\n/**\n * Implements the {@link LayerService} contract for a Google Maps specific implementation.\n *\n * @export\n */\n@Injectable()\nexport class GoogleLayerService extends GoogleLayerBase implements LayerService  {\n\n    ///\n    /// Field Declarations.\n    ///\n    protected _layers: Map<number, Promise<Layer>> = new Map<number, Promise<Layer>>();\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of GoogleLayerService.\n     * @param _mapService - Instance of the Google Maps Service. Will generally be injected.\n     * @param _zone - NgZone instance to provide zone aware promises.\n     *\n     * @memberof GoogleLayerService\n     */\n    constructor(_mapService: MapService, _zone: NgZone) {\n        super(_mapService, _zone);\n    }\n\n    /**\n     * Adds a layer to the map.\n     *\n     * @abstract\n     * @param layer - MapLayerDirective component object.\n     * Generally, MapLayerDirective will be injected with an instance of the\n     * LayerService and then self register on initialization.\n     *\n     * @memberof GoogleLayerService\n     */\n    public AddLayer(layer: MapLayerDirective): void {\n        const p: Promise<Layer> = new Promise<Layer>((resolve, reject) => {\n            this._mapService.MapPromise.then(m => {\n                const l: GoogleLayer = new GoogleLayer(m, this._mapService, layer.Id);\n                l.SetVisible(layer.Visible);\n                resolve(l);\n            });\n        });\n        this._layers.set(layer.Id, p);\n    }\n\n    /**\n     * Adds a polygon to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the polygon.\n     * @param options - Polygon options defining the polygon.\n     * @returns - A promise that when fullfilled contains the an instance of the Polygon model.\n     *\n     * @memberof GoogleLayerService\n     */\n    public CreatePolygon(layer: number, options: IPolygonOptions): Promise<Polygon> {\n        const p: Promise<Polygon> = this._mapService.CreatePolygon(options);\n        const l: Promise<Layer> = this._layers.get(layer);\n        Promise.all([p, l]).then(x => x[1].AddEntity(x[0]));\n        return p;\n    }\n\n    /**\n     * Creates an array of unbound polygons. Use this method to create arrays of polygons to be used in bulk\n     * operations.\n     *\n     * @param layer - The id of the layer to which to add the polygon.\n     * @param options - Polygon options defining the polygons.\n     * @returns - A promise that when fullfilled contains the an arrays of the Polygon models.\n     *\n     * @memberof GoogleLayerService\n     */\n    public CreatePolygons(layer: number, options: Array<IPolygonOptions>): Promise<Array<Polygon>> {\n        //\n        // Note: we attempted using data.Polygons in an attempt to improve performance, but either data.Polygon\n        // or data.MultiPolygon actually operate significantly slower than generating the polygons this way.\n        // the slowness in google as opposed to bing probably comes from the point reduction algorithm uses.\n        // Signigicant performance improvements might be possible in google when using a pixel based reduction algorithm\n        // prior to setting the polygon path. This will lower to processing overhead of the google algorithm (with is Douglas-Peucker\n        // and rather compute intensive)\n        //\n        const p: Promise<Layer> = this.GetLayerById(layer);\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\n        return p.then((l: Layer) => {\n            const polygons: Promise<Array<Polygon>> = new Promise<Array<Polygon>>((resolve, reject) => {\n                const polys: Array<GooglePolygon> = options.map(o => {\n                    const op: GoogleMapTypes.PolygonOptions = GoogleConversions.TranslatePolygonOptions(o);\n                    const poly: GoogleMapTypes.Polygon = new google.maps.Polygon(op);\n                    const polygon: GooglePolygon = new GooglePolygon(poly);\n                    if (o.title && o.title !== '') { polygon.Title = o.title; }\n                    if (o.metadata) { o.metadata.forEach((val: any, key: string) => polygon.Metadata.set(key, val)); }\n                    return polygon;\n                });\n                resolve(polys);\n            });\n            return polygons;\n        });\n    }\n\n    /**\n     * Adds a polyline to the layer.\n     *\n     * @abstract\n     * @param layer - The id of the layer to which to add the polyline.\n     * @param options - Polyline options defining the polyline.\n     * @returns - A promise that when fullfilled contains the an instance of the Polyline (or an array\n     * of polygons for complex paths) model.\n     *\n     * @memberof GoogleLayerService\n     */\n    public CreatePolyline(layer: number, options: IPolylineOptions): Promise<Polyline|Array<Polyline>> {\n        const p: Promise<Polyline|Array<Polyline>> = this._mapService.CreatePolyline(options);\n        const l: Promise<Layer> = this._layers.get(layer);\n        Promise.all([p, l]).then(x => {\n            const p1: Array<Polyline> =  Array.isArray(x[0]) ? <Array<Polyline>>x[0] : [<Polyline>x[0]];\n            for (const p2 of p1) {x[1].AddEntity(p2); }\n        });\n        return p;\n    }\n\n    /**\n     * Creates an array of unbound polylines. Use this method to create arrays of polylines to be used in bulk\n     * operations.\n     *\n     * @param layer - The id of the layer to which to add the polylines.\n     * @param options - Polyline options defining the polylines.\n     * @returns - A promise that when fullfilled contains the an arrays of the Polyline models.\n     *\n     * @memberof GoogleLayerService\n     */\n    public CreatePolylines(layer: number, options: Array<IPolylineOptions>): Promise<Array<Polyline|Array<Polyline>>> {\n        const p: Promise<Layer> = this.GetLayerById(layer);\n        if (p == null) { throw (new Error(`Layer with id ${layer} not found in Layer Map`)); }\n        return p.then((l: Layer) => {\n            const polylines: Promise<Array<Polyline|Array<Polyline>>> = new Promise<Array<Polyline|Array<Polyline>>>((resolve, reject) => {\n                const polys: Array<Polyline|Array<Polyline>> = options.map(o => {\n                    const op: GoogleMapTypes.PolylineOptions = GoogleConversions.TranslatePolylineOptions(o);\n                    if (o.path && o.path.length > 0 && !Array.isArray(o.path[0])) {\n                        op.path = GoogleConversions.TranslatePaths(o.path)[0];\n                        const poly: GoogleMapTypes.Polyline = new google.maps.Polyline(op);\n                        const polyline: GooglePolyline = new GooglePolyline(poly);\n                        if (o.title && o.title !== '') { polyline.Title = o.title; }\n                        if (o.metadata) { o.metadata.forEach((v, k) => polyline.Metadata.set(k, v)); }\n                        return polyline;\n                    }\n                    else {\n                        const paths: Array<Array<GoogleMapTypes.LatLng>> = GoogleConversions.TranslatePaths(o.path);\n                        const lines: Array<Polyline> = new Array<Polyline>();\n                        paths.forEach(x => {\n                            op.path = x;\n                            const poly = new google.maps.Polyline(op);\n                            const polyline: GooglePolyline = new GooglePolyline(poly);\n                            if (o.metadata) { o.metadata.forEach((v, k) => polyline.Metadata.set(k, v)); }\n                            if (o.title && o.title !== '') {polyline.Title = o.title; }\n                            lines.push(polyline);\n                        });\n                        return lines;\n                    }\n                });\n                resolve(polys);\n            });\n            return polylines;\n        });\n    }\n\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { MapAPILoader, WindowRef, DocumentRef } from '../mapapiloader';\n\n/**\n * Protocol enumeration\n *\n * @export\n * @enum {number}\n */\nexport enum ScriptProtocol {\n    HTTP,\n    HTTPS,\n    AUTO\n}\n\n/**\n * Bing Maps V8 specific loader configuration to be used with the {@link GoogleMapAPILoader}\n *\n * @export\n */\n@Injectable()\nexport class GoogleMapAPILoaderConfig {\n    /**\n       * The Google Maps API Key (see:\n       * https://developers.google.com/maps/documentation/javascript/get-api-key)\n       */\n    apiKey?: string;\n\n    /**\n     * The Google Maps client ID (for premium plans).\n     * When you have a Google Maps APIs Premium Plan license, you must authenticate\n     * your application with either an API key or a client ID.\n     * The Google Maps API will fail to load if both a client ID and an API key are included.\n     */\n    clientId?: string;\n\n    /**\n     * The Google Maps channel name (for premium plans).\n     * A channel parameter is an optional parameter that allows you to track usage under your client\n     * ID by assigning a distinct channel to each of your applications.\n     */\n    channel?: string;\n\n    /**\n     * Google Maps API version.\n     */\n    apiVersion?: string;\n\n    /**\n     * Host and Path used for the `<script>` tag.\n     */\n    hostAndPath?: string;\n\n    /**\n     * Protocol used for the `<script>` tag.\n     */\n    protocol?: ScriptProtocol;\n\n    /**\n     * Defines which Google Maps libraries should get loaded.\n     */\n    libraries?: string[];\n\n    /**\n     * The default bias for the map behavior is US.\n     * If you wish to alter your application to serve different map tiles or bias the\n     * application, you can overwrite the default behavior (US) by defining a `region`.\n     * See https://developers.google.com/maps/documentation/javascript/basics#Region\n     */\n    region?: string;\n\n    /**\n     * The Google Maps API uses the browser's preferred language when displaying\n     * textual information. If you wish to overwrite this behavior and force the API\n     * to use a given language, you can use this setting.\n     * See https://developers.google.com/maps/documentation/javascript/basics#Language\n     */\n    language?: string;\n\n    /**\n     * The Google Maps API requires a separate library for clustering. Set the property\n     * to true in order to load this library.\n     * See https://developers.google.com/maps/documentation/javascript/marker-clustering\n     */\n    enableClustering?: boolean;\n\n    /**\n     * Host and Path used for the cluster library `<script>` tag.\n     */\n    clusterHostAndPath?: string;\n}\n\n/**\n * Default loader configuration.\n */\nconst DEFAULT_CONFIGURATION = new GoogleMapAPILoaderConfig();\n\n/**\n * Bing Maps V8 implementation for the {@link MapAPILoader} service.\n *\n * @export\n */\n@Injectable()\nexport class GoogleMapAPILoader extends MapAPILoader {\n\n    ///\n    /// Field defintitions.\n    ///\n    private _scriptLoadingPromise: Promise<void>;\n\n    ///\n    /// Property declarations.\n    ///\n\n    /**\n     * Gets the loader configuration.\n     *\n     * @readonly\n     * @memberof GoogleMapAPILoader\n     */\n    public get Config(): GoogleMapAPILoaderConfig { return this._config; }\n\n    /**\n     * Creates an instance of GoogleMapAPILoader.\n     * @param _config - The loader configuration.\n     * @param _windowRef - An instance of {@link WindowRef}. Necessary because Bing Map V8 interacts with the window object.\n     * @param _documentRef - An instance of {@link DocumentRef}.\n     *                                     Necessary because Bing Map V8 interacts with the document object.\n     * @memberof GoogleMapAPILoader\n     */\n    constructor( @Optional() private _config: GoogleMapAPILoaderConfig, private _windowRef: WindowRef, private _documentRef: DocumentRef) {\n        super();\n        if (this._config === null || this._config === undefined) {\n            this._config = DEFAULT_CONFIGURATION;\n        }\n    }\n\n    ///\n    /// Public methods and MapAPILoader implementation.\n    ///\n\n    /**\n     * Loads the necessary resources for Bing Maps V8.\n     *\n     * @memberof GoogleMapAPILoader\n     */\n    public Load(): Promise<void> {\n        if (this._scriptLoadingPromise) {\n            return this._scriptLoadingPromise;\n        }\n\n        const script = this._documentRef.GetNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        const callbackName = `Create`;\n        script.src = this.GetMapsScriptSrc(callbackName);\n\n        this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\n            (<any>this._windowRef.GetNativeWindow())[callbackName] = () => {\n                if (this._config.enableClustering) {\n                    // if clustering is enabled then delay the loading until after the cluster library is loaded\n                    const clusterScript = this._documentRef.GetNativeDocument().createElement('script');\n                    clusterScript.type = 'text/javascript';\n                    clusterScript.src = this.GetClusterScriptSrc();\n                    clusterScript.onload = clusterScript.onreadystatechange = () => {\n                        resolve();\n                    };\n                    this._documentRef.GetNativeDocument().head.appendChild(clusterScript);\n                } else {\n                    resolve();\n                }\n            };\n            script.onerror = (error: Event) => { reject(error); };\n        });\n        this._documentRef.GetNativeDocument().head.appendChild(script);\n\n        return this._scriptLoadingPromise;\n    }\n\n    ///\n    /// Private methods\n    ///\n\n    /**\n     * Gets the Google Maps scripts url for injections into the header.\n     *\n     * @param callbackName - Name of the function to be called when the Google Maps scripts are loaded.\n     * @returns - The url to be used to load the Google Map scripts.\n     *\n     * @memberof GoogleMapAPILoader\n     */\n    private GetMapsScriptSrc(callbackName: string) {\n        const hostAndPath: string = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n        const queryParams: { [key: string]: string | Array<string> } = {\n            v: this._config.apiVersion,\n            callback: callbackName,\n            key: this._config.apiKey,\n            client: this._config.clientId,\n            channel: this._config.channel,\n            libraries: this._config.libraries,\n            region: this._config.region,\n            language: this._config.language\n        };\n        return this.GetScriptSrc(hostAndPath, queryParams);\n    }\n\n    /**\n     * Gets the Google Maps Cluster library url for injections into the header.\n     *\n     * @returns - The url to be used to load the Google Map Cluster library.\n     *\n     * @memberof GoogleMapAPILoader\n     */\n    private GetClusterScriptSrc() {\n        const hostAndPath: string = this._config.clusterHostAndPath ||\n            'developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js';\n        return this.GetScriptSrc(hostAndPath, {});\n    }\n\n    /**\n     * Gets a scripts url for injections into the header.\n     *\n     * @param hostAndPath - Host and path name of the script to load.\n     * @param queryParams - Url query parameters.\n     * @returns - The url with correct protocol, path, and query parameters.\n     *\n     * @memberof GoogleMapAPILoader\n     */\n    private GetScriptSrc(hostAndPath: string, queryParams: { [key: string]: string | Array<string> }): string {\n        const protocolType: ScriptProtocol =\n            <ScriptProtocol>((this._config && this._config.protocol) || ScriptProtocol.HTTPS);\n        let protocol: string;\n\n        switch (protocolType) {\n            case ScriptProtocol.AUTO:\n                protocol = '';\n                break;\n            case ScriptProtocol.HTTP:\n                protocol = 'http:';\n                break;\n            case ScriptProtocol.HTTPS:\n                protocol = 'https:';\n                break;\n        }\n\n        const params: string =\n            Object.keys(queryParams)\n                .filter((k: string) => queryParams[k] != null)\n                .filter((k: string) => {\n                    // remove empty arrays\n                    return !Array.isArray(queryParams[k]) ||\n                        (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n                })\n                .map((k: string) => {\n                    // join arrays as comma seperated strings\n                    const i = queryParams[k];\n                    if (Array.isArray(i)) {\n                        return { key: k, value: i.join(',') };\n                    }\n                    return { key: k, value: queryParams[k] };\n                })\n                .map((entry: { key: string, value: string }) => { return `${entry.key}=${entry.value}`; })\n                .join('&');\n        return `${protocol}//${hostAndPath}?${params}`;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject, Observable, Observer } from 'rxjs';\nimport { IPoint } from '../../interfaces/ipoint';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { Marker } from '../../models/marker';\nimport { MapMarkerDirective } from '../../components/map-marker';\nimport { MarkerService } from '../marker.service';\nimport { MapService } from '../map.service';\nimport { LayerService } from '../layer.service';\nimport { ClusterService } from '../cluster.service';\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\nimport { GoogleConversions } from './google-conversions';\n\n/**\n * Concrete implementation of the MarkerService abstract class for Google.\n *\n * @export\n */\n@Injectable()\nexport class GoogleMarkerService implements MarkerService {\n\n    ///\n    /// Field declarations\n    ///\n    private _markers: Map<MapMarkerDirective, Promise<Marker>> = new Map<MapMarkerDirective, Promise<Marker>>();\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of GoogleMarkerService.\n     * @param _mapService - {@link MapService} instance.\n     * The concrete {@link GoogleMapService} implementation is expected.\n     * @param _layerService - {@link LayerService} instance.\n     * The concrete {@link GoogleLayerService} implementation is expected.\n     * @param _clusterService - {@link ClusterService} instance.\n     * The concrete {@link GoogleClusterService} implementation is expected.\n     * @param _zone - NgZone instance to support zone aware promises.\n     *\n     * @memberof GoogleMarkerService\n     */\n    constructor(private _mapService: MapService,\n        private _layerService: LayerService,\n        private _clusterService: ClusterService,\n        private _zone: NgZone) {\n    }\n\n    /**\n     * Adds a marker. Depending on the marker context, the marker will either by added to the map or a correcsponding layer.\n     *\n     * @param marker - The {@link MapMarkerDirective} to be added.\n     * @memberof GoogleMarkerService\n     */\n    public AddMarker(marker: MapMarkerDirective): void {\n        const o: IMarkerOptions = {\n            anchor: marker.Anchor,\n            position: { latitude: marker.Latitude, longitude: marker.Longitude },\n            title: marker.Title,\n            label: marker.Label,\n            draggable: marker.Draggable,\n            icon: marker.IconUrl,\n            iconInfo: marker.IconInfo,\n            width: marker.Width,\n            height: marker.Height,\n            isFirst: marker.IsFirstInSet,\n            isLast: marker.IsLastInSet\n        };\n\n        // create marker via promise.\n        let markerPromise: Promise<Marker> = null;\n        if (marker.InClusterLayer) {\n            markerPromise = this._clusterService.CreateMarker(marker.LayerId, o);\n        }\n        else if (marker.InCustomLayer) {\n            markerPromise = this._layerService.CreateMarker(marker.LayerId, o);\n        }\n        else {\n            markerPromise = this._mapService.CreateMarker(o);\n        }\n\n        this._markers.set(marker, markerPromise);\n        if (marker.IconInfo) {\n            markerPromise.then((m: Marker) => {\n                // update iconInfo to provide hook to do post icon creation activities and\n                // also re-anchor the marker\n                marker.DynamicMarkerCreated.emit(o.iconInfo);\n                const p: IPoint = {\n                    x: (o.iconInfo.size && o.iconInfo.markerOffsetRatio) ? (o.iconInfo.size.width * o.iconInfo.markerOffsetRatio.x) : 0,\n                    y: (o.iconInfo.size && o.iconInfo.markerOffsetRatio) ? (o.iconInfo.size.height * o.iconInfo.markerOffsetRatio.y) : 0,\n                };\n                m.SetAnchor(p);\n            });\n        }\n    }\n\n    /**\n     * Registers an event delegate for a marker.\n     *\n     * @param eventName - The name of the event to register (e.g. 'click')\n     * @param marker - The {@link MapMarkerDirective} for which to register the event.\n     * @returns - Observable emiting an instance of T each time the event occurs.\n     * @memberof GoogleMarkerService\n     */\n    public CreateEventObservable<T>(eventName: string, marker: MapMarkerDirective): Observable<T> {\n        return Observable.create((observer: Observer<T>) => {\n            this._markers.get(marker).then((m: Marker) => {\n                m.AddListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n\n    /**\n     * Deletes a marker.\n     *\n     * @param marker - {@link MapMarkerDirective} to be deleted.\n     * @returns - A promise fullfilled once the marker has been deleted.\n     * @memberof GoogleMarkerService\n     */\n    public DeleteMarker(marker: MapMarkerDirective): Promise<void> {\n        const m = this._markers.get(marker);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((ma: Marker) => {\n            if (marker.InClusterLayer) {\n                this._clusterService.GetNativeLayer(marker.LayerId).then(l => { l.RemoveEntity(ma); });\n            }\n            if (marker.InCustomLayer) {\n                this._layerService.GetNativeLayer(marker.LayerId).then(l => { l.RemoveEntity(ma); });\n            }\n            return this._zone.run(() => {\n                ma.DeleteMarker();\n                this._markers.delete(marker);\n            });\n        });\n    }\n\n    /**\n     * Obtains geo coordinates for the marker on the click location\n     *\n     * @param e - The mouse event.\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\n     * @memberof GoogleMarkerService\n     */\n    public GetCoordinatesFromClick(e: MouseEvent | any): ILatLong {\n        if (!e) {\n            return null;\n        }\n        if (!e.latLng) {\n            return null;\n        }\n        if (!e.latLng.lat || !e.latLng.lng) {\n            return null;\n        }\n        return { latitude: e.latLng.lat(), longitude: e.latLng.lng() };\n    }\n\n    /**\n     * Obtains the marker model for the marker allowing access to native implementation functionatiliy.\n     *\n     * @param marker - The {@link MapMarkerDirective} for which to obtain the marker model.\n     * @returns - A promise that when fullfilled contains the {@link Marker} implementation of the underlying platform.\n     * @memberof GoogleMarkerService\n     */\n    public GetNativeMarker(marker: MapMarkerDirective): Promise<Marker> {\n        return this._markers.get(marker);\n    }\n\n    /**\n     * Obtains the marker pixel location for the marker on the click location\n     *\n     * @param e - The mouse event.\n     * @returns - {@link ILatLong} containing the pixels of the marker on the map canvas.\n     * @memberof GoogleMarkerService\n     */\n    public GetPixelsFromClick(e: MouseEvent | any): IPoint {\n        if (!e || !e.latLng || !e.latLng.lat || !e.latLng.lng) {\n            return null;\n        }\n        if (this._mapService.MapInstance == null) {\n            return null;\n        }\n\n        let crossesDateLine: boolean = false;\n        const m = this._mapService.MapInstance;\n        const p = m.getProjection();\n        const s: number = Math.pow(2, m.getZoom());\n        const b: GoogleMapTypes.LatLngBounds = m.getBounds();\n        if (b.getCenter().lng() < b.getSouthWest().lng()  ||\n            b.getCenter().lng() > b.getNorthEast().lng()) { crossesDateLine = true; }\n\n        const offsetY: number = p.fromLatLngToPoint(b.getNorthEast()).y;\n        const offsetX: number = p.fromLatLngToPoint(b.getSouthWest()).x;\n        const point: GoogleMapTypes.Point = p.fromLatLngToPoint(e.latLng);\n        return {\n            x: Math.floor((point.x - offsetX + ((crossesDateLine && point.x < offsetX) ? 256 : 0)) * s),\n            y: Math.floor((point.y - offsetY) * s)\n        };\n    }\n\n    /**\n     * Converts a geo location to a pixel location relative to the map canvas.\n     *\n     * @param target - Either a {@link MapMarkerDirective}\n     * or a {@link ILatLong} for the basis of translation.\n     * @returns - A promise that when fullfilled contains a {@link IPoint}\n     * with the pixel coordinates of the MapMarker or ILatLong relative to the map canvas.\n     * @memberof GoogleMarkerService\n     */\n    public LocationToPoint(target: MapMarkerDirective | ILatLong): Promise<IPoint> {\n        if (target == null) {\n            return Promise.resolve(null);\n        }\n        if (target instanceof MapMarkerDirective) {\n            return this._markers.get(target).then((m: Marker) => {\n                const l: ILatLong = m.Location;\n                const p: Promise<IPoint> = this._mapService.LocationToPoint(l);\n                return p;\n            });\n        }\n        return this._mapService.LocationToPoint(target);\n    }\n\n    /**\n     * Updates the anchor position for the marker.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate the anchor.\n     * Anchor information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the anchor position has been updated.\n     * @memberof GoogleMarkerService\n     */\n    public UpdateAnchor(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => {\n            m.SetAnchor(marker.Anchor);\n        });\n    }\n\n    /**\n     * Updates whether the marker is draggable.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate dragability.\n     * Dragability information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the marker has been updated.\n     * @memberof GoogleMarkerService\n     */\n    public UpdateDraggable(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => m.SetDraggable(marker.Draggable));\n    }\n\n    /**\n     * Updates the Icon on the marker.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate the icon. Icon information is present\n     * in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the icon information has been updated.\n     * @memberof GoogleMarkerService\n     */\n    public UpdateIcon(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => {\n            if (marker.IconInfo) {\n                const x: IMarkerOptions = {\n                    position: { latitude: marker.Latitude, longitude: marker.Longitude },\n                    iconInfo: marker.IconInfo\n                };\n                const o: GoogleMapTypes.MarkerOptions = GoogleConversions.TranslateMarkerOptions(x);\n                m.SetIcon(o.icon);\n                marker.DynamicMarkerCreated.emit(x.iconInfo);\n            } else {\n                m.SetIcon(marker.IconUrl);\n            }\n\n        });\n    }\n\n    /**\n     * Updates the label on the marker.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate the label.\n     * Label information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the label has been updated.\n     * @memberof GoogleMarkerService\n     */\n    public UpdateLabel(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => { m.SetLabel(marker.Label); });\n    }\n\n    /**\n     * Updates the geo coordinates for the marker.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate the coordinates.\n     * Coordinate information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the position has been updated.\n     * @memberof GoogleMarkerService\n     */\n    public UpdateMarkerPosition(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then(\n            (m: Marker) => m.SetPosition({\n                latitude: marker.Latitude,\n                longitude: marker.Longitude\n            }));\n    }\n\n    /**\n     * Updates the title on the marker.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate the title.\n     * Title information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the title has been updated.\n     * @memberof GoogleMarkerService\n     */\n    public UpdateTitle(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => m.SetTitle(marker.Title));\n    }\n\n    /**\n     * Updates the visibility on the marker.\n     *\n     * @param - The {@link MapMarkerDirective} object for which to upate the title.\n     * Title information is present in the underlying {@link Marker} model object.\n     * @returns - A promise that is fullfilled when the title has been updated.\n     * @memberof GoogleMarkerService\n     */\n    public UpdateVisible(marker: MapMarkerDirective): Promise<void> {\n        return this._markers.get(marker).then((m: Marker) => m.SetVisible(marker.Visible));\n    }\n\n}\n","import { GoogleMarker } from './google-marker';\nimport { IClusterOptions } from '../../interfaces/icluster-options';\nimport { MapService } from '../../services/map.service';\nimport { Layer } from '../layer';\nimport { Marker } from '../marker';\nimport { InfoWindow } from '../info-window';\nimport { ClusterPlacementMode } from '../cluster-placement-mode';\nimport * as GoogleMapTypes from '../../services/google/google-map-types';\nimport { timer } from 'rxjs';\n\n/**\n * Concrete implementation of a clustering layer for the Google Map Provider.\n *\n * @export\n */\nexport class GoogleMarkerClusterer implements Layer {\n\n    ///\n    /// Field declarations\n    ///\n    private _isClustering = true;\n    private _markerLookup: Map<GoogleMapTypes.Marker, Marker> = new Map<GoogleMapTypes.Marker, Marker>();\n    private _markers: Array<Marker> = new Array<Marker>();\n    private _pendingMarkers: Array<Marker> = new Array<Marker>();\n    private _mapclicks: number = 0;\n    private _currentZoom: number = 0;\n    private _visible: boolean = true;\n\n    ///\n    /// Property definitions\n    ///\n\n    /**\n     * Get the native primitive underneath the abstraction layer.\n     *\n     * @returns GoogleMapTypes.MarkerClusterer.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public get NativePrimitve(): GoogleMapTypes.MarkerClusterer {\n        return this._layer;\n    }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates a new instance of the GoogleMarkerClusterer class.\n     *\n     * @param _layer GoogleMapTypes.MarkerClusterer. Native Google Maps Marker Clusterer supporting the cluster layer.\n     * @param _maps MapService. MapService implementation to leverage for the layer.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    constructor(private _layer: GoogleMapTypes.MarkerClusterer) { }\n\n\n    ///\n    /// Public methods, Layer interface implementation\n    ///\n\n    /**\n     * Adds an event listener for the layer.\n     *\n     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native\n     * layer supports.\n     * @param fn function. Handler to call when the event occurs.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public AddListener(eventType: string, fn: Function): void {\n        throw (new Error('Events are not supported on Google Cluster Layers. You can still add events to individual markers.'));\n    }\n\n    /**\n     * Adds an entity to the layer. Use this method with caution as it will\n     * trigger a recaluation of the clusters (and associated markers if approprite) for\n     * each invocation. If you use this method to add many markers to the cluster, use\n     *\n     * @param entity Marker. Entity to add to the layer.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public AddEntity(entity: Marker): void {\n        let isMarker: boolean = entity instanceof Marker;\n        isMarker = entity instanceof GoogleMarker || isMarker;\n        if (isMarker) {\n            entity.NativePrimitve.setMap(null);\n                // remove the marker from the map as the clusterer will control marker visibility.\n            if (entity.IsFirst) {\n                this.StopClustering();\n            }\n        }\n        if (entity.NativePrimitve && entity.Location) {\n            if (this._isClustering && this._visible) {\n                this._layer.addMarker(entity.NativePrimitve);\n                this._markers.push(entity);\n            }\n            else {\n                this._pendingMarkers.push(entity);\n            }\n            this._markerLookup.set(entity.NativePrimitve, entity);\n        }\n        if (isMarker) {\n            if (entity.IsLast) {\n                this.StartClustering();\n            }\n        }\n    }\n\n    /**\n     * Adds a number of markers to the layer.\n     *\n     * @param entities Array<Marker>. Entities to add to the layer.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public AddEntities(entities: Array<Marker>): void {\n        if (entities != null && Array.isArray(entities) && entities.length !== 0 ) {\n            const e: Array<GoogleMapTypes.Marker> = entities.map(p => {\n                this._markerLookup.set(p.NativePrimitve, p);\n                p.NativePrimitve.setMap(null);\n                    // remove the marker from the map as the clusterer will control marker visibility.\n                return p.NativePrimitve;\n            });\n            if (this._isClustering && this._visible) {\n                this._layer.addMarkers(e);\n                this._markers.push(...entities);\n            }\n            else {\n                // if layer is not visible, always add to pendingMarkers. Setting the layer to visible later\n                // will render the markers appropriately\n                this._pendingMarkers.push(...entities);\n            }\n        }\n    }\n\n    /**\n     * Deletes the clustering layer.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public Delete(): void {\n        this._layer.getMarkers().forEach(m => {\n            m.setMap(null);\n                // remove the marker from the map as the clusterer will control marker visibility.\n        });\n        this._layer.clearMarkers();\n        this._markers.splice(0);\n        this._pendingMarkers.splice(0);\n    }\n\n    /**\n     * Returns the abstract marker used to wrap the Google Marker.\n     *\n     * @returns Marker. The abstract marker object representing the pushpin.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public GetMarkerFromGoogleMarker(pin: GoogleMapTypes.Marker): Marker {\n        const m: Marker = this._markerLookup.get(pin);\n        return m;\n    }\n\n    /**\n     * Returns the options governing the behavior of the layer.\n     *\n     * @returns IClusterOptions. The layer options.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public GetOptions(): IClusterOptions {\n        const options: IClusterOptions = {\n            id: 0,\n            gridSize: this._layer.getGridSize(),\n            clusteringEnabled: this._layer.getGridSize() === 0,\n            maxZoom: this._layer.getMaxZoom(),\n            minimumClusterSize: this._layer.getMinClusterSize(),\n            placementMode: this._layer.isAverageCenter() ? ClusterPlacementMode.MeanValue : ClusterPlacementMode.FirstPin,\n            visible: this._visible,\n            zoomOnClick: this._layer.isZoomOnClick(),\n            styles: this._layer.getStyles()\n        };\n        return options;\n    }\n\n    /**\n     * Returns the visibility state of the layer.\n     *\n     * @returns Boolean. True is the layer is visible, false otherwise.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public GetVisible(): boolean {\n        return this._visible;\n    }\n\n    /**\n     * Removes an entity from the cluster layer.\n     *\n     * @param entity Marker Entity to be removed from the layer.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public RemoveEntity(entity: Marker): void {\n        if (entity.NativePrimitve && entity.Location) {\n            const j: number = this._markers.indexOf(entity);\n            const k: number = this._pendingMarkers.indexOf(entity);\n            if (j > -1) { this._markers.splice(j, 1); }\n            if (k > -1) { this._pendingMarkers.splice(k, 1); }\n            if (this._isClustering) {\n                this._layer.removeMarker(entity.NativePrimitve);\n            }\n            this._markerLookup.delete(entity.NativePrimitve);\n        }\n    }\n\n    /**\n     * Sets the entities for the cluster layer.\n     *\n     * @param entities Array<Marker> containing\n     * the entities to add to the cluster. This replaces any existing entities.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public SetEntities(entities: Array<Marker>): void {\n        this._layer.getMarkers().forEach(m => {\n            m.setMap(null);\n        });\n        this._layer.clearMarkers();\n        this._markers.splice(0);\n        this._pendingMarkers.splice(0);\n        this._markerLookup.clear();\n\n        const p: Array<GoogleMapTypes.Marker> = new Array<GoogleMapTypes.Marker>();\n        entities.forEach((e: any) => {\n            if (e.NativePrimitve && e.Location) {\n                e.NativePrimitve.setMap(null);\n                this._markerLookup.set(e.NativePrimitve, e);\n                if (this._visible) {\n                    this._markers.push(e);\n                    p.push(e.NativePrimitve);\n                }\n                else {\n                    this._pendingMarkers.push(e);\n                }\n            }\n        });\n        this._layer.addMarkers(p);\n    }\n\n    /**\n     * Sets the options for the cluster layer.\n     *\n     * @param options IClusterOptions containing the options enumeration controlling the layer behavior. The supplied options\n     * are merged with the default/existing options.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public SetOptions(options: IClusterOptions): void {\n        if (options.placementMode != null) {\n            throw(new Error('GoogleMarkerClusterer: PlacementMode option cannot be set after initial creation.'));\n        }\n        if (options.zoomOnClick != null) {\n            throw(new Error('GoogleMarkerClusterer: ZoomOnClick option cannot be set after initial creation.'));\n        }\n        if (options.callback != null) {}\n        if (options.clusteringEnabled != null) {\n            this._layer.setMinClusterSize(options.clusteringEnabled ? 1 : 10000000);\n            this._layer.resetViewport();\n            this._layer.redraw();\n        }\n        if (options.gridSize != null && (options.clusteringEnabled == null || options.clusteringEnabled)) {\n            this._layer.setGridSize(options.gridSize);\n            this._layer.resetViewport();\n            this._layer.redraw();\n        }\n        if (options.maxZoom != null) { this._layer.setMaxZoom(options.maxZoom); }\n        if (options.minimumClusterSize != null) { this._layer.setMinClusterSize(options.minimumClusterSize); }\n        if (options.styles != null) { this._layer.setStyles(options.styles); }\n        if (options.visible != null) { this.SetVisible(options.visible); }\n    }\n\n    /**\n     * Toggles the cluster layer visibility.\n     *\n     * @param visible Boolean true to make the layer visible, false to hide the layer.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public SetVisible(visible: boolean): void {\n        const map: GoogleMapTypes.GoogleMap = visible ? this._layer.getMap() : null;\n        if (!visible) {\n            this._layer.resetViewport(true);\n        }\n        else {\n            const p: Array<GoogleMapTypes.Marker> = new Array<GoogleMapTypes.Marker>();\n            if (this._pendingMarkers.length > 0) {\n                this._pendingMarkers.forEach(e => {\n                    if (e.NativePrimitve && e.Location) {\n                        p.push(<GoogleMapTypes.Marker>e.NativePrimitve);\n                    }\n                });\n                this._layer.addMarkers(p);\n                this._markers = this._markers.concat(this._pendingMarkers.splice(0));\n            }\n            else {\n                this._layer.redraw();\n            }\n        }\n        this._visible = visible;\n    }\n\n    /**\n     * Start to actually cluster the entities in a cluster layer. This method should be called after the initial set of entities\n     * have been added to the cluster. This method is used for performance reasons as adding an entitiy will recalculate all clusters.\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\n     * complete to recalculate the clusters.\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public StartClustering(): void {\n        if (this._isClustering) { return; }\n\n        if (this._visible) {\n            const p: Array<GoogleMapTypes.Marker> = new Array<GoogleMapTypes.Marker>();\n            this._markers.forEach(e => {\n                if (e.NativePrimitve && e.Location) {\n                    p.push(<GoogleMapTypes.Marker>e.NativePrimitve);\n                }\n            });\n            this._pendingMarkers.forEach(e => {\n                if (e.NativePrimitve && e.Location) {\n                    p.push(<GoogleMapTypes.Marker>e.NativePrimitve);\n                }\n            });\n            this._layer.addMarkers(p);\n            this._markers = this._markers.concat(this._pendingMarkers.splice(0));\n        }\n\n        if (!this._visible) {\n            // only add the markers if the layer is visible. Otherwise, keep them pending. They would be added once the\n            // layer is set to visible.\n            timer(0).subscribe(() => {\n                this._layer.resetViewport(true);\n            });\n        }\n        this._isClustering = true;\n    }\n\n    /**\n     * Stop to actually cluster the entities in a cluster layer.\n     * This method is used for performance reasons as adding an entitiy will recalculate all clusters.\n     * As such, StopClustering should be called before adding many entities and StartClustering should be called once adding is\n     * complete to recalculate the clusters.\n     *\n     * @returns\n     *\n     * @memberof GoogleMarkerClusterer\n     */\n    public StopClustering() {\n        if (!this._isClustering) { return; }\n        this._isClustering = false;\n    }\n}\n","import { GoogleMarkerClusterer } from '../../models/google/google-marker-clusterer';\nimport { GoogleInfoWindow } from '../../models/google/google-info-window';\nimport { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { MapService } from '../map.service';\nimport { MapAPILoader } from '../mapapiloader';\nimport { GoogleMapAPILoader, GoogleMapAPILoaderConfig } from './google-map-api-loader.service';\nimport { GoogleClusterService } from './google-cluster.service';\nimport { ILayerOptions } from '../../interfaces/ilayer-options';\nimport { IClusterOptions } from '../../interfaces/icluster-options';\nimport { IMapOptions } from '../../interfaces/imap-options';\nimport { ILatLong } from '../../interfaces/ilatlong';\nimport { IPoint } from '../../interfaces/ipoint';\nimport { ISize } from '../../interfaces/isize';\nimport { IMarkerOptions } from '../../interfaces/imarker-options';\nimport { IMarkerIconInfo } from '../../interfaces/imarker-icon-info';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { IInfoWindowOptions } from '../../interfaces/iinfo-window-options';\nimport { MapTypeId } from '../../models/map-type-id';\nimport { Marker } from '../../models/marker';\nimport { Polygon } from '../../models/polygon';\nimport { Polyline } from '../../models/polyline';\nimport { MixinMapLabelWithOverlayView } from '../../models/google/google-label';\nimport { MixinCanvasOverlay } from '../../models/google/google-canvas-overlay';\nimport { GoogleCanvasOverlay } from '../../models/google/google-canvas-overlay';\nimport { CanvasOverlay } from '../../models/canvas-overlay';\nimport { Layer } from '../../models/layer';\nimport { InfoWindow } from '../../models/info-window';\nimport { GooglePolygon } from '../../models/google/google-polygon';\nimport { GooglePolyline } from '../../models/google/google-polyline';\nimport { GoogleConversions } from './google-conversions';\nimport { GoogleMarker } from '../../models/google/google-marker';\nimport { GoogleLayer } from '../../models/google/google-layer';\nimport { IBox } from '../../interfaces/ibox';\nimport { GoogleMapEventsLookup } from '../../models/google/google-events-lookup';\nimport * as GoogleMapTypes from './google-map-types';\n\ndeclare const google: any;\ndeclare const MarkerClusterer: any;\n\n/**\n * Concrete implementation of the MapService abstract implementing a Google Maps provider\n *\n * @export\n */\n@Injectable()\nexport class GoogleMapService implements MapService {\n\n    ///\n    /// Field Declarations\n    ///\n\n    private _map: Promise<GoogleMapTypes.GoogleMap>;\n    private _mapInstance: GoogleMapTypes.GoogleMap;\n    private _mapResolver: (value?: GoogleMapTypes.GoogleMap) => void;\n    private _config: GoogleMapAPILoaderConfig;\n\n    ///\n    /// Property Definitions\n    ///\n\n\n    /**\n     * Gets the Google Map control instance underlying the implementation\n     *\n     * @readonly\n     * @memberof GoogleMapService\n     */\n    public get MapInstance(): GoogleMapTypes.GoogleMap { return this._mapInstance; }\n\n    /**\n     * Gets a Promise for a Google Map control instance underlying the implementation. Use this instead of {@link MapInstance} if you\n     * are not sure if and when the instance will be created.\n     * @readonly\n     * @memberof GoogleMapService\n     */\n    public get MapPromise(): Promise<GoogleMapTypes.GoogleMap> { return this._map; }\n\n    /**\n     * Gets the maps physical size.\n     *\n     * @readonly\n     * @abstract\n     * @memberof BingMapService\n     */\n    public get MapSize(): ISize {\n        if (this.MapInstance) {\n            const el: HTMLDivElement = this.MapInstance.getDiv();\n            const s: ISize = { width: el.offsetWidth, height: el.offsetHeight };\n            return s;\n        }\n        return null;\n    }\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of GoogleMapService.\n     * @param _loader MapAPILoader instance implemented for Google Maps. This instance will generally be injected.\n     * @param _zone NgZone object to enable zone aware promises. This will generally be injected.\n     *\n     * @memberof GoogleMapService\n     */\n    constructor(private _loader: MapAPILoader, private _zone: NgZone) {\n        this._map = new Promise<GoogleMapTypes.GoogleMap>(\n            (resolve: (map: GoogleMapTypes.GoogleMap) => void) => { this._mapResolver = resolve; }\n        );\n        this._config = (<GoogleMapAPILoader>this._loader).Config;\n    }\n\n    ///\n    /// Public methods and MapService interface implementation\n    ///\n\n    /**\n     * Creates a canvas overlay layer to perform custom drawing over the map with out\n     * some of the overhead associated with going through the Map objects.\n     * @param drawCallback A callback function that is triggered when the canvas is ready to be\n     * rendered for the current map view.\n     * @returns - Promise of a {@link CanvasOverlay} object.\n     * @memberof GoogleMapService\n     */\n    public CreateCanvasOverlay(drawCallback: (canvas: HTMLCanvasElement) => void): Promise<CanvasOverlay> {\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\n            const overlay: GoogleCanvasOverlay = new GoogleCanvasOverlay(drawCallback);\n            overlay.SetMap(map);\n            return overlay;\n        });\n    }\n\n    /*\n     * Creates a Google map cluster layer within the map context\n     *\n     * @param options - Options for the layer. See {@link IClusterOptions}.\n     * @returns - Promise of a {@link Layer} object, which models the underlying Microsoft.Maps.ClusterLayer object.\n     *\n     * @memberof GoogleMapService\n     */\n    public CreateClusterLayer(options: IClusterOptions): Promise<Layer> {\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\n            let updateOptions: boolean = false;\n            const markerClusterer: GoogleMapTypes.MarkerClusterer = new MarkerClusterer(map, [], options);\n            const clusterLayer = new GoogleMarkerClusterer(markerClusterer);\n            const o: IClusterOptions = {\n                id: options.id\n            };\n            if (!options.visible) {\n                o.visible = false;\n                updateOptions = true;\n            }\n            if (!options.clusteringEnabled) {\n                o.clusteringEnabled = false;\n                updateOptions = true;\n            }\n            if (updateOptions) {\n                clusterLayer.SetOptions(o);\n            }\n            return clusterLayer;\n        });\n    }\n\n    /**\n     * Creates an information window for a map position\n     *\n     * @param [options] - Infowindow options. See {@link IInfoWindowOptions}\n     * @returns - Promise of a {@link InfoWindow} object, which models the underlying Microsoft.Maps.Infobox object.\n     *\n     * @memberof GoogleMapService\n     */\n    public CreateInfoWindow(options?: IInfoWindowOptions): Promise<GoogleInfoWindow> {\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\n            const o: GoogleMapTypes.InfoWindowOptions = GoogleConversions.TranslateInfoWindowOptions(options);\n            const infoWindow: GoogleMapTypes.InfoWindow = new google.maps.InfoWindow(o);\n            return new GoogleInfoWindow(infoWindow, this);\n        });\n    }\n\n    /**\n     * Creates a map layer within the map context\n     *\n     * @param options - Options for the layer. See {@link ILayerOptions}\n     * @returns - Promise of a {@link Layer} object, which models the underlying Microsoft.Maps.Layer object.\n     *\n     * @memberof GoogleMapService\n     */\n    public CreateLayer(options: ILayerOptions): Promise<Layer> {\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\n             return new GoogleLayer(map, this, options.id);\n        });\n    }\n\n    /**\n     * Creates a map instance\n     *\n     * @param el - HTML element to host the map.\n     * @param mapOptions - Map options\n     * @returns - Promise fullfilled once the map has been created.\n     *\n     * @memberof GoogleMapService\n     */\n    public CreateMap(el: HTMLElement, mapOptions: IMapOptions): Promise<void> {\n        return this._loader.Load().then(() => {\n            // apply mixins\n            MixinMapLabelWithOverlayView();\n            MixinCanvasOverlay();\n\n            // execute map startup\n            if (!mapOptions.mapTypeId == null) { mapOptions.mapTypeId = MapTypeId.hybrid; }\n            if (this._mapInstance != null) {\n                this.DisposeMap();\n            }\n            const o: GoogleMapTypes.MapOptions = GoogleConversions.TranslateOptions(mapOptions);\n            const map: GoogleMapTypes.GoogleMap = new google.maps.Map(el, o);\n            if (mapOptions.bounds) {\n                map.fitBounds(GoogleConversions.TranslateBounds(mapOptions.bounds));\n            }\n            this._mapInstance = map;\n            this._mapResolver(map);\n            return;\n        });\n    }\n\n    /**\n     * Creates a Google map marker within the map context\n     *\n     * @param [options=<IMarkerOptions>{}] - Options for the marker. See {@link IMarkerOptions}.\n     * @returns - Promise of a {@link Marker} object, which models the underlying Microsoft.Maps.PushPin object.\n     *\n     * @memberof GoogleMapService\n     */\n    public CreateMarker(options: IMarkerOptions = <IMarkerOptions>{}): Promise<Marker> {\n        const payload = (x: GoogleMapTypes.MarkerOptions, map: GoogleMapTypes.GoogleMap): GoogleMarker => {\n            const marker = new google.maps.Marker(x);\n            const m = new GoogleMarker(marker);\n            m.IsFirst = options.isFirst;\n            m.IsLast = options.isLast;\n            if (options.metadata) { options.metadata.forEach((val: any, key: string) => m.Metadata.set(key, val)); }\n            marker.setMap(map);\n            return m;\n        };\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\n            const o: GoogleMapTypes.MarkerOptions = GoogleConversions.TranslateMarkerOptions(options);\n            if (options.iconInfo && options.iconInfo.markerType) {\n                const s = Marker.CreateMarker(options.iconInfo);\n                if (typeof(s) === 'string') {\n                    o.icon = s;\n                    return payload(o, map);\n                }\n                else {\n                    return s.then(x => {\n                        o.icon = x.icon;\n                        return payload(o, map);\n                    });\n                }\n            }\n            else {\n                return payload(o, map);\n            }\n        });\n    }\n\n    /**\n     * Creates a polygon within the Google Map map context\n     *\n     * @abstract\n     * @param options - Options for the polygon. See {@link IPolygonOptions}.\n     * @returns - Promise of a {@link Polygon} object, which models the underlying native polygon.\n     *\n     * @memberof MapService\n     */\n    public CreatePolygon(options: IPolygonOptions): Promise<Polygon> {\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\n            const o: GoogleMapTypes.PolygonOptions = GoogleConversions.TranslatePolygonOptions(options);\n            const polygon: GoogleMapTypes.Polygon = new google.maps.Polygon(o);\n            polygon.setMap(map);\n\n            const p: GooglePolygon = new GooglePolygon(polygon);\n            if (options.metadata) { options.metadata.forEach((val: any, key: string) => p.Metadata.set(key, val)); }\n            if (options.title && options.title !== '') { p.Title = options.title; }\n            if (options.showLabel != null) { p.ShowLabel = options.showLabel; }\n            if (options.showTooltip != null) { p.ShowTooltip = options.showTooltip; }\n            if (options.labelMaxZoom != null) { p.LabelMaxZoom = options.labelMaxZoom; }\n            if (options.labelMinZoom != null) { p.LabelMinZoom = options.labelMinZoom; }\n            return p;\n        });\n    }\n\n    /**\n     * Creates a polyline within the Google Map map context\n     *\n     * @abstract\n     * @param options - Options for the polyline. See {@link IPolylineOptions}.\n     * @returns - Promise of a {@link Polyline} object (or an array therefore for complex paths)\n     * which models the underlying native polyline.\n     *\n     * @memberof MapService\n     */\n    public CreatePolyline(options: IPolylineOptions): Promise<Polyline|Array<Polyline>> {\n        let polyline: GoogleMapTypes.Polyline;\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\n            const o: GoogleMapTypes.PolylineOptions = GoogleConversions.TranslatePolylineOptions(options);\n            if (options.path && options.path.length > 0 && !Array.isArray(options.path[0])) {\n                o.path = GoogleConversions.TranslatePaths(options.path)[0];\n                polyline = new google.maps.Polyline(o);\n                polyline.setMap(map);\n\n                const pl = new GooglePolyline(polyline);\n                if (options.metadata) { options.metadata.forEach((val: any, key: string) => pl.Metadata.set(key, val)); }\n                if (options.title && options.title !== '') { pl.Title = options.title; }\n                if (options.showTooltip != null) { pl.ShowTooltip = options.showTooltip; }\n                return pl;\n            }\n            else {\n                const paths: Array<Array<GoogleMapTypes.LatLng>> = GoogleConversions.TranslatePaths(options.path);\n                const lines: Array<Polyline> = new Array<Polyline>();\n                paths.forEach(p => {\n                    o.path = p;\n                    polyline = new google.maps.Polyline(o);\n                    polyline.setMap(map);\n\n                    const pl = new GooglePolyline(polyline);\n                    if (options.metadata) { options.metadata.forEach((val: any, key: string) => pl.Metadata.set(key, val)); }\n                    if (options.title && options.title !== '') { pl.Title = options.title; }\n                    if (options.showTooltip != null) { pl.ShowTooltip = options.showTooltip; }\n                    lines.push(pl);\n                });\n                return lines;\n            }\n        });\n    }\n\n    /**\n     * Deletes a layer from the map.\n     *\n     * @param layer - Layer to delete. See {@link Layer}. This method expects the Google specific Layer model implementation.\n     * @returns - Promise fullfilled when the layer has been removed.\n     *\n     * @memberof GoogleMapService\n     */\n    public DeleteLayer(layer: Layer): Promise<void> {\n        // return resolved promise as there is no conept of a custom layer in Google.\n        return Promise.resolve();\n    }\n\n    /**\n     * Dispaose the map and associated resoures.\n     *\n     * @memberof GoogleMapService\n     */\n    public DisposeMap(): void {\n        if (this._map == null && this._mapInstance == null) { return; }\n        if (this._mapInstance != null) {\n            this._mapInstance = null;\n            this._map = new Promise<GoogleMapTypes.GoogleMap>((resolve: () => void) => { this._mapResolver = resolve; });\n        }\n    }\n\n    /**\n     * Gets the geo coordinates of the map center\n     *\n     * @returns - A promise that when fullfilled contains the goe location of the center. See {@link ILatLong}.\n     *\n     * @memberof GoogleMapService\n     */\n    public GetCenter(): Promise<ILatLong> {\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\n            const center: GoogleMapTypes.LatLng = map.getCenter();\n            return <ILatLong>{\n                latitude: center.lat(),\n                longitude: center.lng()\n            };\n        });\n    }\n\n    /**\n     * Gets the geo coordinates of the map bounding box\n     *\n     * @returns - A promise that when fullfilled contains the geo location of the bounding box. See {@link IBox}.\n     *\n     * @memberof GoogleMapService\n     */\n    public GetBounds(): Promise<IBox> {\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\n            const box = map.getBounds();\n            return <IBox>{\n                maxLatitude: box.getNorthEast().lat(),\n                maxLongitude: Math.max(box.getNorthEast().lng(), box.getSouthWest().lng()),\n                minLatitude: box.getSouthWest().lat(),\n                minLongitude: Math.min(box.getNorthEast().lng(), box.getSouthWest().lng()),\n                center: { latitude: box.getCenter().lat(), longitude: box.getCenter().lng() },\n                padding: 0\n            };\n        });\n    }\n\n    /**\n     * Gets the current zoom level of the map.\n     *\n     * @returns - A promise that when fullfilled contains the zoom level.\n     *\n     * @memberof GoogleMapService\n     */\n    public GetZoom(): Promise<number> {\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => map.getZoom());\n    }\n\n    /**\n     * Provides a conversion of geo coordinates to pixels on the map control.\n     *\n     * @param loc - The geo coordinates to translate.\n     * @returns - Promise of an {@link IPoint} interface representing the pixels. This promise resolves to null\n     * if the goe coordinates are not in the view port.\n     *\n     * @memberof GoogleMapService\n     */\n    public LocationToPoint(loc: ILatLong): Promise<IPoint> {\n        return this._map.then((m: GoogleMapTypes.GoogleMap) => {\n            let crossesDateLine: boolean = false;\n            const l: GoogleMapTypes.LatLng = GoogleConversions.TranslateLocationObject(loc);\n            const p = m.getProjection();\n            const s: number = Math.pow(2, m.getZoom());\n            const b: GoogleMapTypes.LatLngBounds = m.getBounds();\n            if (b.getCenter().lng() < b.getSouthWest().lng()  ||\n                b.getCenter().lng() > b.getNorthEast().lng()) { crossesDateLine = true; }\n\n\n            const offsetY: number = p.fromLatLngToPoint(b.getNorthEast()).y;\n            const offsetX: number = p.fromLatLngToPoint(b.getSouthWest()).x;\n            const point: GoogleMapTypes.Point = p.fromLatLngToPoint(l);\n            return {\n                x: Math.floor((point.x - offsetX + ((crossesDateLine && point.x < offsetX) ? 256 : 0)) * s),\n                y: Math.floor((point.y - offsetY) * s)\n            };\n        });\n    }\n\n    /**\n     * Provides a conversion of geo coordinates to pixels on the map control.\n     *\n     * @param loc - The geo coordinates to translate.\n     * @returns - Promise of an {@link IPoint} interface array representing the pixels.\n     *\n     * @memberof BingMapService\n     */\n    public LocationsToPoints(locs: Array<ILatLong>): Promise<Array<IPoint>> {\n        return this._map.then((m: GoogleMapTypes.GoogleMap) => {\n            let crossesDateLine: boolean = false;\n            const p = m.getProjection();\n            const s: number = Math.pow(2, m.getZoom());\n            const b: GoogleMapTypes.LatLngBounds = m.getBounds();\n            if (b.getCenter().lng() < b.getSouthWest().lng()  ||\n                b.getCenter().lng() > b.getNorthEast().lng()) { crossesDateLine = true; }\n\n            const offsetX: number = p.fromLatLngToPoint(b.getSouthWest()).x;\n            const offsetY: number = p.fromLatLngToPoint(b.getNorthEast()).y;\n            const l = locs.map(ll => {\n                const l1: GoogleMapTypes.LatLng = GoogleConversions.TranslateLocationObject(ll);\n                const point: GoogleMapTypes.Point = p.fromLatLngToPoint(l1);\n                return {\n                    x: Math.floor((point.x - offsetX + ((crossesDateLine && point.x < offsetX) ? 256 : 0)) * s),\n                    y: Math.floor((point.y - offsetY) * s)\n                };\n            });\n            return l;\n        });\n    }\n\n    /**\n     * Centers the map on a geo location.\n     *\n     * @param latLng - GeoCoordinates around which to center the map. See {@link ILatLong}\n     * @returns - Promise that is fullfilled when the center operations has been completed.\n     *\n     * @memberof GoogleMapService\n     */\n    public SetCenter(latLng: ILatLong): Promise<void> {\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => {\n            const center: GoogleMapTypes.LatLng = GoogleConversions.TranslateLocationObject(latLng);\n            map.setCenter(center);\n        });\n    }\n\n    /**\n     * Sets the generic map options.\n     *\n     * @param options - Options to set.\n     *\n     * @memberof GoogleMapService\n     */\n    public SetMapOptions(options: IMapOptions) {\n        this._map.then((m: GoogleMapTypes.GoogleMap) => {\n            const o: GoogleMapTypes.MapOptions = GoogleConversions.TranslateOptions(options);\n            m.setOptions(o);\n        });\n    }\n\n    /**\n     * Sets the view options of the map.\n     *\n     * @param options - Options to set.\n     *\n     * @memberof GoogleMapService\n     */\n    public SetViewOptions(options: IMapOptions) {\n        this._map.then((m: GoogleMapTypes.GoogleMap) => {\n            if (options.bounds) {\n                m.fitBounds(GoogleConversions.TranslateBounds(options.bounds));\n            }\n            const o: GoogleMapTypes.MapOptions = GoogleConversions.TranslateOptions(options);\n            m.setOptions(o);\n        });\n    }\n\n    /**\n     * Sets the zoom level of the map.\n     *\n     * @param zoom - Zoom level to set.\n     * @returns - A Promise that is fullfilled once the zoom operation is complete.\n     *\n     * @memberof GoogleMapService\n     */\n    public SetZoom(zoom: number): Promise<void> {\n        return this._map.then((map: GoogleMapTypes.GoogleMap) => map.setZoom(zoom));\n    }\n\n    /**\n     * Creates an event subscription\n     *\n     * @param eventName - The name of the event (e.g. 'click')\n     * @returns - An observable of type E that fires when the event occurs.\n     *\n     * @memberof GoogleMapService\n     */\n    public SubscribeToMapEvent<E>(eventName: string): Observable<E> {\n        const googleEventName: string = GoogleMapEventsLookup[eventName];\n        return Observable.create((observer: Observer<E>) => {\n            this._map.then((m: GoogleMapTypes.GoogleMap) => {\n                m.addListener(googleEventName, (e: any) => {\n                    this._zone.run(() => observer.next(e));\n                });\n            });\n        });\n    }\n\n    /**\n     * Triggers the given event name on the map instance.\n     *\n     * @param eventName - Event to trigger.\n     * @returns - A promise that is fullfilled once the event is triggered.\n     *\n     * @memberof GoogleMapService\n     */\n    public TriggerMapEvent(eventName: string): Promise<void> {\n        return this._map.then((m) => google.maps.event.trigger(m, eventName, null));\n    }\n\n}\n","import { ILatLong } from '../../interfaces/ilatlong';\nimport { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { IPolygonOptions } from '../../interfaces/ipolygon-options';\nimport { Polygon } from '../../models/polygon';\nimport { MapPolygonDirective } from '../../components/map-polygon';\nimport { PolygonService } from '../polygon.service';\nimport { MapService } from '../map.service';\nimport { LayerService } from '../layer.service';\n/**\n * Concrete implementation of the Polygon Service abstract class for Google Maps.\n *\n * @export\n */\n@Injectable()\nexport class GooglePolygonService implements PolygonService {\n\n    ///\n    /// Field declarations\n    ///\n    private _polygons: Map<MapPolygonDirective, Promise<Polygon>> = new Map<MapPolygonDirective, Promise<Polygon>>();\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of GooglePolygonService.\n     * @param _mapService - {@link MapService} instance. The concrete {@link GoogleMapService} implementation is expected.\n     * @param _layerService - {@link GoogleLayerService} instance.\n     * The concrete {@link GoogleLayerService} implementation is expected.\n     * @param _zone - NgZone instance to support zone aware promises.\n     *\n     * @memberof GooglePolygonService\n     */\n    constructor(private _mapService: MapService,\n        private _layerService: LayerService,\n        private _zone: NgZone) {\n    }\n\n    ///\n    /// Public members and MarkerService implementation\n    ///\n\n    /**\n     * Adds a polygon to a map. Depending on the polygon context, the polygon will either by added to the map or a\n     * correcsponding layer.\n     *\n     * @param polygon - The {@link MapPolygonDirective} to be added.\n     *\n     * @memberof GooglePolygonService\n     */\n    public AddPolygon(polygon: MapPolygonDirective): void {\n        const o: IPolygonOptions = {\n            id: polygon.Id,\n            clickable: polygon.Clickable,\n            draggable: polygon.Draggable,\n            editable: polygon.Editable,\n            fillColor: polygon.FillColor,\n            fillOpacity: polygon.FillOpacity,\n            geodesic: polygon.Geodesic,\n            labelMaxZoom: polygon.LabelMaxZoom,\n            labelMinZoom: polygon.LabelMinZoom,\n            paths: polygon.Paths,\n            showLabel: polygon.ShowLabel,\n            showTooltip: polygon.ShowTooltip,\n            strokeColor: polygon.StrokeColor,\n            strokeOpacity: polygon.StrokeOpacity,\n            strokeWeight: polygon.StrokeWeight,\n            title: polygon.Title,\n            visible: polygon.Visible,\n            zIndex: polygon.zIndex,\n        };\n        const polygonPromise: Promise<Polygon> = this._mapService.CreatePolygon(o);\n        this._polygons.set(polygon, polygonPromise);\n    }\n\n    /**\n      * Registers an event delegate for a polygon.\n      *\n      * @param eventName - The name of the event to register (e.g. 'click')\n      * @param polygon - The {@link MapPolygonDirective} for which to register the event.\n      * @returns - Observable emiting an instance of T each time the event occurs.\n      *\n      * @memberof GooglePolygonService\n      */\n    public CreateEventObservable<T>(eventName: string, polygon: MapPolygonDirective): Observable<T> {\n        return Observable.create((observer: Observer<T>) => {\n            this._polygons.get(polygon).then((p: Polygon) => {\n                p.AddListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n\n    /**\n      * Deletes a polygon.\n      *\n      * @param polygon - {@link MapPolygonDirective} to be deleted.\n      * @returns - A promise fullfilled once the polygon has been deleted.\n      *\n      * @memberof GooglePolygonService\n      */\n    public DeletePolygon(polygon: MapPolygonDirective): Promise<void> {\n        const m = this._polygons.get(polygon);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l: Polygon) => {\n            return this._zone.run(() => {\n                l.Delete();\n                this._polygons.delete(polygon);\n            });\n        });\n\n    }\n\n    /**\n     * Obtains geo coordinates for the polygon on the click location\n     *\n     * @abstract\n     * @param e - The mouse event.\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked marker.\n     *\n     * @memberof GooglePolygonService\n     */\n    public GetCoordinatesFromClick(e: MouseEvent | any): ILatLong {\n        return { latitude: e.latLng.lat(), longitude: e.latLng.lng() };\n    }\n\n    /**\n     * Obtains the polygon model for the polygon allowing access to native implementation functionatiliy.\n     *\n     * @param polygon - The {@link MapPolygonDirective} for which to obtain the polygon model.\n     * @returns - A promise that when fullfilled contains the {@link Polygon} implementation of the underlying platform.\n     *\n     * @memberof GooglePolygonService\n     */\n    public GetNativePolygon(polygon: MapPolygonDirective): Promise<Polygon> {\n        return this._polygons.get(polygon);\n    }\n\n    /**\n     * Set the polygon options.\n     *\n     * @param polygon - {@link MapPolygonDirective} to be updated.\n     * @param options - {@link IPolygonOptions} object containing the options. Options will be merged with the\n     * options already on the underlying object.\n     * @returns - A promise fullfilled once the polygon options have been set.\n     *\n     * @memberof GooglePolygonService\n     */\n    public SetOptions(polygon: MapPolygonDirective, options: IPolygonOptions): Promise<void> {\n        return this._polygons.get(polygon).then((l: Polygon) => { l.SetOptions(options); });\n    }\n\n    /**\n     * Updates the Polygon path\n     *\n     * @param polygon - {@link MapPolygonDirective} to be updated.\n     * @returns - A promise fullfilled once the polygon has been updated.\n     *\n     * @memberof GooglePolygonService\n     */\n    public UpdatePolygon(polygon: MapPolygonDirective): Promise<void> {\n        const m = this._polygons.get(polygon);\n        if (m == null || polygon.Paths == null || !Array.isArray(polygon.Paths) || polygon.Paths.length === 0) {\n            return Promise.resolve();\n        }\n        return m.then((l: Polygon) => {\n            if (Array.isArray(polygon.Paths[0])) {\n                l.SetPaths(polygon.Paths);\n            }\n            else {\n                l.SetPath(<Array<ILatLong>>polygon.Paths);\n            }\n        });\n    }\n\n}\n","import { ILatLong } from '../../interfaces/ilatlong';\nimport { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { IPolylineOptions } from '../../interfaces/ipolyline-options';\nimport { Polyline } from '../../models/polyline';\nimport { MapPolylineDirective } from '../../components/map-polyline';\nimport { PolylineService } from '../polyline.service';\nimport { MapService } from '../map.service';\nimport { LayerService } from '../layer.service';\n\n/**\n * Concrete implementation of the Polyline Service abstract class for Google Maps.\n *\n * @export\n */\n@Injectable()\nexport class GooglePolylineService implements PolylineService {\n\n    ///\n    /// Field declarations\n    ///\n    private _polylines: Map<MapPolylineDirective, Promise<Polyline|Array<Polyline>>> =\n        new Map<MapPolylineDirective, Promise<Polyline|Array<Polyline>>>();\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of GooglePolylineService.\n     * @param _mapService - {@link MapService} instance. The concrete {@link GoogleMapService} implementation is expected.\n     * @param _layerService - {@link LayerService} instance.\n     * The concrete {@link GoogleLayerService} implementation is expected.\n     * @param _zone - NgZone instance to support zone aware promises.\n     *\n     * @memberof GooglePolylineService\n     */\n    constructor(private _mapService: MapService,\n        private _layerService: LayerService,\n        private _zone: NgZone) { }\n\n    ///\n    /// Public members and MarkerService implementation\n    ///\n\n    /**\n     * Adds a polyline to a map. Depending on the polyline context, the polyline will either by added to the map or a\n     * correcsponding layer.\n     *\n     * @param polyline - The {@link MapPolylineDirective} to be added.\n     *\n     * @memberof GooglePolylineService\n     */\n    public AddPolyline(polyline: MapPolylineDirective): void {\n        const o: IPolylineOptions = {\n            id: polyline.Id,\n            clickable: polyline.Clickable,\n            draggable: polyline.Draggable,\n            editable: polyline.Editable,\n            geodesic: polyline.Geodesic,\n            path: polyline.Path,\n            showTooltip: polyline.ShowTooltip,\n            strokeColor: polyline.StrokeColor,\n            strokeOpacity: polyline.StrokeOpacity,\n            strokeWeight: polyline.StrokeWeight,\n            title: polyline.Title,\n            visible: polyline.Visible,\n            zIndex: polyline.zIndex,\n        };\n        const polylinePromise: Promise<Polyline|Array<Polyline>> = this._mapService.CreatePolyline(o);\n        this._polylines.set(polyline, polylinePromise);\n    }\n\n    /**\n      * Registers an event delegate for a line.\n      *\n      * @param eventName - The name of the event to register (e.g. 'click')\n      * @param polyline - The {@link MapPolylineDirective} for which to register the event.\n      * @returns - Observable emiting an instance of T each time the event occurs.\n      *\n      * @memberof GooglePolylineService\n      */\n    public CreateEventObservable<T>(eventName: string, polyline: MapPolylineDirective): Observable<T> {\n        return Observable.create((observer: Observer<T>) => {\n            this._polylines.get(polyline).then(p => {\n                const x: Array<Polyline> = Array.isArray(p) ? p : [p];\n                x.forEach(line => line.AddListener(eventName, (e: T) => this._zone.run(() => observer.next(e))));\n            });\n        });\n    }\n\n    /**\n      * Deletes a polyline.\n      *\n      * @param polyline - {@link MapPolylineDirective} to be deleted.\n      * @returns - A promise fullfilled once the polyline has been deleted.\n      *\n      * @memberof GooglePolylineService\n      */\n    public DeletePolyline(polyline: MapPolylineDirective): Promise<void> {\n        const m = this._polylines.get(polyline);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then(l => {\n            return this._zone.run(() => {\n                const x: Array<Polyline> = Array.isArray(l) ? l : [l];\n                x.forEach(line =>  line.Delete());\n                this._polylines.delete(polyline);\n            });\n        });\n\n    }\n\n    /**\n     * Obtains geo coordinates for the line on the click location\n     *\n     * @abstract\n     * @param e - The mouse event.\n     * @returns - {@link ILatLong} containing the geo coordinates of the clicked line.\n     *\n     * @memberof GooglePolylineService\n     */\n    public GetCoordinatesFromClick(e: MouseEvent | any): ILatLong {\n        if (!e) {\n            return null;\n        }\n        if (!e.latLng) {\n            return null;\n        }\n        if (!e.latLng.lat || !e.latLng.lng) {\n            return null;\n        }\n        return { latitude: e.latLng.lat(), longitude: e.latLng.lng() };\n    }\n\n    /**\n     * Obtains the polyline model for the line allowing access to native implementation functionatiliy.\n     *\n     * @param polyline - The {@link MapPolylineDirective} for which to obtain the polyline model.\n     * @returns - A promise that when fullfilled contains the {@link Polyline}\n     * implementation of the underlying platform. For complex paths, returns an array of polylines.\n     *\n     * @memberof GooglePolylineService\n     */\n    public GetNativePolyline(polyline: MapPolylineDirective): Promise<Polyline|Array<Polyline>> {\n        return this._polylines.get(polyline);\n    }\n\n    /**\n     * Set the polyline options.\n     *\n     * @param polyline - {@link MapPolylineDirective} to be updated.\n     * @param options - {@link IPolylineOptions} object containing the options. Options will be merged with the\n     * options already on the underlying object.\n     * @returns - A promise fullfilled once the polyline options have been set.\n     *\n     * @memberof GooglePolylineService\n     */\n    public SetOptions(polyline: MapPolylineDirective, options: IPolylineOptions): Promise<void> {\n        return this._polylines.get(polyline).then(l => {\n            const x: Array<Polyline> = Array.isArray(l) ? l : [l];\n            x.forEach(line => line.SetOptions(options));\n        });\n    }\n\n    /**\n     * Updates the Polyline path\n     *\n     * @param polyline - {@link MapPolylineDirective} to be updated.\n     * @returns - A promise fullfilled once the polyline has been updated.\n     *\n     * @memberof GooglePolylineService\n     */\n    public UpdatePolyline(polyline: MapPolylineDirective): Promise<void> {\n        const m = this._polylines.get(polyline);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then(l => this._zone.run(() => {\n            const x: Array<Polyline> = Array.isArray(l) ? l : [l];\n            const p: Array<Array<ILatLong>> =\n                polyline.Path.length > 0 && Array.isArray(polyline.Path[0]) ? <Array<Array<ILatLong>>>polyline.Path :\n                <Array<Array<ILatLong>>>[polyline.Path];\n            x.forEach((line, index) => {\n                if (p.length > index) { line.SetPath(p[index]); }\n            });\n            if (Array.isArray(l) && l.length > p.length) {\n                l.splice(p.length - 1).forEach(line => line.Delete());\n            }\n        }));\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { MapServiceFactory } from '../mapservicefactory';\nimport { MapService } from '../map.service';\nimport { MapAPILoader, WindowRef, DocumentRef } from '../mapapiloader';\nimport { MarkerService } from '../marker.service';\nimport { InfoBoxService } from '../infobox.service';\nimport { LayerService } from '../layer.service';\nimport { ClusterService } from '../cluster.service';\nimport { PolygonService } from '../polygon.service';\nimport { PolylineService } from '../polyline.service';\n\nimport * as GoogleMapTypes from './google-map-types';\n\nimport { GoogleMapAPILoader, GoogleMapAPILoaderConfig } from './google-map-api-loader.service';\nimport { GoogleInfoBoxService } from './google-infobox.service';\nimport { GoogleMarkerService } from './google-marker.service';\nimport { GoogleMapService } from './google-map.service';\nimport { GoogleLayerService } from './google-layer.service';\nimport { GoogleClusterService } from './google-cluster.service';\nimport { GooglePolygonService } from './google-polygon.service';\nimport { GooglePolylineService } from './google-polyline.service';\n\n/**\n * Implements a factory to create three necessary Google Maps specific service instances.\n *\n * @export\n */\n@Injectable()\nexport class GoogleMapServiceFactory implements MapServiceFactory {\n    private _map: Promise<GoogleMapTypes.GoogleMap>;\n    private _mapResolver: (value?: GoogleMapTypes.GoogleMap) => void;\n\n    ///\n    /// Constructor\n    ///\n\n    /**\n     * Creates an instance of GoogleMapServiceFactory.\n     * @param _loader - {@link MapAPILoader} implementation for the Google Map provider.\n     * @param _zone - NgZone object to implement zone aware promises.\n     *\n     * @memberof GoogleMapServiceFactory\n     */\n    constructor(private _loader: MapAPILoader, private _zone: NgZone) {\n        this._map =\n            new Promise<GoogleMapTypes.GoogleMap>((resolve: () => void) => { this._mapResolver = resolve; });\n    }\n\n    ///\n    /// Public methods and MapServiceFactory implementation.\n    ///\n\n    /**\n     * Creates the map service for the Google Maps implementation.\n     *\n     * @returns - {@link MapService}. A concreted instance of the {@link GoogleMapService}.\n     *\n     * @memberof GoogleMapServiceFactory\n     */\n    public Create(): MapService {\n        return new GoogleMapService(this._loader, this._zone);\n    }\n\n    /**\n     * Creates the cluster service for the Google Maps implementation.\n     *\n     * @param map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.\n     * @returns - {@link ClusterService}. A concreted instance of the {@link GoogleClusterService}.\n     *\n     * @memberof GoogleMapServiceFactory\n     */\n    public CreateClusterService(_mapService: MapService): ClusterService {\n        return new GoogleClusterService(_mapService, this._zone);\n    }\n\n    /**\n     * Creates thh info box service for the Google Maps implementation.\n     *\n     * @param map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.\n     * @param map - {@link MarkerService}. A concreted instance of the {@link GoogleMarkerService}.\n     * @returns - {@link InfoBoxService}. A concreted instance of the {@link GoogleInfoBoxService}.\n     *\n     * @memberof GoogleMapServiceFactory\n     */\n    public CreateInfoBoxService(_mapService: MapService, _markerService: MarkerService) {\n        return new GoogleInfoBoxService(_mapService, _markerService, this._zone);\n    }\n\n    /**\n     * Creates the layer service for the Google Maps implementation.\n     *\n     * @param map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.\n     * @returns - {@link LayerService}. A concreted instance of the {@link GoogleLayerService}.\n     *\n     * @memberof GoogleMapServiceFactory\n     */\n    public CreateLayerService(_mapService: MapService) {\n        return new GoogleLayerService(_mapService, this._zone);\n    }\n\n    /**\n     * Creates the marker service for the Google Maps implementation.\n     *\n     * @param map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.\n     * @param layers - {@link LayerService}. A concreted instance of the {@link GoogleLayerService}.\n     * @param clusters  - {@link ClusterService}. A concreted instance of the {@link GoogleClusterService}.\n     * @returns - {@link MarkerService}. A concreted instance of the {@link GoogleMarkerService}.\n     *\n     * @memberof GoogleMapServiceFactory\n     */\n    public CreateMarkerService(_mapService: MapService, _layerService: GoogleLayerService, _clusterService: GoogleClusterService) {\n        return new GoogleMarkerService(_mapService, _layerService, _clusterService, this._zone);\n    }\n\n    /**\n     * Creates the polygon service for the Google Maps implementation.\n     *\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\n     * @returns - {@link PolygonService} implementation for the underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    public CreatePolygonService(map: MapService, layers: LayerService): PolygonService {\n        return new GooglePolygonService(map, layers, this._zone);\n    }\n\n    /**\n     * Creates the polyline service for the Google Maps implementation.\n     *\n     * @param map - {@link MapService} implementation for thh underlying map archticture.\n     * @param layers - {@link LayerService} implementation for the underlying map architecture.\n     * @returns - {@link PolylineService} implementation for the underlying map architecture.\n     *\n     * @memberof MapServiceFactory\n     */\n    public CreatePolylineService(map: MapService, layers: LayerService): PolylineService {\n        return new GooglePolylineService(map, layers, this._zone);\n    }\n\n}\n\n/**\n *  Creates a new instance of a plaform specific MapServiceFactory.\n *\n * @param apiLoader - An {@link MapAPILoader} instance. This is expected to the a {@link GoogleMapAPILoader}.\n * @param zone - An NgZone instance to provide zone aware promises.\n *\n * @returns - A {@link MapServiceFactory} instance.\n */\nexport function GoogleMapServiceFactoryFactory(apiLoader: MapAPILoader, zone: NgZone): MapServiceFactory {\n    return new GoogleMapServiceFactory(apiLoader, zone);\n}\n\n/**\n * Creates a new instance of a plaform specific MapLoaderFactory.\n *\n * @export\n * @returns - A {@link MapAPILoader} instance.\n */\nexport function GoogleMapLoaderFactory(): MapAPILoader {\n    return new GoogleMapAPILoader(new GoogleMapAPILoaderConfig(), new WindowRef(), new DocumentRef());\n}\n","import { NgModule, ModuleWithProviders, NgZone } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport 'bingmaps';\n\n///\n/// import module interfaces\n///\nimport { ILatLong } from './src/interfaces/ilatlong';\nimport { IInfoWindowOptions } from './src/interfaces/iinfo-window-options';\nimport { IInfoWindowAction } from './src/interfaces/iinfo-window-action';\nimport { IMarkerOptions } from './src/interfaces/imarker-options';\nimport { IMapOptions } from './src/interfaces/imap-options';\nimport { ISize } from './src/interfaces/isize';\nimport { IPoint } from './src/interfaces/ipoint';\nimport { IBox } from './src/interfaces/ibox';\nimport { IMarkerEvent } from './src/interfaces/imarker-event';\nimport { IMarkerIconInfo } from './src/interfaces/imarker-icon-info';\nimport { ILayerOptions } from './src/interfaces/ilayer-options';\nimport { IClusterOptions } from './src/interfaces/icluster-options';\nimport { ISpiderClusterOptions } from './src/interfaces/ispider-cluster-options';\nimport { ILineOptions } from './src/interfaces/iline-options';\nimport { IPolygonOptions } from './src/interfaces/ipolygon-options';\nimport { IPolylineOptions } from './src/interfaces/ipolyline-options';\nimport { IPolygonEvent } from './src/interfaces/ipolygon-event';\nimport { IPolylineEvent } from './src/interfaces/ipolyline-event';\nimport { IMapEventLookup } from './src/interfaces/imap-event-lookup';\nimport { ILabelOptions } from './src/interfaces/ilabel-options';\nimport { ICustomMapStyle} from './src/interfaces/icustom-map-style';\n\n///\n/// import module models\n///\nimport { InfoWindow } from './src/models/info-window';\nimport { Marker } from './src/models/marker';\nimport { MarkerTypeId } from './src/models/marker-type-id';\nimport { MapTypeId } from './src/models/map-type-id';\nimport { Layer } from './src/models/layer';\nimport { Polygon } from './src/models/polygon';\nimport { Polyline } from './src/models/polyline';\nimport { SpiderClusterMarker } from './src/models/spider-cluster-marker';\nimport { ClusterPlacementMode } from './src/models/cluster-placement-mode';\nimport { ClusterClickAction } from './src/models/cluster-click-action';\nimport { CanvasOverlay} from './src/models/canvas-overlay';\nimport { BingLayer } from './src/models/bing/bing-layer';\nimport { BingClusterLayer } from './src/models/bing/bing-cluster-layer';\nimport { BingSpiderClusterMarker } from './src/models/bing/bing-spider-cluster-marker';\nimport { BingInfoWindow } from './src/models/bing/bing-info-window';\nimport { BingMarker } from './src/models/bing/bing-marker';\nimport { BingPolygon } from './src/models/bing/bing-polygon';\nimport { BingPolyline } from './src/models/bing/bing-polyline';\nimport { BingMapEventsLookup } from './src/models/bing/bing-events-lookup';\nimport { BingCanvasOverlay } from './src/models/bing/bing-canvas-overlay';\nimport { GoogleInfoWindow } from './src/models/google/google-info-window';\nimport { GoogleMarker } from './src/models/google/google-marker';\nimport { GooglePolygon } from './src/models/google/google-polygon';\nimport { GooglePolyline } from './src/models/google/google-polyline';\nimport { GoogleMapEventsLookup } from './src/models/google/google-events-lookup';\nimport { GoogleCanvasOverlay } from './src/models/google/google-canvas-overlay';\n\n///\n/// import module components\n///\nimport { MapComponent } from './src/components/map';\nimport { MapMarkerDirective } from './src/components/map-marker';\nimport { InfoBoxComponent } from './src/components/infobox';\nimport { InfoBoxActionDirective } from './src/components/infobox-action';\nimport { MapLayerDirective } from './src/components/map-layer';\nimport { ClusterLayerDirective } from './src/components/cluster-layer';\nimport { MapPolygonDirective } from './src/components/map-polygon';\nimport { MapPolylineDirective } from './src/components/map-polyline';\nimport { MapMarkerLayerDirective } from './src/components/map-marker-layer';\nimport { MapPolygonLayerDirective } from './src/components/map-polygon-layer';\nimport { MapPolylineLayerDirective } from './src/components/map-polyline-layer';\n\n///\n/// import module services\n///\nimport { MapServiceFactory } from './src/services/mapservicefactory';\nimport { MapService } from './src/services/map.service';\nimport { MapAPILoader, WindowRef, DocumentRef } from './src/services/mapapiloader';\nimport { InfoBoxService } from './src/services/infobox.service';\nimport { LayerService } from './src/services/layer.service';\nimport { MarkerService } from './src/services/marker.service';\nimport { ClusterService } from './src/services/cluster.service';\nimport { PolygonService } from './src/services/polygon.service';\nimport { PolylineService } from './src/services/polyline.service';\nimport { BingMapServiceFactory,\n    BingMapServiceFactoryFactory, BingMapLoaderFactory } from './src/services/bing/bing-map.service.factory';\nimport { BingMapService } from './src/services/bing/bing-map.service';\nimport { BingMapAPILoader, BingMapAPILoaderConfig } from './src/services/bing/bing-map.api-loader.service';\nimport { BingInfoBoxService } from './src/services/bing/bing-infobox.service';\nimport { BingMarkerService } from './src/services/bing/bing-marker.service';\nimport { BingLayerService } from './src/services/bing/bing-layer.service';\nimport { BingClusterService } from './src/services/bing/bing-cluster.service';\nimport { BingPolygonService } from './src/services/bing/bing-polygon.service';\nimport { BingPolylineService } from './src/services/bing/bing-polyline.service';\nimport { GoogleClusterService } from './src/services/google/google-cluster.service';\nimport { GoogleInfoBoxService } from './src/services/google/google-infobox.service';\nimport { GoogleLayerService } from './src/services/google/google-layer.service';\nimport { GoogleMapAPILoader, GoogleMapAPILoaderConfig } from './src/services/google/google-map-api-loader.service';\nimport {\n    GoogleMapServiceFactory, GoogleMapServiceFactoryFactory,\n    GoogleMapLoaderFactory\n} from './src/services/google/google-map.service.factory';\nimport { GoogleMapService } from './src/services/google/google-map.service';\nimport { GoogleMarkerService } from './src/services/google/google-marker.service';\nimport { GooglePolygonService } from './src/services/google/google-polygon.service';\nimport { GooglePolylineService } from './src/services/google/google-polyline.service';\n\n///\n/// export publics components, models, interfaces etc for external reuse.\n///\nexport {\n    ILatLong, IInfoWindowOptions, IInfoWindowAction, ISize, IMarkerOptions, IBox, IMapOptions, IPoint, IMarkerEvent, IPolygonEvent,\n    IPolylineEvent, IMapEventLookup, IMarkerIconInfo, ILayerOptions, IClusterOptions, ISpiderClusterOptions, ILineOptions,\n    IPolygonOptions, IPolylineOptions, ILabelOptions, ICustomMapStyle, MapComponent, InfoBoxComponent, MapMarkerDirective, MapPolygonDirective,\n    MapPolylineDirective, InfoBoxActionDirective, MapMarkerLayerDirective, MapPolygonLayerDirective, MapLayerDirective,\n    ClusterLayerDirective, MapPolylineLayerDirective, MapTypeId, Marker, MarkerTypeId, InfoWindow, Layer, ClusterPlacementMode,\n    ClusterClickAction, SpiderClusterMarker, Polygon, Polyline, CanvasOverlay, MapService, MapServiceFactory, MarkerService,\n    InfoBoxService, MapAPILoader, WindowRef, DocumentRef, LayerService, PolygonService, PolylineService, ClusterService\n};\nexport {\n    BingMapServiceFactory, BingMapAPILoaderConfig, BingMapService, BingInfoBoxService,\n    BingMarkerService, BingPolygonService, BingPolylineService, BingMapAPILoader,\n    BingLayerService, BingClusterService, BingLayer, BingMarker, BingPolyline, BingMapEventsLookup, BingPolygon,\n    BingInfoWindow, BingClusterLayer, BingSpiderClusterMarker, BingCanvasOverlay\n};\nexport {\n    GoogleClusterService, GoogleInfoBoxService, GoogleLayerService, GoogleMapAPILoader, GoogleMapAPILoaderConfig,\n    GoogleMapServiceFactory, GoogleMapService, GoogleMarkerService, GooglePolygonService, GooglePolylineService,\n    GoogleMarker, GoogleInfoWindow, GooglePolygon, GooglePolyline, GoogleMapEventsLookup, GoogleCanvasOverlay\n};\n\n///\n/// define module\n///\n@NgModule({\n    declarations: [\n        MapLayerDirective,\n        MapComponent,\n        MapMarkerDirective,\n        InfoBoxComponent,\n        InfoBoxActionDirective,\n        MapPolygonDirective,\n        MapPolylineDirective,\n        ClusterLayerDirective,\n        MapMarkerLayerDirective,\n        MapPolygonLayerDirective,\n        MapPolylineLayerDirective\n    ],\n    imports: [CommonModule],\n    exports: [\n        CommonModule,\n        MapComponent,\n        MapMarkerDirective,\n        MapPolygonDirective,\n        MapPolylineDirective,\n        InfoBoxComponent,\n        InfoBoxActionDirective,\n        MapLayerDirective,\n        ClusterLayerDirective,\n        MapMarkerLayerDirective,\n        MapPolygonLayerDirective,\n        MapPolylineLayerDirective\n    ]\n})\nexport class MapModule {\n\n    static forRoot(mapServiceFactory?: MapServiceFactory, loader?: MapAPILoader): ModuleWithProviders<any> {\n        return {\n            ngModule: MapModule,\n            providers: [\n                mapServiceFactory ? { provide: MapServiceFactory, useValue: mapServiceFactory } :\n                    { provide: MapServiceFactory, deps: [MapAPILoader, NgZone], useFactory: BingMapServiceFactoryFactory },\n                loader ? { provide: MapAPILoader, useValue: loader } : { provide: MapAPILoader, useFactory: BingMapLoaderFactory },\n                DocumentRef,\n                WindowRef\n            ]\n        };\n    }\n\n    static forRootBing(): ModuleWithProviders<any> {\n        return {\n            ngModule: MapModule,\n            providers: [\n                { provide: MapServiceFactory, deps: [MapAPILoader, NgZone], useFactory: BingMapServiceFactoryFactory },\n                { provide: MapAPILoader, useFactory: BingMapLoaderFactory },\n                DocumentRef,\n                WindowRef\n            ]\n        };\n    }\n\n    static forRootGoogle(): ModuleWithProviders<any> {\n        return {\n            ngModule: MapModule,\n            providers: [\n                { provide: MapServiceFactory, deps: [MapAPILoader, NgZone], useFactory: GoogleMapServiceFactoryFactory },\n                { provide: MapAPILoader, useFactory: GoogleMapLoaderFactory },\n                DocumentRef,\n                WindowRef\n            ]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {ClusterServiceFactory as ɵa,InfoBoxServiceFactory as ɵb,LayerServiceFactory as ɵc,MapServiceCreator as ɵd,MarkerServiceFactory as ɵe,PolygonServiceFactory as ɵf,PolylineServiceFactory as ɵg} from './src/components/map';\nexport {BingLayerBase as ɵl} from './src/services/bing/bing-layer-base';\nexport {BingMapLoaderFactory as ɵi,BingMapServiceFactoryFactory as ɵh} from './src/services/bing/bing-map.service.factory';\nexport {GoogleLayerBase as ɵm} from './src/services/google/google-layer-base';\nexport {InfoWindow as ɵo,Marker as ɵn,Polygon as ɵq,Polyline as ɵp} from './src/services/google/google-map-types';\nexport {GoogleMapLoaderFactory as ɵk,GoogleMapServiceFactoryFactory as ɵj} from './src/services/google/google-map.service.factory';"],"names":["id","google","MapTypeId","GoogleMapTypes.MapTypeId","MixinMapLabelWithOverlayView","MixinCanvasOverlay","layerId","ScriptProtocol","DEFAULT_CONFIGURATION"],"mappings":"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"}